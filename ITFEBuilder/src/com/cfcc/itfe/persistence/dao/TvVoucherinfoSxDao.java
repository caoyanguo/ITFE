    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TvVoucherinfoSxDto ;
import com.cfcc.itfe.persistence.pk.TvVoucherinfoSxPK ;


/**
 * <p>Title: DAO of table: TV_VOUCHERINFO_SX</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:04 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TvVoucherinfoSxDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TV_VOUCHERINFO_SX ("
          + "S_DEALNO,S_ORGCODE,S_TRECODE,S_FILENAME,S_ADMDIVCODE"
          + ",S_STYEAR,S_VTCODE,S_VOUCHERNO,S_VOUCHERFLAG,S_ATTACH"
          + ",S_RETURNERRMSG,S_CREATDATE,N_MONEY,S_STATUS,S_CONFIRUSERCODE"
          + ",S_VERIFYUSERCODE,S_DEMO,S_STAMPID,S_PACKNO,I_COUNT"
          + ",N_CHECKMONEY,I_CHECKCOUNT,TS_SYSUPDATE,S_STAMPUSER,S_CHECKDATE"
          + ",S_CHECKVOUCHERTYPE,S_PAYBANKCODE,S_RECVTIME,S_HOLD1,S_HOLD2"
          + ",S_HOLD3,S_HOLD4"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,CURRENT TIMESTAMP ,?,?,?,?,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TV_VOUCHERINFO_SX.S_DEALNO, TV_VOUCHERINFO_SX.S_ORGCODE, TV_VOUCHERINFO_SX.S_TRECODE, TV_VOUCHERINFO_SX.S_FILENAME, TV_VOUCHERINFO_SX.S_ADMDIVCODE, "
        + "TV_VOUCHERINFO_SX.S_STYEAR, TV_VOUCHERINFO_SX.S_VTCODE, TV_VOUCHERINFO_SX.S_VOUCHERNO, TV_VOUCHERINFO_SX.S_VOUCHERFLAG, TV_VOUCHERINFO_SX.S_ATTACH, "
        + "TV_VOUCHERINFO_SX.S_RETURNERRMSG, TV_VOUCHERINFO_SX.S_CREATDATE, TV_VOUCHERINFO_SX.N_MONEY, TV_VOUCHERINFO_SX.S_STATUS, TV_VOUCHERINFO_SX.S_CONFIRUSERCODE, "
        + "TV_VOUCHERINFO_SX.S_VERIFYUSERCODE, TV_VOUCHERINFO_SX.S_DEMO, TV_VOUCHERINFO_SX.S_STAMPID, TV_VOUCHERINFO_SX.S_PACKNO, TV_VOUCHERINFO_SX.I_COUNT, "
        + "TV_VOUCHERINFO_SX.N_CHECKMONEY, TV_VOUCHERINFO_SX.I_CHECKCOUNT, TV_VOUCHERINFO_SX.TS_SYSUPDATE, TV_VOUCHERINFO_SX.S_STAMPUSER, TV_VOUCHERINFO_SX.S_CHECKDATE, "
        + "TV_VOUCHERINFO_SX.S_CHECKVOUCHERTYPE, TV_VOUCHERINFO_SX.S_PAYBANKCODE, TV_VOUCHERINFO_SX.S_RECVTIME, TV_VOUCHERINFO_SX.S_HOLD1, TV_VOUCHERINFO_SX.S_HOLD2, "
        + "TV_VOUCHERINFO_SX.S_HOLD3, TV_VOUCHERINFO_SX.S_HOLD4 "
        + "FROM TV_VOUCHERINFO_SX "
        +" WHERE " 
        + "S_DEALNO = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TV_VOUCHERINFO_SX.S_DEALNO, TV_VOUCHERINFO_SX.S_ORGCODE, TV_VOUCHERINFO_SX.S_TRECODE, TV_VOUCHERINFO_SX.S_FILENAME, TV_VOUCHERINFO_SX.S_ADMDIVCODE, "
        + "TV_VOUCHERINFO_SX.S_STYEAR, TV_VOUCHERINFO_SX.S_VTCODE, TV_VOUCHERINFO_SX.S_VOUCHERNO, TV_VOUCHERINFO_SX.S_VOUCHERFLAG, TV_VOUCHERINFO_SX.S_ATTACH, "
        + "TV_VOUCHERINFO_SX.S_RETURNERRMSG, TV_VOUCHERINFO_SX.S_CREATDATE, TV_VOUCHERINFO_SX.N_MONEY, TV_VOUCHERINFO_SX.S_STATUS, TV_VOUCHERINFO_SX.S_CONFIRUSERCODE, "
        + "TV_VOUCHERINFO_SX.S_VERIFYUSERCODE, TV_VOUCHERINFO_SX.S_DEMO, TV_VOUCHERINFO_SX.S_STAMPID, TV_VOUCHERINFO_SX.S_PACKNO, TV_VOUCHERINFO_SX.I_COUNT, "
        + "TV_VOUCHERINFO_SX.N_CHECKMONEY, TV_VOUCHERINFO_SX.I_CHECKCOUNT, TV_VOUCHERINFO_SX.TS_SYSUPDATE, TV_VOUCHERINFO_SX.S_STAMPUSER, TV_VOUCHERINFO_SX.S_CHECKDATE, "
        + "TV_VOUCHERINFO_SX.S_CHECKVOUCHERTYPE, TV_VOUCHERINFO_SX.S_PAYBANKCODE, TV_VOUCHERINFO_SX.S_RECVTIME, TV_VOUCHERINFO_SX.S_HOLD1, TV_VOUCHERINFO_SX.S_HOLD2, "
        + "TV_VOUCHERINFO_SX.S_HOLD3, TV_VOUCHERINFO_SX.S_HOLD4 "
        + "FROM TV_VOUCHERINFO_SX "
        +" WHERE " 
        + "S_DEALNO = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TV_VOUCHERINFO_SX.S_DEALNO  , TV_VOUCHERINFO_SX.S_ORGCODE  , TV_VOUCHERINFO_SX.S_TRECODE  , TV_VOUCHERINFO_SX.S_FILENAME  , TV_VOUCHERINFO_SX.S_ADMDIVCODE "
        + " , TV_VOUCHERINFO_SX.S_STYEAR  , TV_VOUCHERINFO_SX.S_VTCODE  , TV_VOUCHERINFO_SX.S_VOUCHERNO  , TV_VOUCHERINFO_SX.S_VOUCHERFLAG  , TV_VOUCHERINFO_SX.S_ATTACH "
        + " , TV_VOUCHERINFO_SX.S_RETURNERRMSG  , TV_VOUCHERINFO_SX.S_CREATDATE  , TV_VOUCHERINFO_SX.N_MONEY  , TV_VOUCHERINFO_SX.S_STATUS  , TV_VOUCHERINFO_SX.S_CONFIRUSERCODE "
        + " , TV_VOUCHERINFO_SX.S_VERIFYUSERCODE  , TV_VOUCHERINFO_SX.S_DEMO  , TV_VOUCHERINFO_SX.S_STAMPID  , TV_VOUCHERINFO_SX.S_PACKNO  , TV_VOUCHERINFO_SX.I_COUNT "
        + " , TV_VOUCHERINFO_SX.N_CHECKMONEY  , TV_VOUCHERINFO_SX.I_CHECKCOUNT  , TV_VOUCHERINFO_SX.TS_SYSUPDATE  , TV_VOUCHERINFO_SX.S_STAMPUSER  , TV_VOUCHERINFO_SX.S_CHECKDATE "
        + " , TV_VOUCHERINFO_SX.S_CHECKVOUCHERTYPE  , TV_VOUCHERINFO_SX.S_PAYBANKCODE  , TV_VOUCHERINFO_SX.S_RECVTIME  , TV_VOUCHERINFO_SX.S_HOLD1  , TV_VOUCHERINFO_SX.S_HOLD2 "
        + " , TV_VOUCHERINFO_SX.S_HOLD3  , TV_VOUCHERINFO_SX.S_HOLD4 "
        + "FROM TV_VOUCHERINFO_SX ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TV_VOUCHERINFO_SX.S_DEALNO, TV_VOUCHERINFO_SX.S_ORGCODE, TV_VOUCHERINFO_SX.S_TRECODE, TV_VOUCHERINFO_SX.S_FILENAME, TV_VOUCHERINFO_SX.S_ADMDIVCODE, "
        + "TV_VOUCHERINFO_SX.S_STYEAR, TV_VOUCHERINFO_SX.S_VTCODE, TV_VOUCHERINFO_SX.S_VOUCHERNO, TV_VOUCHERINFO_SX.S_VOUCHERFLAG, TV_VOUCHERINFO_SX.S_ATTACH, "
        + "TV_VOUCHERINFO_SX.S_RETURNERRMSG, TV_VOUCHERINFO_SX.S_CREATDATE, TV_VOUCHERINFO_SX.N_MONEY, TV_VOUCHERINFO_SX.S_STATUS, TV_VOUCHERINFO_SX.S_CONFIRUSERCODE, "
        + "TV_VOUCHERINFO_SX.S_VERIFYUSERCODE, TV_VOUCHERINFO_SX.S_DEMO, TV_VOUCHERINFO_SX.S_STAMPID, TV_VOUCHERINFO_SX.S_PACKNO, TV_VOUCHERINFO_SX.I_COUNT, "
        + "TV_VOUCHERINFO_SX.N_CHECKMONEY, TV_VOUCHERINFO_SX.I_CHECKCOUNT, TV_VOUCHERINFO_SX.TS_SYSUPDATE, TV_VOUCHERINFO_SX.S_STAMPUSER, TV_VOUCHERINFO_SX.S_CHECKDATE, "
        + "TV_VOUCHERINFO_SX.S_CHECKVOUCHERTYPE, TV_VOUCHERINFO_SX.S_PAYBANKCODE, TV_VOUCHERINFO_SX.S_RECVTIME, TV_VOUCHERINFO_SX.S_HOLD1, TV_VOUCHERINFO_SX.S_HOLD2, "
        + "TV_VOUCHERINFO_SX.S_HOLD3, TV_VOUCHERINFO_SX.S_HOLD4 "
        + "FROM TV_VOUCHERINFO_SX " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "S_DEALNO = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TV_VOUCHERINFO_SX SET "
        + "S_ORGCODE =?,S_TRECODE =?,S_FILENAME =?,S_ADMDIVCODE =?,S_STYEAR =?, "
        + "S_VTCODE =?,S_VOUCHERNO =?,S_VOUCHERFLAG =?,S_ATTACH =?,S_RETURNERRMSG =?, "
        + "S_CREATDATE =?,N_MONEY =?,S_STATUS =?,S_CONFIRUSERCODE =?,S_VERIFYUSERCODE =?, "
        + "S_DEMO =?,S_STAMPID =?,S_PACKNO =?,I_COUNT =?,N_CHECKMONEY =?, "
        + "I_CHECKCOUNT =?,TS_SYSUPDATE =CURRENT TIMESTAMP,S_STAMPUSER =?,S_CHECKDATE =?,S_CHECKVOUCHERTYPE =?, "
        + "S_PAYBANKCODE =?,S_RECVTIME =?,S_HOLD1 =?,S_HOLD2 =?,S_HOLD3 =?, "
        + "S_HOLD4 =? "
        + "WHERE "
        + "S_DEALNO = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TV_VOUCHERINFO_SX SET "
        + "S_ORGCODE =?, S_TRECODE =?, S_FILENAME =?, S_ADMDIVCODE =?, S_STYEAR =?,  "
        + "S_VTCODE =?, S_VOUCHERNO =?, S_VOUCHERFLAG =?, S_ATTACH =?, S_RETURNERRMSG =?,  "
        + "S_CREATDATE =?, N_MONEY =?, S_STATUS =?, S_CONFIRUSERCODE =?, S_VERIFYUSERCODE =?,  "
        + "S_DEMO =?, S_STAMPID =?, S_PACKNO =?, I_COUNT =?, N_CHECKMONEY =?,  "
        + "I_CHECKCOUNT =?, TS_SYSUPDATE =CURRENT TIMESTAMP, S_STAMPUSER =?, S_CHECKDATE =?, S_CHECKVOUCHERTYPE =?,  "
        + "S_PAYBANKCODE =?, S_RECVTIME =?, S_HOLD1 =?, S_HOLD2 =?, S_HOLD3 =?,  "
        + "S_HOLD4 =? "
        + "WHERE "
        + "S_DEALNO = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TV_VOUCHERINFO_SX " 
        + " WHERE "
        + "S_DEALNO = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TvVoucherinfoSxDto dto = (TvVoucherinfoSxDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getSdealno());

          ps.setString(2, dto.getSorgcode());

          ps.setString(3, dto.getStrecode());

          ps.setString(4, dto.getSfilename());

          ps.setString(5, dto.getSadmdivcode());

          ps.setString(6, dto.getSstyear());

          ps.setString(7, dto.getSvtcode());

          ps.setString(8, dto.getSvoucherno());

          ps.setString(9, dto.getSvoucherflag());

          ps.setString(10, dto.getSattach());

          ps.setString(11, dto.getSreturnerrmsg());

          ps.setString(12, dto.getScreatdate());

          ps.setBigDecimal(13, dto.getNmoney());

          ps.setString(14, dto.getSstatus());

          ps.setString(15, dto.getSconfirusercode());

          ps.setString(16, dto.getSverifyusercode());

          ps.setString(17, dto.getSdemo());

          ps.setString(18, dto.getSstampid());

          ps.setString(19, dto.getSpackno());

          if (dto.getIcount()==null)
            ps.setNull(20, java.sql.Types.INTEGER);
         else
            ps.setInt(20, dto.getIcount().intValue());
          ps.setBigDecimal(21, dto.getNcheckmoney());

          if (dto.getIcheckcount()==null)
            ps.setNull(22, java.sql.Types.INTEGER);
         else
            ps.setInt(22, dto.getIcheckcount().intValue());
           ps.setString(23, dto.getSstampuser());

          ps.setString(24, dto.getScheckdate());

          ps.setString(25, dto.getScheckvouchertype());

          ps.setString(26, dto.getSpaybankcode());

          ps.setTimestamp(27, dto.getSrecvtime());

          ps.setString(28, dto.getShold1());

          ps.setString(29, dto.getShold2());

          ps.setString(30, dto.getShold3());

          ps.setString(31, dto.getShold4());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TvVoucherinfoSxDto dto = (TvVoucherinfoSxDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getSdealno());
            ps.setString(2, dto.getSorgcode());
            ps.setString(3, dto.getStrecode());
            ps.setString(4, dto.getSfilename());
            ps.setString(5, dto.getSadmdivcode());
            ps.setString(6, dto.getSstyear());
            ps.setString(7, dto.getSvtcode());
            ps.setString(8, dto.getSvoucherno());
            ps.setString(9, dto.getSvoucherflag());
            ps.setString(10, dto.getSattach());
            ps.setString(11, dto.getSreturnerrmsg());
            ps.setString(12, dto.getScreatdate());
            ps.setBigDecimal(13, dto.getNmoney());
            ps.setString(14, dto.getSstatus());
            ps.setString(15, dto.getSconfirusercode());
            ps.setString(16, dto.getSverifyusercode());
            ps.setString(17, dto.getSdemo());
            ps.setString(18, dto.getSstampid());
            ps.setString(19, dto.getSpackno());
            if (dto.getIcount()==null)
              ps.setNull(20, java.sql.Types.INTEGER);
           else
              ps.setInt(20, dto.getIcount().intValue());
            ps.setBigDecimal(21, dto.getNcheckmoney());
            if (dto.getIcheckcount()==null)
              ps.setNull(22, java.sql.Types.INTEGER);
           else
              ps.setInt(22, dto.getIcheckcount().intValue());
             ps.setString(23, dto.getSstampuser());
            ps.setString(24, dto.getScheckdate());
            ps.setString(25, dto.getScheckvouchertype());
            ps.setString(26, dto.getSpaybankcode());
            ps.setTimestamp(27, dto.getSrecvtime());
            ps.setString(28, dto.getShold1());
            ps.setString(29, dto.getShold2());
            ps.setString(30, dto.getShold3());
            ps.setString(31, dto.getShold4());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TvVoucherinfoSxDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TvVoucherinfoSxDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TvVoucherinfoSxDto)_dtos[i] ; 
  
               ps.setString(1, dto.getSdealno());
  
               ps.setString(2, dto.getSorgcode());
  
               ps.setString(3, dto.getStrecode());
  
               ps.setString(4, dto.getSfilename());
  
               ps.setString(5, dto.getSadmdivcode());
  
               ps.setString(6, dto.getSstyear());
  
               ps.setString(7, dto.getSvtcode());
  
               ps.setString(8, dto.getSvoucherno());
  
               ps.setString(9, dto.getSvoucherflag());
  
               ps.setString(10, dto.getSattach());
  
               ps.setString(11, dto.getSreturnerrmsg());
  
               ps.setString(12, dto.getScreatdate());
  
               ps.setBigDecimal(13, dto.getNmoney());
  
               ps.setString(14, dto.getSstatus());
  
               ps.setString(15, dto.getSconfirusercode());
  
               ps.setString(16, dto.getSverifyusercode());
  
               ps.setString(17, dto.getSdemo());
  
               ps.setString(18, dto.getSstampid());
  
               ps.setString(19, dto.getSpackno());
  
               if (dto.getIcount()==null)
                  ps.setNull(20, java.sql.Types.INTEGER);
               else
                  ps.setInt(20, dto.getIcount().intValue());
  
               ps.setBigDecimal(21, dto.getNcheckmoney());
  
               if (dto.getIcheckcount()==null)
                  ps.setNull(22, java.sql.Types.INTEGER);
               else
                  ps.setInt(22, dto.getIcheckcount().intValue());
   
               ps.setString(23, dto.getSstampuser());
  
               ps.setString(24, dto.getScheckdate());
  
               ps.setString(25, dto.getScheckvouchertype());
  
               ps.setString(26, dto.getSpaybankcode());
  
               ps.setTimestamp(27, dto.getSrecvtime());
  
               ps.setString(28, dto.getShold1());
  
               ps.setString(29, dto.getShold2());
  
               ps.setString(30, dto.getShold3());
  
               ps.setString(31, dto.getShold4());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvVoucherinfoSxPK pk = (TvVoucherinfoSxPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           ps.setString(1, pk.getSdealno());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvVoucherinfoSxPK pk = (TvVoucherinfoSxPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           ps.setString(1, pk.getSdealno());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TvVoucherinfoSxPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvVoucherinfoSxPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TvVoucherinfoSxPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*1+1, pk.getSdealno());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TvVoucherinfoSxDto[] dtos = new TvVoucherinfoSxDto[0];
		    dtos = (TvVoucherinfoSxDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TvVoucherinfoSxDto  dto = new  TvVoucherinfoSxDto ();
             //S_DEALNO
             str = rs.getString("S_DEALNO");
             if (str == null)
                dto.setSdealno(null);
             else
                dto.setSdealno(str.trim());

             //S_ORGCODE
             str = rs.getString("S_ORGCODE");
             if (str == null)
                dto.setSorgcode(null);
             else
                dto.setSorgcode(str.trim());

             //S_TRECODE
             str = rs.getString("S_TRECODE");
             if (str == null)
                dto.setStrecode(null);
             else
                dto.setStrecode(str.trim());

             //S_FILENAME
             str = rs.getString("S_FILENAME");
             if (str == null)
                dto.setSfilename(null);
             else
                dto.setSfilename(str.trim());

             //S_ADMDIVCODE
             str = rs.getString("S_ADMDIVCODE");
             if (str == null)
                dto.setSadmdivcode(null);
             else
                dto.setSadmdivcode(str.trim());

             //S_STYEAR
             str = rs.getString("S_STYEAR");
             if (str == null)
                dto.setSstyear(null);
             else
                dto.setSstyear(str.trim());

             //S_VTCODE
             str = rs.getString("S_VTCODE");
             if (str == null)
                dto.setSvtcode(null);
             else
                dto.setSvtcode(str.trim());

             //S_VOUCHERNO
             str = rs.getString("S_VOUCHERNO");
             if (str == null)
                dto.setSvoucherno(null);
             else
                dto.setSvoucherno(str.trim());

             //S_VOUCHERFLAG
             str = rs.getString("S_VOUCHERFLAG");
             if (str == null)
                dto.setSvoucherflag(null);
             else
                dto.setSvoucherflag(str.trim());

             //S_ATTACH
             str = rs.getString("S_ATTACH");
             if (str == null)
                dto.setSattach(null);
             else
                dto.setSattach(str.trim());

             //S_RETURNERRMSG
             str = rs.getString("S_RETURNERRMSG");
             if (str == null)
                dto.setSreturnerrmsg(null);
             else
                dto.setSreturnerrmsg(str.trim());

             //S_CREATDATE
             str = rs.getString("S_CREATDATE");
             if (str == null)
                dto.setScreatdate(null);
             else
                dto.setScreatdate(str.trim());

             //N_MONEY
           dto.setNmoney(rs.getBigDecimal("N_MONEY"));

             //S_STATUS
             str = rs.getString("S_STATUS");
             if (str == null)
                dto.setSstatus(null);
             else
                dto.setSstatus(str.trim());

             //S_CONFIRUSERCODE
             str = rs.getString("S_CONFIRUSERCODE");
             if (str == null)
                dto.setSconfirusercode(null);
             else
                dto.setSconfirusercode(str.trim());

             //S_VERIFYUSERCODE
             str = rs.getString("S_VERIFYUSERCODE");
             if (str == null)
                dto.setSverifyusercode(null);
             else
                dto.setSverifyusercode(str.trim());

             //S_DEMO
             str = rs.getString("S_DEMO");
             if (str == null)
                dto.setSdemo(null);
             else
                dto.setSdemo(str.trim());

             //S_STAMPID
             str = rs.getString("S_STAMPID");
             if (str == null)
                dto.setSstampid(null);
             else
                dto.setSstampid(str.trim());

             //S_PACKNO
             str = rs.getString("S_PACKNO");
             if (str == null)
                dto.setSpackno(null);
             else
                dto.setSpackno(str.trim());

             //I_COUNT
             str = rs.getString("I_COUNT");
             if(str!=null){
                dto.setIcount(new Integer(str));
             }

             //N_CHECKMONEY
           dto.setNcheckmoney(rs.getBigDecimal("N_CHECKMONEY"));

             //I_CHECKCOUNT
             str = rs.getString("I_CHECKCOUNT");
             if(str!=null){
                dto.setIcheckcount(new Integer(str));
             }

             //TS_SYSUPDATE
           dto.setTssysupdate(rs.getTimestamp("TS_SYSUPDATE"));

             //S_STAMPUSER
             str = rs.getString("S_STAMPUSER");
             if (str == null)
                dto.setSstampuser(null);
             else
                dto.setSstampuser(str.trim());

             //S_CHECKDATE
             str = rs.getString("S_CHECKDATE");
             if (str == null)
                dto.setScheckdate(null);
             else
                dto.setScheckdate(str.trim());

             //S_CHECKVOUCHERTYPE
             str = rs.getString("S_CHECKVOUCHERTYPE");
             if (str == null)
                dto.setScheckvouchertype(null);
             else
                dto.setScheckvouchertype(str.trim());

             //S_PAYBANKCODE
             str = rs.getString("S_PAYBANKCODE");
             if (str == null)
                dto.setSpaybankcode(null);
             else
                dto.setSpaybankcode(str.trim());

             //S_RECVTIME
           dto.setSrecvtime(rs.getTimestamp("S_RECVTIME"));

             //S_HOLD1
             str = rs.getString("S_HOLD1");
             if (str == null)
                dto.setShold1(null);
             else
                dto.setShold1(str.trim());

             //S_HOLD2
             str = rs.getString("S_HOLD2");
             if (str == null)
                dto.setShold2(null);
             else
                dto.setShold2(str.trim());

             //S_HOLD3
             str = rs.getString("S_HOLD3");
             if (str == null)
                dto.setShold3(null);
             else
                dto.setShold3(str.trim());

             //S_HOLD4
             str = rs.getString("S_HOLD4");
             if (str == null)
                dto.setShold4(null);
             else
                dto.setShold4(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TvVoucherinfoSxDto dto = (TvVoucherinfoSxDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_ORGCODE
            ps.setString(pos, dto.getSorgcode());
            pos++;

            //S_TRECODE
            ps.setString(pos, dto.getStrecode());
            pos++;

            //S_FILENAME
            ps.setString(pos, dto.getSfilename());
            pos++;

            //S_ADMDIVCODE
            ps.setString(pos, dto.getSadmdivcode());
            pos++;

            //S_STYEAR
            ps.setString(pos, dto.getSstyear());
            pos++;

            //S_VTCODE
            ps.setString(pos, dto.getSvtcode());
            pos++;

            //S_VOUCHERNO
            ps.setString(pos, dto.getSvoucherno());
            pos++;

            //S_VOUCHERFLAG
            ps.setString(pos, dto.getSvoucherflag());
            pos++;

            //S_ATTACH
            ps.setString(pos, dto.getSattach());
            pos++;

            //S_RETURNERRMSG
            ps.setString(pos, dto.getSreturnerrmsg());
            pos++;

            //S_CREATDATE
            ps.setString(pos, dto.getScreatdate());
            pos++;

            //N_MONEY
            ps.setBigDecimal(pos, dto.getNmoney());
            pos++;

            //S_STATUS
            ps.setString(pos, dto.getSstatus());
            pos++;

            //S_CONFIRUSERCODE
            ps.setString(pos, dto.getSconfirusercode());
            pos++;

            //S_VERIFYUSERCODE
            ps.setString(pos, dto.getSverifyusercode());
            pos++;

            //S_DEMO
            ps.setString(pos, dto.getSdemo());
            pos++;

            //S_STAMPID
            ps.setString(pos, dto.getSstampid());
            pos++;

            //S_PACKNO
            ps.setString(pos, dto.getSpackno());
            pos++;

            //I_COUNT
            if (dto.getIcount()==null)
                ps.setNull(pos, java.sql.Types.INTEGER);
            else
                ps.setInt(pos, dto.getIcount().intValue());
            pos++;

            //N_CHECKMONEY
            ps.setBigDecimal(pos, dto.getNcheckmoney());
            pos++;

            //I_CHECKCOUNT
            if (dto.getIcheckcount()==null)
                ps.setNull(pos, java.sql.Types.INTEGER);
            else
                ps.setInt(pos, dto.getIcheckcount().intValue());
            pos++;

            //TS_SYSUPDATE
            //S_STAMPUSER
            ps.setString(pos, dto.getSstampuser());
            pos++;

            //S_CHECKDATE
            ps.setString(pos, dto.getScheckdate());
            pos++;

            //S_CHECKVOUCHERTYPE
            ps.setString(pos, dto.getScheckvouchertype());
            pos++;

            //S_PAYBANKCODE
            ps.setString(pos, dto.getSpaybankcode());
            pos++;

            //S_RECVTIME
            ps.setTimestamp(pos, dto.getSrecvtime());
            pos++;

            //S_HOLD1
            ps.setString(pos, dto.getShold1());
            pos++;

            //S_HOLD2
            ps.setString(pos, dto.getShold2());
            pos++;

            //S_HOLD3
            ps.setString(pos, dto.getShold3());
            pos++;

            //S_HOLD4
            ps.setString(pos, dto.getShold4());
            pos++;


           //S_DEALNO
           ps.setString(pos, dto.getSdealno());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TvVoucherinfoSxDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TvVoucherinfoSxDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TvVoucherinfoSxDto)_dtos[i] ; 
                int pos = 1;
                //S_ORGCODE
                 ps.setString(pos, dto.getSorgcode());
                pos++;

                //S_TRECODE
                 ps.setString(pos, dto.getStrecode());
                pos++;

                //S_FILENAME
                 ps.setString(pos, dto.getSfilename());
                pos++;

                //S_ADMDIVCODE
                 ps.setString(pos, dto.getSadmdivcode());
                pos++;

                //S_STYEAR
                 ps.setString(pos, dto.getSstyear());
                pos++;

                //S_VTCODE
                 ps.setString(pos, dto.getSvtcode());
                pos++;

                //S_VOUCHERNO
                 ps.setString(pos, dto.getSvoucherno());
                pos++;

                //S_VOUCHERFLAG
                 ps.setString(pos, dto.getSvoucherflag());
                pos++;

                //S_ATTACH
                 ps.setString(pos, dto.getSattach());
                pos++;

                //S_RETURNERRMSG
                 ps.setString(pos, dto.getSreturnerrmsg());
                pos++;

                //S_CREATDATE
                 ps.setString(pos, dto.getScreatdate());
                pos++;

                //N_MONEY
                 ps.setBigDecimal(pos, dto.getNmoney());
                pos++;

                //S_STATUS
                 ps.setString(pos, dto.getSstatus());
                pos++;

                //S_CONFIRUSERCODE
                 ps.setString(pos, dto.getSconfirusercode());
                pos++;

                //S_VERIFYUSERCODE
                 ps.setString(pos, dto.getSverifyusercode());
                pos++;

                //S_DEMO
                 ps.setString(pos, dto.getSdemo());
                pos++;

                //S_STAMPID
                 ps.setString(pos, dto.getSstampid());
                pos++;

                //S_PACKNO
                 ps.setString(pos, dto.getSpackno());
                pos++;

                //I_COUNT
                 if (dto.getIcount()==null)
                   ps.setNull(pos, java.sql.Types.INTEGER);
                else
                   ps.setInt(pos, dto.getIcount().intValue());
                pos++ ;

                //N_CHECKMONEY
                 ps.setBigDecimal(pos, dto.getNcheckmoney());
                pos++;

                //I_CHECKCOUNT
                 if (dto.getIcheckcount()==null)
                   ps.setNull(pos, java.sql.Types.INTEGER);
                else
                   ps.setInt(pos, dto.getIcheckcount().intValue());
                pos++ ;

                //TS_SYSUPDATE
                 //S_STAMPUSER
                 ps.setString(pos, dto.getSstampuser());
                pos++;

                //S_CHECKDATE
                 ps.setString(pos, dto.getScheckdate());
                pos++;

                //S_CHECKVOUCHERTYPE
                 ps.setString(pos, dto.getScheckvouchertype());
                pos++;

                //S_PAYBANKCODE
                 ps.setString(pos, dto.getSpaybankcode());
                pos++;

                //S_RECVTIME
                 ps.setTimestamp(pos, dto.getSrecvtime());
                pos++;

                //S_HOLD1
                 ps.setString(pos, dto.getShold1());
                pos++;

                //S_HOLD2
                 ps.setString(pos, dto.getShold2());
                pos++;

                //S_HOLD3
                 ps.setString(pos, dto.getShold3());
                pos++;

                //S_HOLD4
                 ps.setString(pos, dto.getShold4());
                pos++;


               //S_DEALNO
               ps.setString(pos, dto.getSdealno());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TvVoucherinfoSxPK pk = (TvVoucherinfoSxPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setString(1, pk.getSdealno());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TvVoucherinfoSxPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvVoucherinfoSxPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TvVoucherinfoSxPK)(pks.get(i)) ; 
                ps.setString(1, pk.getSdealno());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                             		throw new SQLException("数据库表：TV_VOUCHERINFO_SX没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
