    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TvFreeDto ;
import com.cfcc.itfe.persistence.pk.TvFreePK ;


/**
 * <p>Title: DAO of table: TV_FREE</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:02 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TvFreeDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TV_FREE ("
          + "I_VOUSRLNO,S_TAXORGCODE,S_PACKNO,S_TRANO,D_BILLDATE"
          + ",S_ELECTROTAXVOUNO,S_FREEVOUNO,C_FREEPLUTYPE,S_FREEPLUSUBJECTCODE,C_FREEPLULEVEL"
          + ",S_FREEPLUSIGN,S_FREEPLUPTRECODE,F_FREEPLUAMT,C_FREEMIKIND,S_FREEMISUBJECT"
          + ",C_FREEMILEVEL,S_FREEMISIGN,S_FREEMIPTRE,F_FREEMIAMT,S_CORPCODE"
          + ",C_TRIMSIGN,S_STATUS,S_FILENAME,S_BOOKORGCODE,TS_SYSUPDATE"
          + ",D_ACCEPTDATE,D_AUDITDATE,S_CHANNELCODE,S_ADDWORD,TS_UPDATE"
        + ") VALUES ("
        + "DEFAULT ,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,CURRENT TIMESTAMP ,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TV_FREE.I_VOUSRLNO, TV_FREE.S_TAXORGCODE, TV_FREE.S_PACKNO, TV_FREE.S_TRANO, TV_FREE.D_BILLDATE, "
        + "TV_FREE.S_ELECTROTAXVOUNO, TV_FREE.S_FREEVOUNO, TV_FREE.C_FREEPLUTYPE, TV_FREE.S_FREEPLUSUBJECTCODE, TV_FREE.C_FREEPLULEVEL, "
        + "TV_FREE.S_FREEPLUSIGN, TV_FREE.S_FREEPLUPTRECODE, TV_FREE.F_FREEPLUAMT, TV_FREE.C_FREEMIKIND, TV_FREE.S_FREEMISUBJECT, "
        + "TV_FREE.C_FREEMILEVEL, TV_FREE.S_FREEMISIGN, TV_FREE.S_FREEMIPTRE, TV_FREE.F_FREEMIAMT, TV_FREE.S_CORPCODE, "
        + "TV_FREE.C_TRIMSIGN, TV_FREE.S_STATUS, TV_FREE.S_FILENAME, TV_FREE.S_BOOKORGCODE, TV_FREE.TS_SYSUPDATE, "
        + "TV_FREE.D_ACCEPTDATE, TV_FREE.D_AUDITDATE, TV_FREE.S_CHANNELCODE, TV_FREE.S_ADDWORD, TV_FREE.TS_UPDATE "
        + "FROM TV_FREE "
        +" WHERE " 
        + "I_VOUSRLNO = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TV_FREE.I_VOUSRLNO, TV_FREE.S_TAXORGCODE, TV_FREE.S_PACKNO, TV_FREE.S_TRANO, TV_FREE.D_BILLDATE, "
        + "TV_FREE.S_ELECTROTAXVOUNO, TV_FREE.S_FREEVOUNO, TV_FREE.C_FREEPLUTYPE, TV_FREE.S_FREEPLUSUBJECTCODE, TV_FREE.C_FREEPLULEVEL, "
        + "TV_FREE.S_FREEPLUSIGN, TV_FREE.S_FREEPLUPTRECODE, TV_FREE.F_FREEPLUAMT, TV_FREE.C_FREEMIKIND, TV_FREE.S_FREEMISUBJECT, "
        + "TV_FREE.C_FREEMILEVEL, TV_FREE.S_FREEMISIGN, TV_FREE.S_FREEMIPTRE, TV_FREE.F_FREEMIAMT, TV_FREE.S_CORPCODE, "
        + "TV_FREE.C_TRIMSIGN, TV_FREE.S_STATUS, TV_FREE.S_FILENAME, TV_FREE.S_BOOKORGCODE, TV_FREE.TS_SYSUPDATE, "
        + "TV_FREE.D_ACCEPTDATE, TV_FREE.D_AUDITDATE, TV_FREE.S_CHANNELCODE, TV_FREE.S_ADDWORD, TV_FREE.TS_UPDATE "
        + "FROM TV_FREE "
        +" WHERE " 
        + "I_VOUSRLNO = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TV_FREE.I_VOUSRLNO  , TV_FREE.S_TAXORGCODE  , TV_FREE.S_PACKNO  , TV_FREE.S_TRANO  , TV_FREE.D_BILLDATE "
        + " , TV_FREE.S_ELECTROTAXVOUNO  , TV_FREE.S_FREEVOUNO  , TV_FREE.C_FREEPLUTYPE  , TV_FREE.S_FREEPLUSUBJECTCODE  , TV_FREE.C_FREEPLULEVEL "
        + " , TV_FREE.S_FREEPLUSIGN  , TV_FREE.S_FREEPLUPTRECODE  , TV_FREE.F_FREEPLUAMT  , TV_FREE.C_FREEMIKIND  , TV_FREE.S_FREEMISUBJECT "
        + " , TV_FREE.C_FREEMILEVEL  , TV_FREE.S_FREEMISIGN  , TV_FREE.S_FREEMIPTRE  , TV_FREE.F_FREEMIAMT  , TV_FREE.S_CORPCODE "
        + " , TV_FREE.C_TRIMSIGN  , TV_FREE.S_STATUS  , TV_FREE.S_FILENAME  , TV_FREE.S_BOOKORGCODE  , TV_FREE.TS_SYSUPDATE "
        + " , TV_FREE.D_ACCEPTDATE  , TV_FREE.D_AUDITDATE  , TV_FREE.S_CHANNELCODE  , TV_FREE.S_ADDWORD  , TV_FREE.TS_UPDATE "
        + "FROM TV_FREE ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TV_FREE.I_VOUSRLNO, TV_FREE.S_TAXORGCODE, TV_FREE.S_PACKNO, TV_FREE.S_TRANO, TV_FREE.D_BILLDATE, "
        + "TV_FREE.S_ELECTROTAXVOUNO, TV_FREE.S_FREEVOUNO, TV_FREE.C_FREEPLUTYPE, TV_FREE.S_FREEPLUSUBJECTCODE, TV_FREE.C_FREEPLULEVEL, "
        + "TV_FREE.S_FREEPLUSIGN, TV_FREE.S_FREEPLUPTRECODE, TV_FREE.F_FREEPLUAMT, TV_FREE.C_FREEMIKIND, TV_FREE.S_FREEMISUBJECT, "
        + "TV_FREE.C_FREEMILEVEL, TV_FREE.S_FREEMISIGN, TV_FREE.S_FREEMIPTRE, TV_FREE.F_FREEMIAMT, TV_FREE.S_CORPCODE, "
        + "TV_FREE.C_TRIMSIGN, TV_FREE.S_STATUS, TV_FREE.S_FILENAME, TV_FREE.S_BOOKORGCODE, TV_FREE.TS_SYSUPDATE, "
        + "TV_FREE.D_ACCEPTDATE, TV_FREE.D_AUDITDATE, TV_FREE.S_CHANNELCODE, TV_FREE.S_ADDWORD, TV_FREE.TS_UPDATE "
        + "FROM TV_FREE " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "I_VOUSRLNO = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TV_FREE SET "
        + "S_TAXORGCODE =?,S_PACKNO =?,S_TRANO =?,D_BILLDATE =?,S_ELECTROTAXVOUNO =?, "
        + "S_FREEVOUNO =?,C_FREEPLUTYPE =?,S_FREEPLUSUBJECTCODE =?,C_FREEPLULEVEL =?,S_FREEPLUSIGN =?, "
        + "S_FREEPLUPTRECODE =?,F_FREEPLUAMT =?,C_FREEMIKIND =?,S_FREEMISUBJECT =?,C_FREEMILEVEL =?, "
        + "S_FREEMISIGN =?,S_FREEMIPTRE =?,F_FREEMIAMT =?,S_CORPCODE =?,C_TRIMSIGN =?, "
        + "S_STATUS =?,S_FILENAME =?,S_BOOKORGCODE =?,TS_SYSUPDATE =CURRENT TIMESTAMP,D_ACCEPTDATE =?, "
        + "D_AUDITDATE =?,S_CHANNELCODE =?,S_ADDWORD =?,TS_UPDATE =? "
        + "WHERE "
        + "I_VOUSRLNO = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TV_FREE SET "
        + "S_TAXORGCODE =?, S_PACKNO =?, S_TRANO =?, D_BILLDATE =?, S_ELECTROTAXVOUNO =?,  "
        + "S_FREEVOUNO =?, C_FREEPLUTYPE =?, S_FREEPLUSUBJECTCODE =?, C_FREEPLULEVEL =?, S_FREEPLUSIGN =?,  "
        + "S_FREEPLUPTRECODE =?, F_FREEPLUAMT =?, C_FREEMIKIND =?, S_FREEMISUBJECT =?, C_FREEMILEVEL =?,  "
        + "S_FREEMISIGN =?, S_FREEMIPTRE =?, F_FREEMIAMT =?, S_CORPCODE =?, C_TRIMSIGN =?,  "
        + "S_STATUS =?, S_FILENAME =?, S_BOOKORGCODE =?, TS_SYSUPDATE =CURRENT TIMESTAMP, D_ACCEPTDATE =?,  "
        + "D_AUDITDATE =?, S_CHANNELCODE =?, S_ADDWORD =?, TS_UPDATE =? "
        + "WHERE "
        + "I_VOUSRLNO = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TV_FREE " 
        + " WHERE "
        + "I_VOUSRLNO = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TvFreeDto dto = (TvFreeDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
           ps.setString(1, dto.getStaxorgcode());

          ps.setString(2, dto.getSpackno());

          ps.setString(3, dto.getStrano());

          ps.setDate(4, dto.getDbilldate());

          ps.setString(5, dto.getSelectrotaxvouno());

          ps.setString(6, dto.getSfreevouno());

          ps.setString(7, dto.getCfreeplutype());

          ps.setString(8, dto.getSfreeplusubjectcode());

          ps.setString(9, dto.getCfreeplulevel());

          ps.setString(10, dto.getSfreeplusign());

          ps.setString(11, dto.getSfreepluptrecode());

          ps.setBigDecimal(12, dto.getFfreepluamt());

          ps.setString(13, dto.getCfreemikind());

          ps.setString(14, dto.getSfreemisubject());

          ps.setString(15, dto.getCfreemilevel());

          ps.setString(16, dto.getSfreemisign());

          ps.setString(17, dto.getSfreemiptre());

          ps.setBigDecimal(18, dto.getFfreemiamt());

          ps.setString(19, dto.getScorpcode());

          ps.setString(20, dto.getCtrimsign());

          ps.setString(21, dto.getSstatus());

          ps.setString(22, dto.getSfilename());

          ps.setString(23, dto.getSbookorgcode());

           ps.setDate(24, dto.getDacceptdate());

          ps.setDate(25, dto.getDauditdate());

          ps.setString(26, dto.getSchannelcode());

          ps.setString(27, dto.getSaddword());

          ps.setTimestamp(28, dto.getTsupdate());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TvFreeDto dto = (TvFreeDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
             ps.setString(1, dto.getStaxorgcode());
            ps.setString(2, dto.getSpackno());
            ps.setString(3, dto.getStrano());
            ps.setDate(4, dto.getDbilldate());
            ps.setString(5, dto.getSelectrotaxvouno());
            ps.setString(6, dto.getSfreevouno());
            ps.setString(7, dto.getCfreeplutype());
            ps.setString(8, dto.getSfreeplusubjectcode());
            ps.setString(9, dto.getCfreeplulevel());
            ps.setString(10, dto.getSfreeplusign());
            ps.setString(11, dto.getSfreepluptrecode());
            ps.setBigDecimal(12, dto.getFfreepluamt());
            ps.setString(13, dto.getCfreemikind());
            ps.setString(14, dto.getSfreemisubject());
            ps.setString(15, dto.getCfreemilevel());
            ps.setString(16, dto.getSfreemisign());
            ps.setString(17, dto.getSfreemiptre());
            ps.setBigDecimal(18, dto.getFfreemiamt());
            ps.setString(19, dto.getScorpcode());
            ps.setString(20, dto.getCtrimsign());
            ps.setString(21, dto.getSstatus());
            ps.setString(22, dto.getSfilename());
            ps.setString(23, dto.getSbookorgcode());
             ps.setDate(24, dto.getDacceptdate());
            ps.setDate(25, dto.getDauditdate());
            ps.setString(26, dto.getSchannelcode());
            ps.setString(27, dto.getSaddword());
            ps.setTimestamp(28, dto.getTsupdate());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TvFreeDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TvFreeDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TvFreeDto)_dtos[i] ; 
   
               ps.setString(1, dto.getStaxorgcode());
  
               ps.setString(2, dto.getSpackno());
  
               ps.setString(3, dto.getStrano());
  
               ps.setDate(4, dto.getDbilldate());
  
               ps.setString(5, dto.getSelectrotaxvouno());
  
               ps.setString(6, dto.getSfreevouno());
  
               ps.setString(7, dto.getCfreeplutype());
  
               ps.setString(8, dto.getSfreeplusubjectcode());
  
               ps.setString(9, dto.getCfreeplulevel());
  
               ps.setString(10, dto.getSfreeplusign());
  
               ps.setString(11, dto.getSfreepluptrecode());
  
               ps.setBigDecimal(12, dto.getFfreepluamt());
  
               ps.setString(13, dto.getCfreemikind());
  
               ps.setString(14, dto.getSfreemisubject());
  
               ps.setString(15, dto.getCfreemilevel());
  
               ps.setString(16, dto.getSfreemisign());
  
               ps.setString(17, dto.getSfreemiptre());
  
               ps.setBigDecimal(18, dto.getFfreemiamt());
  
               ps.setString(19, dto.getScorpcode());
  
               ps.setString(20, dto.getCtrimsign());
  
               ps.setString(21, dto.getSstatus());
  
               ps.setString(22, dto.getSfilename());
  
               ps.setString(23, dto.getSbookorgcode());
   
               ps.setDate(24, dto.getDacceptdate());
  
               ps.setDate(25, dto.getDauditdate());
  
               ps.setString(26, dto.getSchannelcode());
  
               ps.setString(27, dto.getSaddword());
  
               ps.setTimestamp(28, dto.getTsupdate());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvFreePK pk = (TvFreePK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvFreePK pk = (TvFreePK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TvFreePK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvFreePK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TvFreePK)(pks.get(i)) ; 
                   if (pk.getIvousrlno()==null)
                      ps.setNull((i-iBegin)*1+1, java.sql.Types.BIGINT);
                   else
                      ps.setLong((i-iBegin)*1+1, pk.getIvousrlno().longValue());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TvFreeDto[] dtos = new TvFreeDto[0];
		    dtos = (TvFreeDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TvFreeDto  dto = new  TvFreeDto ();
             //I_VOUSRLNO
             str = rs.getString("I_VOUSRLNO");
             if(str!=null){
                dto.setIvousrlno(new Long(str));
             }

             //S_TAXORGCODE
             str = rs.getString("S_TAXORGCODE");
             if (str == null)
                dto.setStaxorgcode(null);
             else
                dto.setStaxorgcode(str.trim());

             //S_PACKNO
             str = rs.getString("S_PACKNO");
             if (str == null)
                dto.setSpackno(null);
             else
                dto.setSpackno(str.trim());

             //S_TRANO
             str = rs.getString("S_TRANO");
             if (str == null)
                dto.setStrano(null);
             else
                dto.setStrano(str.trim());

             //D_BILLDATE
           dto.setDbilldate(rs.getDate("D_BILLDATE"));

             //S_ELECTROTAXVOUNO
             str = rs.getString("S_ELECTROTAXVOUNO");
             if (str == null)
                dto.setSelectrotaxvouno(null);
             else
                dto.setSelectrotaxvouno(str.trim());

             //S_FREEVOUNO
             str = rs.getString("S_FREEVOUNO");
             if (str == null)
                dto.setSfreevouno(null);
             else
                dto.setSfreevouno(str.trim());

             //C_FREEPLUTYPE
             str = rs.getString("C_FREEPLUTYPE");
             if (str == null)
                dto.setCfreeplutype(null);
             else
                dto.setCfreeplutype(str.trim());

             //S_FREEPLUSUBJECTCODE
             str = rs.getString("S_FREEPLUSUBJECTCODE");
             if (str == null)
                dto.setSfreeplusubjectcode(null);
             else
                dto.setSfreeplusubjectcode(str.trim());

             //C_FREEPLULEVEL
             str = rs.getString("C_FREEPLULEVEL");
             if (str == null)
                dto.setCfreeplulevel(null);
             else
                dto.setCfreeplulevel(str.trim());

             //S_FREEPLUSIGN
             str = rs.getString("S_FREEPLUSIGN");
             if (str == null)
                dto.setSfreeplusign(null);
             else
                dto.setSfreeplusign(str.trim());

             //S_FREEPLUPTRECODE
             str = rs.getString("S_FREEPLUPTRECODE");
             if (str == null)
                dto.setSfreepluptrecode(null);
             else
                dto.setSfreepluptrecode(str.trim());

             //F_FREEPLUAMT
           dto.setFfreepluamt(rs.getBigDecimal("F_FREEPLUAMT"));

             //C_FREEMIKIND
             str = rs.getString("C_FREEMIKIND");
             if (str == null)
                dto.setCfreemikind(null);
             else
                dto.setCfreemikind(str.trim());

             //S_FREEMISUBJECT
             str = rs.getString("S_FREEMISUBJECT");
             if (str == null)
                dto.setSfreemisubject(null);
             else
                dto.setSfreemisubject(str.trim());

             //C_FREEMILEVEL
             str = rs.getString("C_FREEMILEVEL");
             if (str == null)
                dto.setCfreemilevel(null);
             else
                dto.setCfreemilevel(str.trim());

             //S_FREEMISIGN
             str = rs.getString("S_FREEMISIGN");
             if (str == null)
                dto.setSfreemisign(null);
             else
                dto.setSfreemisign(str.trim());

             //S_FREEMIPTRE
             str = rs.getString("S_FREEMIPTRE");
             if (str == null)
                dto.setSfreemiptre(null);
             else
                dto.setSfreemiptre(str.trim());

             //F_FREEMIAMT
           dto.setFfreemiamt(rs.getBigDecimal("F_FREEMIAMT"));

             //S_CORPCODE
             str = rs.getString("S_CORPCODE");
             if (str == null)
                dto.setScorpcode(null);
             else
                dto.setScorpcode(str.trim());

             //C_TRIMSIGN
             str = rs.getString("C_TRIMSIGN");
             if (str == null)
                dto.setCtrimsign(null);
             else
                dto.setCtrimsign(str.trim());

             //S_STATUS
             str = rs.getString("S_STATUS");
             if (str == null)
                dto.setSstatus(null);
             else
                dto.setSstatus(str.trim());

             //S_FILENAME
             str = rs.getString("S_FILENAME");
             if (str == null)
                dto.setSfilename(null);
             else
                dto.setSfilename(str.trim());

             //S_BOOKORGCODE
             str = rs.getString("S_BOOKORGCODE");
             if (str == null)
                dto.setSbookorgcode(null);
             else
                dto.setSbookorgcode(str.trim());

             //TS_SYSUPDATE
           dto.setTssysupdate(rs.getTimestamp("TS_SYSUPDATE"));

             //D_ACCEPTDATE
           dto.setDacceptdate(rs.getDate("D_ACCEPTDATE"));

             //D_AUDITDATE
           dto.setDauditdate(rs.getDate("D_AUDITDATE"));

             //S_CHANNELCODE
             str = rs.getString("S_CHANNELCODE");
             if (str == null)
                dto.setSchannelcode(null);
             else
                dto.setSchannelcode(str.trim());

             //S_ADDWORD
             str = rs.getString("S_ADDWORD");
             if (str == null)
                dto.setSaddword(null);
             else
                dto.setSaddword(str.trim());

             //TS_UPDATE
           dto.setTsupdate(rs.getTimestamp("TS_UPDATE"));



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TvFreeDto dto = (TvFreeDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_TAXORGCODE
            ps.setString(pos, dto.getStaxorgcode());
            pos++;

            //S_PACKNO
            ps.setString(pos, dto.getSpackno());
            pos++;

            //S_TRANO
            ps.setString(pos, dto.getStrano());
            pos++;

            //D_BILLDATE
            ps.setDate(pos, dto.getDbilldate());
            pos++;

            //S_ELECTROTAXVOUNO
            ps.setString(pos, dto.getSelectrotaxvouno());
            pos++;

            //S_FREEVOUNO
            ps.setString(pos, dto.getSfreevouno());
            pos++;

            //C_FREEPLUTYPE
            ps.setString(pos, dto.getCfreeplutype());
            pos++;

            //S_FREEPLUSUBJECTCODE
            ps.setString(pos, dto.getSfreeplusubjectcode());
            pos++;

            //C_FREEPLULEVEL
            ps.setString(pos, dto.getCfreeplulevel());
            pos++;

            //S_FREEPLUSIGN
            ps.setString(pos, dto.getSfreeplusign());
            pos++;

            //S_FREEPLUPTRECODE
            ps.setString(pos, dto.getSfreepluptrecode());
            pos++;

            //F_FREEPLUAMT
            ps.setBigDecimal(pos, dto.getFfreepluamt());
            pos++;

            //C_FREEMIKIND
            ps.setString(pos, dto.getCfreemikind());
            pos++;

            //S_FREEMISUBJECT
            ps.setString(pos, dto.getSfreemisubject());
            pos++;

            //C_FREEMILEVEL
            ps.setString(pos, dto.getCfreemilevel());
            pos++;

            //S_FREEMISIGN
            ps.setString(pos, dto.getSfreemisign());
            pos++;

            //S_FREEMIPTRE
            ps.setString(pos, dto.getSfreemiptre());
            pos++;

            //F_FREEMIAMT
            ps.setBigDecimal(pos, dto.getFfreemiamt());
            pos++;

            //S_CORPCODE
            ps.setString(pos, dto.getScorpcode());
            pos++;

            //C_TRIMSIGN
            ps.setString(pos, dto.getCtrimsign());
            pos++;

            //S_STATUS
            ps.setString(pos, dto.getSstatus());
            pos++;

            //S_FILENAME
            ps.setString(pos, dto.getSfilename());
            pos++;

            //S_BOOKORGCODE
            ps.setString(pos, dto.getSbookorgcode());
            pos++;

            //TS_SYSUPDATE
            //D_ACCEPTDATE
            ps.setDate(pos, dto.getDacceptdate());
            pos++;

            //D_AUDITDATE
            ps.setDate(pos, dto.getDauditdate());
            pos++;

            //S_CHANNELCODE
            ps.setString(pos, dto.getSchannelcode());
            pos++;

            //S_ADDWORD
            ps.setString(pos, dto.getSaddword());
            pos++;

            //TS_UPDATE
            ps.setTimestamp(pos, dto.getTsupdate());
            pos++;


           //I_VOUSRLNO
           ps.setLong(pos, dto.getIvousrlno().longValue());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TvFreeDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TvFreeDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TvFreeDto)_dtos[i] ; 
                int pos = 1;
                //S_TAXORGCODE
                 ps.setString(pos, dto.getStaxorgcode());
                pos++;

                //S_PACKNO
                 ps.setString(pos, dto.getSpackno());
                pos++;

                //S_TRANO
                 ps.setString(pos, dto.getStrano());
                pos++;

                //D_BILLDATE
                 ps.setDate(pos, dto.getDbilldate());
                pos++;

                //S_ELECTROTAXVOUNO
                 ps.setString(pos, dto.getSelectrotaxvouno());
                pos++;

                //S_FREEVOUNO
                 ps.setString(pos, dto.getSfreevouno());
                pos++;

                //C_FREEPLUTYPE
                 ps.setString(pos, dto.getCfreeplutype());
                pos++;

                //S_FREEPLUSUBJECTCODE
                 ps.setString(pos, dto.getSfreeplusubjectcode());
                pos++;

                //C_FREEPLULEVEL
                 ps.setString(pos, dto.getCfreeplulevel());
                pos++;

                //S_FREEPLUSIGN
                 ps.setString(pos, dto.getSfreeplusign());
                pos++;

                //S_FREEPLUPTRECODE
                 ps.setString(pos, dto.getSfreepluptrecode());
                pos++;

                //F_FREEPLUAMT
                 ps.setBigDecimal(pos, dto.getFfreepluamt());
                pos++;

                //C_FREEMIKIND
                 ps.setString(pos, dto.getCfreemikind());
                pos++;

                //S_FREEMISUBJECT
                 ps.setString(pos, dto.getSfreemisubject());
                pos++;

                //C_FREEMILEVEL
                 ps.setString(pos, dto.getCfreemilevel());
                pos++;

                //S_FREEMISIGN
                 ps.setString(pos, dto.getSfreemisign());
                pos++;

                //S_FREEMIPTRE
                 ps.setString(pos, dto.getSfreemiptre());
                pos++;

                //F_FREEMIAMT
                 ps.setBigDecimal(pos, dto.getFfreemiamt());
                pos++;

                //S_CORPCODE
                 ps.setString(pos, dto.getScorpcode());
                pos++;

                //C_TRIMSIGN
                 ps.setString(pos, dto.getCtrimsign());
                pos++;

                //S_STATUS
                 ps.setString(pos, dto.getSstatus());
                pos++;

                //S_FILENAME
                 ps.setString(pos, dto.getSfilename());
                pos++;

                //S_BOOKORGCODE
                 ps.setString(pos, dto.getSbookorgcode());
                pos++;

                //TS_SYSUPDATE
                 //D_ACCEPTDATE
                 ps.setDate(pos, dto.getDacceptdate());
                pos++;

                //D_AUDITDATE
                 ps.setDate(pos, dto.getDauditdate());
                pos++;

                //S_CHANNELCODE
                 ps.setString(pos, dto.getSchannelcode());
                pos++;

                //S_ADDWORD
                 ps.setString(pos, dto.getSaddword());
                pos++;

                //TS_UPDATE
                 ps.setTimestamp(pos, dto.getTsupdate());
                pos++;


               //I_VOUSRLNO
               ps.setLong(pos, dto.getIvousrlno().longValue());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TvFreePK pk = (TvFreePK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setLong(1, pk.getIvousrlno().longValue());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TvFreePK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvFreePK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TvFreePK)(pks.get(i)) ; 
                ps.setLong(1, pk.getIvousrlno().longValue());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                       		throw new SQLException("数据库表：TV_FREE没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
