    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TvPbcpayMainDto ;
import com.cfcc.itfe.persistence.pk.TvPbcpayMainPK ;


/**
 * <p>Title: DAO of table: TV_PBCPAY_MAIN</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:03 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TvPbcpayMainDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TV_PBCPAY_MAIN ("
          + "I_VOUSRLNO,S_TRANO,S_ORGCODE,S_TRECODE,S_BILLORG"
          + ",S_ENTRUSTDATE,S_PACKNO,S_PAYOUTVOUTYPENO,S_PAYMODE,S_VOUNO"
          + ",D_VOUCHER,S_PAYERACCT,S_PAYERNAME,S_PAYERADDR,S_PAYEEACCT"
          + ",S_PAYEENAME,S_PAYEEADDR,S_RCVBNKNO,S_PAYEEOPNBNKNO,S_ADDWORD"
          + ",C_BDGKIND,I_OFYEAR,S_BDGADMTYPE,F_AMT,S_TRASTATE"
          + ",S_DESCRIPTION,D_ACCT,C_TRIMFLAG,I_DETAILNIO,S_STATUS"
          + ",S_BIZTYPE,S_BACKFLAG,D_ORIENTRUSTDATE,S_ORITRANO,S_ORIVOUNO"
          + ",D_ORIVOUDATE,I_CHGNUM,S_INPUTERID,TS_SYSUPDATE"
        + ") VALUES ("
        + "DEFAULT ,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,0,?,CURRENT TIMESTAMP )";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TV_PBCPAY_MAIN.I_VOUSRLNO, TV_PBCPAY_MAIN.S_TRANO, TV_PBCPAY_MAIN.S_ORGCODE, TV_PBCPAY_MAIN.S_TRECODE, TV_PBCPAY_MAIN.S_BILLORG, "
        + "TV_PBCPAY_MAIN.S_ENTRUSTDATE, TV_PBCPAY_MAIN.S_PACKNO, TV_PBCPAY_MAIN.S_PAYOUTVOUTYPENO, TV_PBCPAY_MAIN.S_PAYMODE, TV_PBCPAY_MAIN.S_VOUNO, "
        + "TV_PBCPAY_MAIN.D_VOUCHER, TV_PBCPAY_MAIN.S_PAYERACCT, TV_PBCPAY_MAIN.S_PAYERNAME, TV_PBCPAY_MAIN.S_PAYERADDR, TV_PBCPAY_MAIN.S_PAYEEACCT, "
        + "TV_PBCPAY_MAIN.S_PAYEENAME, TV_PBCPAY_MAIN.S_PAYEEADDR, TV_PBCPAY_MAIN.S_RCVBNKNO, TV_PBCPAY_MAIN.S_PAYEEOPNBNKNO, TV_PBCPAY_MAIN.S_ADDWORD, "
        + "TV_PBCPAY_MAIN.C_BDGKIND, TV_PBCPAY_MAIN.I_OFYEAR, TV_PBCPAY_MAIN.S_BDGADMTYPE, TV_PBCPAY_MAIN.F_AMT, TV_PBCPAY_MAIN.S_TRASTATE, "
        + "TV_PBCPAY_MAIN.S_DESCRIPTION, TV_PBCPAY_MAIN.D_ACCT, TV_PBCPAY_MAIN.C_TRIMFLAG, TV_PBCPAY_MAIN.I_DETAILNIO, TV_PBCPAY_MAIN.S_STATUS, "
        + "TV_PBCPAY_MAIN.S_BIZTYPE, TV_PBCPAY_MAIN.S_BACKFLAG, TV_PBCPAY_MAIN.D_ORIENTRUSTDATE, TV_PBCPAY_MAIN.S_ORITRANO, TV_PBCPAY_MAIN.S_ORIVOUNO, "
        + "TV_PBCPAY_MAIN.D_ORIVOUDATE, TV_PBCPAY_MAIN.I_CHGNUM, TV_PBCPAY_MAIN.S_INPUTERID, TV_PBCPAY_MAIN.TS_SYSUPDATE "
        + "FROM TV_PBCPAY_MAIN "
        +" WHERE " 
        + "I_VOUSRLNO = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TV_PBCPAY_MAIN.I_VOUSRLNO, TV_PBCPAY_MAIN.S_TRANO, TV_PBCPAY_MAIN.S_ORGCODE, TV_PBCPAY_MAIN.S_TRECODE, TV_PBCPAY_MAIN.S_BILLORG, "
        + "TV_PBCPAY_MAIN.S_ENTRUSTDATE, TV_PBCPAY_MAIN.S_PACKNO, TV_PBCPAY_MAIN.S_PAYOUTVOUTYPENO, TV_PBCPAY_MAIN.S_PAYMODE, TV_PBCPAY_MAIN.S_VOUNO, "
        + "TV_PBCPAY_MAIN.D_VOUCHER, TV_PBCPAY_MAIN.S_PAYERACCT, TV_PBCPAY_MAIN.S_PAYERNAME, TV_PBCPAY_MAIN.S_PAYERADDR, TV_PBCPAY_MAIN.S_PAYEEACCT, "
        + "TV_PBCPAY_MAIN.S_PAYEENAME, TV_PBCPAY_MAIN.S_PAYEEADDR, TV_PBCPAY_MAIN.S_RCVBNKNO, TV_PBCPAY_MAIN.S_PAYEEOPNBNKNO, TV_PBCPAY_MAIN.S_ADDWORD, "
        + "TV_PBCPAY_MAIN.C_BDGKIND, TV_PBCPAY_MAIN.I_OFYEAR, TV_PBCPAY_MAIN.S_BDGADMTYPE, TV_PBCPAY_MAIN.F_AMT, TV_PBCPAY_MAIN.S_TRASTATE, "
        + "TV_PBCPAY_MAIN.S_DESCRIPTION, TV_PBCPAY_MAIN.D_ACCT, TV_PBCPAY_MAIN.C_TRIMFLAG, TV_PBCPAY_MAIN.I_DETAILNIO, TV_PBCPAY_MAIN.S_STATUS, "
        + "TV_PBCPAY_MAIN.S_BIZTYPE, TV_PBCPAY_MAIN.S_BACKFLAG, TV_PBCPAY_MAIN.D_ORIENTRUSTDATE, TV_PBCPAY_MAIN.S_ORITRANO, TV_PBCPAY_MAIN.S_ORIVOUNO, "
        + "TV_PBCPAY_MAIN.D_ORIVOUDATE, TV_PBCPAY_MAIN.I_CHGNUM, TV_PBCPAY_MAIN.S_INPUTERID, TV_PBCPAY_MAIN.TS_SYSUPDATE "
        + "FROM TV_PBCPAY_MAIN "
        +" WHERE " 
        + "I_VOUSRLNO = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TV_PBCPAY_MAIN.I_VOUSRLNO  , TV_PBCPAY_MAIN.S_TRANO  , TV_PBCPAY_MAIN.S_ORGCODE  , TV_PBCPAY_MAIN.S_TRECODE  , TV_PBCPAY_MAIN.S_BILLORG "
        + " , TV_PBCPAY_MAIN.S_ENTRUSTDATE  , TV_PBCPAY_MAIN.S_PACKNO  , TV_PBCPAY_MAIN.S_PAYOUTVOUTYPENO  , TV_PBCPAY_MAIN.S_PAYMODE  , TV_PBCPAY_MAIN.S_VOUNO "
        + " , TV_PBCPAY_MAIN.D_VOUCHER  , TV_PBCPAY_MAIN.S_PAYERACCT  , TV_PBCPAY_MAIN.S_PAYERNAME  , TV_PBCPAY_MAIN.S_PAYERADDR  , TV_PBCPAY_MAIN.S_PAYEEACCT "
        + " , TV_PBCPAY_MAIN.S_PAYEENAME  , TV_PBCPAY_MAIN.S_PAYEEADDR  , TV_PBCPAY_MAIN.S_RCVBNKNO  , TV_PBCPAY_MAIN.S_PAYEEOPNBNKNO  , TV_PBCPAY_MAIN.S_ADDWORD "
        + " , TV_PBCPAY_MAIN.C_BDGKIND  , TV_PBCPAY_MAIN.I_OFYEAR  , TV_PBCPAY_MAIN.S_BDGADMTYPE  , TV_PBCPAY_MAIN.F_AMT  , TV_PBCPAY_MAIN.S_TRASTATE "
        + " , TV_PBCPAY_MAIN.S_DESCRIPTION  , TV_PBCPAY_MAIN.D_ACCT  , TV_PBCPAY_MAIN.C_TRIMFLAG  , TV_PBCPAY_MAIN.I_DETAILNIO  , TV_PBCPAY_MAIN.S_STATUS "
        + " , TV_PBCPAY_MAIN.S_BIZTYPE  , TV_PBCPAY_MAIN.S_BACKFLAG  , TV_PBCPAY_MAIN.D_ORIENTRUSTDATE  , TV_PBCPAY_MAIN.S_ORITRANO  , TV_PBCPAY_MAIN.S_ORIVOUNO "
        + " , TV_PBCPAY_MAIN.D_ORIVOUDATE  , TV_PBCPAY_MAIN.I_CHGNUM  , TV_PBCPAY_MAIN.S_INPUTERID  , TV_PBCPAY_MAIN.TS_SYSUPDATE "
        + "FROM TV_PBCPAY_MAIN ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TV_PBCPAY_MAIN.I_VOUSRLNO, TV_PBCPAY_MAIN.S_TRANO, TV_PBCPAY_MAIN.S_ORGCODE, TV_PBCPAY_MAIN.S_TRECODE, TV_PBCPAY_MAIN.S_BILLORG, "
        + "TV_PBCPAY_MAIN.S_ENTRUSTDATE, TV_PBCPAY_MAIN.S_PACKNO, TV_PBCPAY_MAIN.S_PAYOUTVOUTYPENO, TV_PBCPAY_MAIN.S_PAYMODE, TV_PBCPAY_MAIN.S_VOUNO, "
        + "TV_PBCPAY_MAIN.D_VOUCHER, TV_PBCPAY_MAIN.S_PAYERACCT, TV_PBCPAY_MAIN.S_PAYERNAME, TV_PBCPAY_MAIN.S_PAYERADDR, TV_PBCPAY_MAIN.S_PAYEEACCT, "
        + "TV_PBCPAY_MAIN.S_PAYEENAME, TV_PBCPAY_MAIN.S_PAYEEADDR, TV_PBCPAY_MAIN.S_RCVBNKNO, TV_PBCPAY_MAIN.S_PAYEEOPNBNKNO, TV_PBCPAY_MAIN.S_ADDWORD, "
        + "TV_PBCPAY_MAIN.C_BDGKIND, TV_PBCPAY_MAIN.I_OFYEAR, TV_PBCPAY_MAIN.S_BDGADMTYPE, TV_PBCPAY_MAIN.F_AMT, TV_PBCPAY_MAIN.S_TRASTATE, "
        + "TV_PBCPAY_MAIN.S_DESCRIPTION, TV_PBCPAY_MAIN.D_ACCT, TV_PBCPAY_MAIN.C_TRIMFLAG, TV_PBCPAY_MAIN.I_DETAILNIO, TV_PBCPAY_MAIN.S_STATUS, "
        + "TV_PBCPAY_MAIN.S_BIZTYPE, TV_PBCPAY_MAIN.S_BACKFLAG, TV_PBCPAY_MAIN.D_ORIENTRUSTDATE, TV_PBCPAY_MAIN.S_ORITRANO, TV_PBCPAY_MAIN.S_ORIVOUNO, "
        + "TV_PBCPAY_MAIN.D_ORIVOUDATE, TV_PBCPAY_MAIN.I_CHGNUM, TV_PBCPAY_MAIN.S_INPUTERID, TV_PBCPAY_MAIN.TS_SYSUPDATE "
        + "FROM TV_PBCPAY_MAIN " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "I_VOUSRLNO = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TV_PBCPAY_MAIN SET "
        + "S_TRANO =?,S_ORGCODE =?,S_TRECODE =?,S_BILLORG =?,S_ENTRUSTDATE =?, "
        + "S_PACKNO =?,S_PAYOUTVOUTYPENO =?,S_PAYMODE =?,S_VOUNO =?,D_VOUCHER =?, "
        + "S_PAYERACCT =?,S_PAYERNAME =?,S_PAYERADDR =?,S_PAYEEACCT =?,S_PAYEENAME =?, "
        + "S_PAYEEADDR =?,S_RCVBNKNO =?,S_PAYEEOPNBNKNO =?,S_ADDWORD =?,C_BDGKIND =?, "
        + "I_OFYEAR =?,S_BDGADMTYPE =?,F_AMT =?,S_TRASTATE =?,S_DESCRIPTION =?, "
        + "D_ACCT =?,C_TRIMFLAG =?,I_DETAILNIO =?,S_STATUS =?,S_BIZTYPE =?, "
        + "S_BACKFLAG =?,D_ORIENTRUSTDATE =?,S_ORITRANO =?,S_ORIVOUNO =?,D_ORIVOUDATE =?, "
        + "I_CHGNUM =I_CHGNUM+1,S_INPUTERID =?,TS_SYSUPDATE =CURRENT TIMESTAMP "
        + "WHERE "
        + "I_VOUSRLNO = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TV_PBCPAY_MAIN SET "
        + "S_TRANO =?, S_ORGCODE =?, S_TRECODE =?, S_BILLORG =?, S_ENTRUSTDATE =?,  "
        + "S_PACKNO =?, S_PAYOUTVOUTYPENO =?, S_PAYMODE =?, S_VOUNO =?, D_VOUCHER =?,  "
        + "S_PAYERACCT =?, S_PAYERNAME =?, S_PAYERADDR =?, S_PAYEEACCT =?, S_PAYEENAME =?,  "
        + "S_PAYEEADDR =?, S_RCVBNKNO =?, S_PAYEEOPNBNKNO =?, S_ADDWORD =?, C_BDGKIND =?,  "
        + "I_OFYEAR =?, S_BDGADMTYPE =?, F_AMT =?, S_TRASTATE =?, S_DESCRIPTION =?,  "
        + "D_ACCT =?, C_TRIMFLAG =?, I_DETAILNIO =?, S_STATUS =?, S_BIZTYPE =?,  "
        + "S_BACKFLAG =?, D_ORIENTRUSTDATE =?, S_ORITRANO =?, S_ORIVOUNO =?, D_ORIVOUDATE =?,  "
        + "I_CHGNUM =I_CHGNUM+1, S_INPUTERID =?, TS_SYSUPDATE =CURRENT TIMESTAMP "
        + "WHERE "
        + "I_VOUSRLNO = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TV_PBCPAY_MAIN " 
        + " WHERE "
        + "I_VOUSRLNO = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TvPbcpayMainDto dto = (TvPbcpayMainDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
           ps.setString(1, dto.getStrano());

          ps.setString(2, dto.getSorgcode());

          ps.setString(3, dto.getStrecode());

          ps.setString(4, dto.getSbillorg());

          ps.setString(5, dto.getSentrustdate());

          ps.setString(6, dto.getSpackno());

          ps.setString(7, dto.getSpayoutvoutypeno());

          ps.setString(8, dto.getSpaymode());

          ps.setString(9, dto.getSvouno());

          ps.setString(10, dto.getDvoucher());

          ps.setString(11, dto.getSpayeracct());

          ps.setString(12, dto.getSpayername());

          ps.setString(13, dto.getSpayeraddr());

          ps.setString(14, dto.getSpayeeacct());

          ps.setString(15, dto.getSpayeename());

          ps.setString(16, dto.getSpayeeaddr());

          ps.setString(17, dto.getSrcvbnkno());

          ps.setString(18, dto.getSpayeeopnbnkno());

          ps.setString(19, dto.getSaddword());

          ps.setString(20, dto.getCbdgkind());

          if (dto.getIofyear()==null)
            ps.setNull(21, java.sql.Types.INTEGER);
         else
            ps.setInt(21, dto.getIofyear().intValue());
          ps.setString(22, dto.getSbdgadmtype());

          ps.setBigDecimal(23, dto.getFamt());

          ps.setString(24, dto.getStrastate());

          ps.setString(25, dto.getSdescription());

          ps.setString(26, dto.getDacct());

          ps.setString(27, dto.getCtrimflag());

          if (dto.getIdetailnio()==null)
            ps.setNull(28, java.sql.Types.INTEGER);
         else
            ps.setInt(28, dto.getIdetailnio().intValue());
          ps.setString(29, dto.getSstatus());

          ps.setString(30, dto.getSbiztype());

          ps.setString(31, dto.getSbackflag());

          ps.setString(32, dto.getDorientrustdate());

          ps.setString(33, dto.getSoritrano());

          ps.setString(34, dto.getSorivouno());

          ps.setString(35, dto.getDorivoudate());

           ps.setString(36, dto.getSinputerid());

          ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TvPbcpayMainDto dto = (TvPbcpayMainDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
             ps.setString(1, dto.getStrano());
            ps.setString(2, dto.getSorgcode());
            ps.setString(3, dto.getStrecode());
            ps.setString(4, dto.getSbillorg());
            ps.setString(5, dto.getSentrustdate());
            ps.setString(6, dto.getSpackno());
            ps.setString(7, dto.getSpayoutvoutypeno());
            ps.setString(8, dto.getSpaymode());
            ps.setString(9, dto.getSvouno());
            ps.setString(10, dto.getDvoucher());
            ps.setString(11, dto.getSpayeracct());
            ps.setString(12, dto.getSpayername());
            ps.setString(13, dto.getSpayeraddr());
            ps.setString(14, dto.getSpayeeacct());
            ps.setString(15, dto.getSpayeename());
            ps.setString(16, dto.getSpayeeaddr());
            ps.setString(17, dto.getSrcvbnkno());
            ps.setString(18, dto.getSpayeeopnbnkno());
            ps.setString(19, dto.getSaddword());
            ps.setString(20, dto.getCbdgkind());
            if (dto.getIofyear()==null)
              ps.setNull(21, java.sql.Types.INTEGER);
           else
              ps.setInt(21, dto.getIofyear().intValue());
            ps.setString(22, dto.getSbdgadmtype());
            ps.setBigDecimal(23, dto.getFamt());
            ps.setString(24, dto.getStrastate());
            ps.setString(25, dto.getSdescription());
            ps.setString(26, dto.getDacct());
            ps.setString(27, dto.getCtrimflag());
            if (dto.getIdetailnio()==null)
              ps.setNull(28, java.sql.Types.INTEGER);
           else
              ps.setInt(28, dto.getIdetailnio().intValue());
            ps.setString(29, dto.getSstatus());
            ps.setString(30, dto.getSbiztype());
            ps.setString(31, dto.getSbackflag());
            ps.setString(32, dto.getDorientrustdate());
            ps.setString(33, dto.getSoritrano());
            ps.setString(34, dto.getSorivouno());
            ps.setString(35, dto.getDorivoudate());
             ps.setString(36, dto.getSinputerid());
            rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TvPbcpayMainDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TvPbcpayMainDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TvPbcpayMainDto)_dtos[i] ; 
   
               ps.setString(1, dto.getStrano());
  
               ps.setString(2, dto.getSorgcode());
  
               ps.setString(3, dto.getStrecode());
  
               ps.setString(4, dto.getSbillorg());
  
               ps.setString(5, dto.getSentrustdate());
  
               ps.setString(6, dto.getSpackno());
  
               ps.setString(7, dto.getSpayoutvoutypeno());
  
               ps.setString(8, dto.getSpaymode());
  
               ps.setString(9, dto.getSvouno());
  
               ps.setString(10, dto.getDvoucher());
  
               ps.setString(11, dto.getSpayeracct());
  
               ps.setString(12, dto.getSpayername());
  
               ps.setString(13, dto.getSpayeraddr());
  
               ps.setString(14, dto.getSpayeeacct());
  
               ps.setString(15, dto.getSpayeename());
  
               ps.setString(16, dto.getSpayeeaddr());
  
               ps.setString(17, dto.getSrcvbnkno());
  
               ps.setString(18, dto.getSpayeeopnbnkno());
  
               ps.setString(19, dto.getSaddword());
  
               ps.setString(20, dto.getCbdgkind());
  
               if (dto.getIofyear()==null)
                  ps.setNull(21, java.sql.Types.INTEGER);
               else
                  ps.setInt(21, dto.getIofyear().intValue());
  
               ps.setString(22, dto.getSbdgadmtype());
  
               ps.setBigDecimal(23, dto.getFamt());
  
               ps.setString(24, dto.getStrastate());
  
               ps.setString(25, dto.getSdescription());
  
               ps.setString(26, dto.getDacct());
  
               ps.setString(27, dto.getCtrimflag());
  
               if (dto.getIdetailnio()==null)
                  ps.setNull(28, java.sql.Types.INTEGER);
               else
                  ps.setInt(28, dto.getIdetailnio().intValue());
  
               ps.setString(29, dto.getSstatus());
  
               ps.setString(30, dto.getSbiztype());
  
               ps.setString(31, dto.getSbackflag());
  
               ps.setString(32, dto.getDorientrustdate());
  
               ps.setString(33, dto.getSoritrano());
  
               ps.setString(34, dto.getSorivouno());
  
               ps.setString(35, dto.getDorivoudate());
   
               ps.setString(36, dto.getSinputerid());
                ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvPbcpayMainPK pk = (TvPbcpayMainPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvPbcpayMainPK pk = (TvPbcpayMainPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TvPbcpayMainPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvPbcpayMainPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TvPbcpayMainPK)(pks.get(i)) ; 
                   if (pk.getIvousrlno()==null)
                      ps.setNull((i-iBegin)*1+1, java.sql.Types.BIGINT);
                   else
                      ps.setLong((i-iBegin)*1+1, pk.getIvousrlno().longValue());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TvPbcpayMainDto[] dtos = new TvPbcpayMainDto[0];
		    dtos = (TvPbcpayMainDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TvPbcpayMainDto  dto = new  TvPbcpayMainDto ();
             //I_VOUSRLNO
             str = rs.getString("I_VOUSRLNO");
             if(str!=null){
                dto.setIvousrlno(new Long(str));
             }

             //S_TRANO
             str = rs.getString("S_TRANO");
             if (str == null)
                dto.setStrano(null);
             else
                dto.setStrano(str.trim());

             //S_ORGCODE
             str = rs.getString("S_ORGCODE");
             if (str == null)
                dto.setSorgcode(null);
             else
                dto.setSorgcode(str.trim());

             //S_TRECODE
             str = rs.getString("S_TRECODE");
             if (str == null)
                dto.setStrecode(null);
             else
                dto.setStrecode(str.trim());

             //S_BILLORG
             str = rs.getString("S_BILLORG");
             if (str == null)
                dto.setSbillorg(null);
             else
                dto.setSbillorg(str.trim());

             //S_ENTRUSTDATE
             str = rs.getString("S_ENTRUSTDATE");
             if (str == null)
                dto.setSentrustdate(null);
             else
                dto.setSentrustdate(str.trim());

             //S_PACKNO
             str = rs.getString("S_PACKNO");
             if (str == null)
                dto.setSpackno(null);
             else
                dto.setSpackno(str.trim());

             //S_PAYOUTVOUTYPENO
             str = rs.getString("S_PAYOUTVOUTYPENO");
             if (str == null)
                dto.setSpayoutvoutypeno(null);
             else
                dto.setSpayoutvoutypeno(str.trim());

             //S_PAYMODE
             str = rs.getString("S_PAYMODE");
             if (str == null)
                dto.setSpaymode(null);
             else
                dto.setSpaymode(str.trim());

             //S_VOUNO
             str = rs.getString("S_VOUNO");
             if (str == null)
                dto.setSvouno(null);
             else
                dto.setSvouno(str.trim());

             //D_VOUCHER
             str = rs.getString("D_VOUCHER");
             if (str == null)
                dto.setDvoucher(null);
             else
                dto.setDvoucher(str.trim());

             //S_PAYERACCT
             str = rs.getString("S_PAYERACCT");
             if (str == null)
                dto.setSpayeracct(null);
             else
                dto.setSpayeracct(str.trim());

             //S_PAYERNAME
             str = rs.getString("S_PAYERNAME");
             if (str == null)
                dto.setSpayername(null);
             else
                dto.setSpayername(str.trim());

             //S_PAYERADDR
             str = rs.getString("S_PAYERADDR");
             if (str == null)
                dto.setSpayeraddr(null);
             else
                dto.setSpayeraddr(str.trim());

             //S_PAYEEACCT
             str = rs.getString("S_PAYEEACCT");
             if (str == null)
                dto.setSpayeeacct(null);
             else
                dto.setSpayeeacct(str.trim());

             //S_PAYEENAME
             str = rs.getString("S_PAYEENAME");
             if (str == null)
                dto.setSpayeename(null);
             else
                dto.setSpayeename(str.trim());

             //S_PAYEEADDR
             str = rs.getString("S_PAYEEADDR");
             if (str == null)
                dto.setSpayeeaddr(null);
             else
                dto.setSpayeeaddr(str.trim());

             //S_RCVBNKNO
             str = rs.getString("S_RCVBNKNO");
             if (str == null)
                dto.setSrcvbnkno(null);
             else
                dto.setSrcvbnkno(str.trim());

             //S_PAYEEOPNBNKNO
             str = rs.getString("S_PAYEEOPNBNKNO");
             if (str == null)
                dto.setSpayeeopnbnkno(null);
             else
                dto.setSpayeeopnbnkno(str.trim());

             //S_ADDWORD
             str = rs.getString("S_ADDWORD");
             if (str == null)
                dto.setSaddword(null);
             else
                dto.setSaddword(str.trim());

             //C_BDGKIND
             str = rs.getString("C_BDGKIND");
             if (str == null)
                dto.setCbdgkind(null);
             else
                dto.setCbdgkind(str.trim());

             //I_OFYEAR
             str = rs.getString("I_OFYEAR");
             if(str!=null){
                dto.setIofyear(new Integer(str));
             }

             //S_BDGADMTYPE
             str = rs.getString("S_BDGADMTYPE");
             if (str == null)
                dto.setSbdgadmtype(null);
             else
                dto.setSbdgadmtype(str.trim());

             //F_AMT
           dto.setFamt(rs.getBigDecimal("F_AMT"));

             //S_TRASTATE
             str = rs.getString("S_TRASTATE");
             if (str == null)
                dto.setStrastate(null);
             else
                dto.setStrastate(str.trim());

             //S_DESCRIPTION
             str = rs.getString("S_DESCRIPTION");
             if (str == null)
                dto.setSdescription(null);
             else
                dto.setSdescription(str.trim());

             //D_ACCT
             str = rs.getString("D_ACCT");
             if (str == null)
                dto.setDacct(null);
             else
                dto.setDacct(str.trim());

             //C_TRIMFLAG
             str = rs.getString("C_TRIMFLAG");
             if (str == null)
                dto.setCtrimflag(null);
             else
                dto.setCtrimflag(str.trim());

             //I_DETAILNIO
             str = rs.getString("I_DETAILNIO");
             if(str!=null){
                dto.setIdetailnio(new Integer(str));
             }

             //S_STATUS
             str = rs.getString("S_STATUS");
             if (str == null)
                dto.setSstatus(null);
             else
                dto.setSstatus(str.trim());

             //S_BIZTYPE
             str = rs.getString("S_BIZTYPE");
             if (str == null)
                dto.setSbiztype(null);
             else
                dto.setSbiztype(str.trim());

             //S_BACKFLAG
             str = rs.getString("S_BACKFLAG");
             if (str == null)
                dto.setSbackflag(null);
             else
                dto.setSbackflag(str.trim());

             //D_ORIENTRUSTDATE
             str = rs.getString("D_ORIENTRUSTDATE");
             if (str == null)
                dto.setDorientrustdate(null);
             else
                dto.setDorientrustdate(str.trim());

             //S_ORITRANO
             str = rs.getString("S_ORITRANO");
             if (str == null)
                dto.setSoritrano(null);
             else
                dto.setSoritrano(str.trim());

             //S_ORIVOUNO
             str = rs.getString("S_ORIVOUNO");
             if (str == null)
                dto.setSorivouno(null);
             else
                dto.setSorivouno(str.trim());

             //D_ORIVOUDATE
             str = rs.getString("D_ORIVOUDATE");
             if (str == null)
                dto.setDorivoudate(null);
             else
                dto.setDorivoudate(str.trim());

             //I_CHGNUM
             str = rs.getString("I_CHGNUM");
             if(str!=null){
                dto.setIchgnum(new Integer(str));
             }

             //S_INPUTERID
             str = rs.getString("S_INPUTERID");
             if (str == null)
                dto.setSinputerid(null);
             else
                dto.setSinputerid(str.trim());

             //TS_SYSUPDATE
           dto.setTssysupdate(rs.getTimestamp("TS_SYSUPDATE"));



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TvPbcpayMainDto dto = (TvPbcpayMainDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_TRANO
            ps.setString(pos, dto.getStrano());
            pos++;

            //S_ORGCODE
            ps.setString(pos, dto.getSorgcode());
            pos++;

            //S_TRECODE
            ps.setString(pos, dto.getStrecode());
            pos++;

            //S_BILLORG
            ps.setString(pos, dto.getSbillorg());
            pos++;

            //S_ENTRUSTDATE
            ps.setString(pos, dto.getSentrustdate());
            pos++;

            //S_PACKNO
            ps.setString(pos, dto.getSpackno());
            pos++;

            //S_PAYOUTVOUTYPENO
            ps.setString(pos, dto.getSpayoutvoutypeno());
            pos++;

            //S_PAYMODE
            ps.setString(pos, dto.getSpaymode());
            pos++;

            //S_VOUNO
            ps.setString(pos, dto.getSvouno());
            pos++;

            //D_VOUCHER
            ps.setString(pos, dto.getDvoucher());
            pos++;

            //S_PAYERACCT
            ps.setString(pos, dto.getSpayeracct());
            pos++;

            //S_PAYERNAME
            ps.setString(pos, dto.getSpayername());
            pos++;

            //S_PAYERADDR
            ps.setString(pos, dto.getSpayeraddr());
            pos++;

            //S_PAYEEACCT
            ps.setString(pos, dto.getSpayeeacct());
            pos++;

            //S_PAYEENAME
            ps.setString(pos, dto.getSpayeename());
            pos++;

            //S_PAYEEADDR
            ps.setString(pos, dto.getSpayeeaddr());
            pos++;

            //S_RCVBNKNO
            ps.setString(pos, dto.getSrcvbnkno());
            pos++;

            //S_PAYEEOPNBNKNO
            ps.setString(pos, dto.getSpayeeopnbnkno());
            pos++;

            //S_ADDWORD
            ps.setString(pos, dto.getSaddword());
            pos++;

            //C_BDGKIND
            ps.setString(pos, dto.getCbdgkind());
            pos++;

            //I_OFYEAR
            if (dto.getIofyear()==null)
                ps.setNull(pos, java.sql.Types.INTEGER);
            else
                ps.setInt(pos, dto.getIofyear().intValue());
            pos++;

            //S_BDGADMTYPE
            ps.setString(pos, dto.getSbdgadmtype());
            pos++;

            //F_AMT
            ps.setBigDecimal(pos, dto.getFamt());
            pos++;

            //S_TRASTATE
            ps.setString(pos, dto.getStrastate());
            pos++;

            //S_DESCRIPTION
            ps.setString(pos, dto.getSdescription());
            pos++;

            //D_ACCT
            ps.setString(pos, dto.getDacct());
            pos++;

            //C_TRIMFLAG
            ps.setString(pos, dto.getCtrimflag());
            pos++;

            //I_DETAILNIO
            if (dto.getIdetailnio()==null)
                ps.setNull(pos, java.sql.Types.INTEGER);
            else
                ps.setInt(pos, dto.getIdetailnio().intValue());
            pos++;

            //S_STATUS
            ps.setString(pos, dto.getSstatus());
            pos++;

            //S_BIZTYPE
            ps.setString(pos, dto.getSbiztype());
            pos++;

            //S_BACKFLAG
            ps.setString(pos, dto.getSbackflag());
            pos++;

            //D_ORIENTRUSTDATE
            ps.setString(pos, dto.getDorientrustdate());
            pos++;

            //S_ORITRANO
            ps.setString(pos, dto.getSoritrano());
            pos++;

            //S_ORIVOUNO
            ps.setString(pos, dto.getSorivouno());
            pos++;

            //D_ORIVOUDATE
            ps.setString(pos, dto.getDorivoudate());
            pos++;

            //I_CHGNUM
            //S_INPUTERID
            ps.setString(pos, dto.getSinputerid());
            pos++;

            //TS_SYSUPDATE

           //I_VOUSRLNO
           ps.setLong(pos, dto.getIvousrlno().longValue());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TvPbcpayMainDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TvPbcpayMainDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TvPbcpayMainDto)_dtos[i] ; 
                int pos = 1;
                //S_TRANO
                 ps.setString(pos, dto.getStrano());
                pos++;

                //S_ORGCODE
                 ps.setString(pos, dto.getSorgcode());
                pos++;

                //S_TRECODE
                 ps.setString(pos, dto.getStrecode());
                pos++;

                //S_BILLORG
                 ps.setString(pos, dto.getSbillorg());
                pos++;

                //S_ENTRUSTDATE
                 ps.setString(pos, dto.getSentrustdate());
                pos++;

                //S_PACKNO
                 ps.setString(pos, dto.getSpackno());
                pos++;

                //S_PAYOUTVOUTYPENO
                 ps.setString(pos, dto.getSpayoutvoutypeno());
                pos++;

                //S_PAYMODE
                 ps.setString(pos, dto.getSpaymode());
                pos++;

                //S_VOUNO
                 ps.setString(pos, dto.getSvouno());
                pos++;

                //D_VOUCHER
                 ps.setString(pos, dto.getDvoucher());
                pos++;

                //S_PAYERACCT
                 ps.setString(pos, dto.getSpayeracct());
                pos++;

                //S_PAYERNAME
                 ps.setString(pos, dto.getSpayername());
                pos++;

                //S_PAYERADDR
                 ps.setString(pos, dto.getSpayeraddr());
                pos++;

                //S_PAYEEACCT
                 ps.setString(pos, dto.getSpayeeacct());
                pos++;

                //S_PAYEENAME
                 ps.setString(pos, dto.getSpayeename());
                pos++;

                //S_PAYEEADDR
                 ps.setString(pos, dto.getSpayeeaddr());
                pos++;

                //S_RCVBNKNO
                 ps.setString(pos, dto.getSrcvbnkno());
                pos++;

                //S_PAYEEOPNBNKNO
                 ps.setString(pos, dto.getSpayeeopnbnkno());
                pos++;

                //S_ADDWORD
                 ps.setString(pos, dto.getSaddword());
                pos++;

                //C_BDGKIND
                 ps.setString(pos, dto.getCbdgkind());
                pos++;

                //I_OFYEAR
                 if (dto.getIofyear()==null)
                   ps.setNull(pos, java.sql.Types.INTEGER);
                else
                   ps.setInt(pos, dto.getIofyear().intValue());
                pos++ ;

                //S_BDGADMTYPE
                 ps.setString(pos, dto.getSbdgadmtype());
                pos++;

                //F_AMT
                 ps.setBigDecimal(pos, dto.getFamt());
                pos++;

                //S_TRASTATE
                 ps.setString(pos, dto.getStrastate());
                pos++;

                //S_DESCRIPTION
                 ps.setString(pos, dto.getSdescription());
                pos++;

                //D_ACCT
                 ps.setString(pos, dto.getDacct());
                pos++;

                //C_TRIMFLAG
                 ps.setString(pos, dto.getCtrimflag());
                pos++;

                //I_DETAILNIO
                 if (dto.getIdetailnio()==null)
                   ps.setNull(pos, java.sql.Types.INTEGER);
                else
                   ps.setInt(pos, dto.getIdetailnio().intValue());
                pos++ ;

                //S_STATUS
                 ps.setString(pos, dto.getSstatus());
                pos++;

                //S_BIZTYPE
                 ps.setString(pos, dto.getSbiztype());
                pos++;

                //S_BACKFLAG
                 ps.setString(pos, dto.getSbackflag());
                pos++;

                //D_ORIENTRUSTDATE
                 ps.setString(pos, dto.getDorientrustdate());
                pos++;

                //S_ORITRANO
                 ps.setString(pos, dto.getSoritrano());
                pos++;

                //S_ORIVOUNO
                 ps.setString(pos, dto.getSorivouno());
                pos++;

                //D_ORIVOUDATE
                 ps.setString(pos, dto.getDorivoudate());
                pos++;

                //I_CHGNUM
                 //S_INPUTERID
                 ps.setString(pos, dto.getSinputerid());
                pos++;

                //TS_SYSUPDATE
 
               //I_VOUSRLNO
               ps.setLong(pos, dto.getIvousrlno().longValue());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TvPbcpayMainPK pk = (TvPbcpayMainPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setLong(1, pk.getIvousrlno().longValue());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TvPbcpayMainPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvPbcpayMainPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TvPbcpayMainPK)(pks.get(i)) ; 
                ps.setLong(1, pk.getIvousrlno().longValue());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                                                     
		TvPbcpayMainDto dtoNew = (TvPbcpayMainDto)_dto ;
		TvPbcpayMainDto dtoOld =(TvPbcpayMainDto) findForUpdate(_dto.getPK(), conn,false) ;
		if (dtoOld != null) {
			if (! dtoOld.getIchgnum().equals(dtoNew.getIchgnum()))
				throw new SQLException("数据库表：TV_PBCPAY_MAIN记录已经被修改!数据库中记录修改次数为:"+dtoOld.getIchgnum()+"; 当前记录修改次数为:"+dtoNew.getIchgnum()) ;
		}else{
			throw new SQLException("数据库表：TV_PBCPAY_MAIN记录已经被删除!");
		}
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
