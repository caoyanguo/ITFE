    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.HtfDirectpayAdjustsubDto ;
import com.cfcc.itfe.persistence.pk.HtfDirectpayAdjustsubPK ;


/**
 * <p>Title: DAO of table: HTF_DIRECTPAY_ADJUSTSUB</p>
 * <p>Description:财政直接支付调整凭证5253子表 Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:54 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class HtfDirectpayAdjustsubDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO HTF_DIRECTPAY_ADJUSTSUB ("
          + "I_VOUSRLNO,I_SEQNO,S_ID,S_VOUCHERBILLID,S_VOUCHERBILLNO"
          + ",S_VOUCHERNO,S_FUNDTYPECODE,S_FUNDTYPENAME,S_BGTTYPECODE,S_BGTTYPENAME"
          + ",S_PROCATCODE,S_PROCATNAME,S_PAYKINDCODE,S_PAYKINDNAME,S_MOFDEPCODE"
          + ",S_MOFDEPNAME,S_FILENOCODE,S_FILENONAME,S_SUPDEPCODE,S_SUPDEPNAME"
          + ",S_AGENCYCODE,S_AGENCYNAME,S_EXPFUNCCODE,S_EXPFUNCNAME,S_EXPECOCODE"
          + ",S_EXPECONAME,S_DEPPROCODE,S_DEPPRONAME,S_PAYEEACCTNO,S_PAYEEACCTNAME"
          + ",S_PAYEEACCTBANKNAME,S_PAYEEACCTBANKNO,N_PAYAMT,S_REMARK,S_XPAYDATE"
          + ",S_XAGENTBUSINESSNO,S_XCHECKNO,N_XPAYAMT,S_XPAYEEACCTBANKNAME,S_XPAYEEACCTNO"
          + ",S_XPAYEEACCTNAME,S_XADDWORD,S_HOLD1,S_HOLD2,S_HOLD3"
          + ",S_HOLD4,S_EXT1,S_EXT2,S_EXT3"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "HTF_DIRECTPAY_ADJUSTSUB.I_VOUSRLNO, HTF_DIRECTPAY_ADJUSTSUB.I_SEQNO, HTF_DIRECTPAY_ADJUSTSUB.S_ID, HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLID, HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLNO, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERNO, HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPECODE, HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPENAME, HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPECODE, HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPENAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_PROCATCODE, HTF_DIRECTPAY_ADJUSTSUB.S_PROCATNAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDCODE, HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDNAME, HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPCODE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPNAME, HTF_DIRECTPAY_ADJUSTSUB.S_FILENOCODE, HTF_DIRECTPAY_ADJUSTSUB.S_FILENONAME, HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPCODE, HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPNAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYCODE, HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYNAME, HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCCODE, HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCNAME, HTF_DIRECTPAY_ADJUSTSUB.S_EXPECOCODE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_EXPECONAME, HTF_DIRECTPAY_ADJUSTSUB.S_DEPPROCODE, HTF_DIRECTPAY_ADJUSTSUB.S_DEPPRONAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNO, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNO, HTF_DIRECTPAY_ADJUSTSUB.N_PAYAMT, HTF_DIRECTPAY_ADJUSTSUB.S_REMARK, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYDATE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_XAGENTBUSINESSNO, HTF_DIRECTPAY_ADJUSTSUB.S_XCHECKNO, HTF_DIRECTPAY_ADJUSTSUB.N_XPAYAMT, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTBANKNAME, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNO, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNAME, HTF_DIRECTPAY_ADJUSTSUB.S_XADDWORD, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD1, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD2, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD3, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_HOLD4, HTF_DIRECTPAY_ADJUSTSUB.S_EXT1, HTF_DIRECTPAY_ADJUSTSUB.S_EXT2, HTF_DIRECTPAY_ADJUSTSUB.S_EXT3 "
        + "FROM HTF_DIRECTPAY_ADJUSTSUB "
        +" WHERE " 
        + "I_VOUSRLNO = ? AND I_SEQNO = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "HTF_DIRECTPAY_ADJUSTSUB.I_VOUSRLNO, HTF_DIRECTPAY_ADJUSTSUB.I_SEQNO, HTF_DIRECTPAY_ADJUSTSUB.S_ID, HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLID, HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLNO, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERNO, HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPECODE, HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPENAME, HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPECODE, HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPENAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_PROCATCODE, HTF_DIRECTPAY_ADJUSTSUB.S_PROCATNAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDCODE, HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDNAME, HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPCODE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPNAME, HTF_DIRECTPAY_ADJUSTSUB.S_FILENOCODE, HTF_DIRECTPAY_ADJUSTSUB.S_FILENONAME, HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPCODE, HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPNAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYCODE, HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYNAME, HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCCODE, HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCNAME, HTF_DIRECTPAY_ADJUSTSUB.S_EXPECOCODE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_EXPECONAME, HTF_DIRECTPAY_ADJUSTSUB.S_DEPPROCODE, HTF_DIRECTPAY_ADJUSTSUB.S_DEPPRONAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNO, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNO, HTF_DIRECTPAY_ADJUSTSUB.N_PAYAMT, HTF_DIRECTPAY_ADJUSTSUB.S_REMARK, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYDATE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_XAGENTBUSINESSNO, HTF_DIRECTPAY_ADJUSTSUB.S_XCHECKNO, HTF_DIRECTPAY_ADJUSTSUB.N_XPAYAMT, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTBANKNAME, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNO, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNAME, HTF_DIRECTPAY_ADJUSTSUB.S_XADDWORD, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD1, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD2, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD3, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_HOLD4, HTF_DIRECTPAY_ADJUSTSUB.S_EXT1, HTF_DIRECTPAY_ADJUSTSUB.S_EXT2, HTF_DIRECTPAY_ADJUSTSUB.S_EXT3 "
        + "FROM HTF_DIRECTPAY_ADJUSTSUB "
        +" WHERE " 
        + "I_VOUSRLNO = ? AND I_SEQNO = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  HTF_DIRECTPAY_ADJUSTSUB.I_VOUSRLNO  , HTF_DIRECTPAY_ADJUSTSUB.I_SEQNO  , HTF_DIRECTPAY_ADJUSTSUB.S_ID  , HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLID  , HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLNO "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERNO  , HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPECODE  , HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPENAME  , HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPECODE  , HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPENAME "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_PROCATCODE  , HTF_DIRECTPAY_ADJUSTSUB.S_PROCATNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDCODE  , HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPCODE "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_FILENOCODE  , HTF_DIRECTPAY_ADJUSTSUB.S_FILENONAME  , HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPCODE  , HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPNAME "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYCODE  , HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCCODE  , HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_EXPECOCODE "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_EXPECONAME  , HTF_DIRECTPAY_ADJUSTSUB.S_DEPPROCODE  , HTF_DIRECTPAY_ADJUSTSUB.S_DEPPRONAME  , HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNO  , HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNAME "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNO  , HTF_DIRECTPAY_ADJUSTSUB.N_PAYAMT  , HTF_DIRECTPAY_ADJUSTSUB.S_REMARK  , HTF_DIRECTPAY_ADJUSTSUB.S_XPAYDATE "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_XAGENTBUSINESSNO  , HTF_DIRECTPAY_ADJUSTSUB.S_XCHECKNO  , HTF_DIRECTPAY_ADJUSTSUB.N_XPAYAMT  , HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTBANKNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNO "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNAME  , HTF_DIRECTPAY_ADJUSTSUB.S_XADDWORD  , HTF_DIRECTPAY_ADJUSTSUB.S_HOLD1  , HTF_DIRECTPAY_ADJUSTSUB.S_HOLD2  , HTF_DIRECTPAY_ADJUSTSUB.S_HOLD3 "
        + " , HTF_DIRECTPAY_ADJUSTSUB.S_HOLD4  , HTF_DIRECTPAY_ADJUSTSUB.S_EXT1  , HTF_DIRECTPAY_ADJUSTSUB.S_EXT2  , HTF_DIRECTPAY_ADJUSTSUB.S_EXT3 "
        + "FROM HTF_DIRECTPAY_ADJUSTSUB ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "HTF_DIRECTPAY_ADJUSTSUB.I_VOUSRLNO, HTF_DIRECTPAY_ADJUSTSUB.I_SEQNO, HTF_DIRECTPAY_ADJUSTSUB.S_ID, HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLID, HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERBILLNO, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_VOUCHERNO, HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPECODE, HTF_DIRECTPAY_ADJUSTSUB.S_FUNDTYPENAME, HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPECODE, HTF_DIRECTPAY_ADJUSTSUB.S_BGTTYPENAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_PROCATCODE, HTF_DIRECTPAY_ADJUSTSUB.S_PROCATNAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDCODE, HTF_DIRECTPAY_ADJUSTSUB.S_PAYKINDNAME, HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPCODE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_MOFDEPNAME, HTF_DIRECTPAY_ADJUSTSUB.S_FILENOCODE, HTF_DIRECTPAY_ADJUSTSUB.S_FILENONAME, HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPCODE, HTF_DIRECTPAY_ADJUSTSUB.S_SUPDEPNAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYCODE, HTF_DIRECTPAY_ADJUSTSUB.S_AGENCYNAME, HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCCODE, HTF_DIRECTPAY_ADJUSTSUB.S_EXPFUNCNAME, HTF_DIRECTPAY_ADJUSTSUB.S_EXPECOCODE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_EXPECONAME, HTF_DIRECTPAY_ADJUSTSUB.S_DEPPROCODE, HTF_DIRECTPAY_ADJUSTSUB.S_DEPPRONAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNO, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTNAME, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNAME, HTF_DIRECTPAY_ADJUSTSUB.S_PAYEEACCTBANKNO, HTF_DIRECTPAY_ADJUSTSUB.N_PAYAMT, HTF_DIRECTPAY_ADJUSTSUB.S_REMARK, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYDATE, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_XAGENTBUSINESSNO, HTF_DIRECTPAY_ADJUSTSUB.S_XCHECKNO, HTF_DIRECTPAY_ADJUSTSUB.N_XPAYAMT, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTBANKNAME, HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNO, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_XPAYEEACCTNAME, HTF_DIRECTPAY_ADJUSTSUB.S_XADDWORD, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD1, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD2, HTF_DIRECTPAY_ADJUSTSUB.S_HOLD3, "
        + "HTF_DIRECTPAY_ADJUSTSUB.S_HOLD4, HTF_DIRECTPAY_ADJUSTSUB.S_EXT1, HTF_DIRECTPAY_ADJUSTSUB.S_EXT2, HTF_DIRECTPAY_ADJUSTSUB.S_EXT3 "
        + "FROM HTF_DIRECTPAY_ADJUSTSUB " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "I_VOUSRLNO = ? AND I_SEQNO = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE HTF_DIRECTPAY_ADJUSTSUB SET "
        + "S_ID =?,S_VOUCHERBILLID =?,S_VOUCHERBILLNO =?,S_VOUCHERNO =?,S_FUNDTYPECODE =?, "
        + "S_FUNDTYPENAME =?,S_BGTTYPECODE =?,S_BGTTYPENAME =?,S_PROCATCODE =?,S_PROCATNAME =?, "
        + "S_PAYKINDCODE =?,S_PAYKINDNAME =?,S_MOFDEPCODE =?,S_MOFDEPNAME =?,S_FILENOCODE =?, "
        + "S_FILENONAME =?,S_SUPDEPCODE =?,S_SUPDEPNAME =?,S_AGENCYCODE =?,S_AGENCYNAME =?, "
        + "S_EXPFUNCCODE =?,S_EXPFUNCNAME =?,S_EXPECOCODE =?,S_EXPECONAME =?,S_DEPPROCODE =?, "
        + "S_DEPPRONAME =?,S_PAYEEACCTNO =?,S_PAYEEACCTNAME =?,S_PAYEEACCTBANKNAME =?,S_PAYEEACCTBANKNO =?, "
        + "N_PAYAMT =?,S_REMARK =?,S_XPAYDATE =?,S_XAGENTBUSINESSNO =?,S_XCHECKNO =?, "
        + "N_XPAYAMT =?,S_XPAYEEACCTBANKNAME =?,S_XPAYEEACCTNO =?,S_XPAYEEACCTNAME =?,S_XADDWORD =?, "
        + "S_HOLD1 =?,S_HOLD2 =?,S_HOLD3 =?,S_HOLD4 =?,S_EXT1 =?, "
        + "S_EXT2 =?,S_EXT3 =? "
        + "WHERE "
        + "I_VOUSRLNO = ? AND I_SEQNO = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE HTF_DIRECTPAY_ADJUSTSUB SET "
        + "S_ID =?, S_VOUCHERBILLID =?, S_VOUCHERBILLNO =?, S_VOUCHERNO =?, S_FUNDTYPECODE =?,  "
        + "S_FUNDTYPENAME =?, S_BGTTYPECODE =?, S_BGTTYPENAME =?, S_PROCATCODE =?, S_PROCATNAME =?,  "
        + "S_PAYKINDCODE =?, S_PAYKINDNAME =?, S_MOFDEPCODE =?, S_MOFDEPNAME =?, S_FILENOCODE =?,  "
        + "S_FILENONAME =?, S_SUPDEPCODE =?, S_SUPDEPNAME =?, S_AGENCYCODE =?, S_AGENCYNAME =?,  "
        + "S_EXPFUNCCODE =?, S_EXPFUNCNAME =?, S_EXPECOCODE =?, S_EXPECONAME =?, S_DEPPROCODE =?,  "
        + "S_DEPPRONAME =?, S_PAYEEACCTNO =?, S_PAYEEACCTNAME =?, S_PAYEEACCTBANKNAME =?, S_PAYEEACCTBANKNO =?,  "
        + "N_PAYAMT =?, S_REMARK =?, S_XPAYDATE =?, S_XAGENTBUSINESSNO =?, S_XCHECKNO =?,  "
        + "N_XPAYAMT =?, S_XPAYEEACCTBANKNAME =?, S_XPAYEEACCTNO =?, S_XPAYEEACCTNAME =?, S_XADDWORD =?,  "
        + "S_HOLD1 =?, S_HOLD2 =?, S_HOLD3 =?, S_HOLD4 =?, S_EXT1 =?,  "
        + "S_EXT2 =?, S_EXT3 =? "
        + "WHERE "
        + "I_VOUSRLNO = ? AND I_SEQNO = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM HTF_DIRECTPAY_ADJUSTSUB " 
        + " WHERE "
        + "I_VOUSRLNO = ? AND I_SEQNO = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 2;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     HtfDirectpayAdjustsubDto dto = (HtfDirectpayAdjustsubDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          if (dto.getIvousrlno()==null)
            ps.setNull(1, java.sql.Types.BIGINT);
         else
            ps.setLong(1, dto.getIvousrlno().longValue());
          if (dto.getIseqno()==null)
            ps.setNull(2, java.sql.Types.BIGINT);
         else
            ps.setLong(2, dto.getIseqno().longValue());
          ps.setString(3, dto.getSid());

          ps.setString(4, dto.getSvoucherbillid());

          ps.setString(5, dto.getSvoucherbillno());

          ps.setString(6, dto.getSvoucherno());

          ps.setString(7, dto.getSfundtypecode());

          ps.setString(8, dto.getSfundtypename());

          ps.setString(9, dto.getSbgttypecode());

          ps.setString(10, dto.getSbgttypename());

          ps.setString(11, dto.getSprocatcode());

          ps.setString(12, dto.getSprocatname());

          ps.setString(13, dto.getSpaykindcode());

          ps.setString(14, dto.getSpaykindname());

          ps.setString(15, dto.getSmofdepcode());

          ps.setString(16, dto.getSmofdepname());

          ps.setString(17, dto.getSfilenocode());

          ps.setString(18, dto.getSfilenoname());

          ps.setString(19, dto.getSsupdepcode());

          ps.setString(20, dto.getSsupdepname());

          ps.setString(21, dto.getSagencycode());

          ps.setString(22, dto.getSagencyname());

          ps.setString(23, dto.getSexpfunccode());

          ps.setString(24, dto.getSexpfuncname());

          ps.setString(25, dto.getSexpecocode());

          ps.setString(26, dto.getSexpeconame());

          ps.setString(27, dto.getSdepprocode());

          ps.setString(28, dto.getSdepproname());

          ps.setString(29, dto.getSpayeeacctno());

          ps.setString(30, dto.getSpayeeacctname());

          ps.setString(31, dto.getSpayeeacctbankname());

          ps.setString(32, dto.getSpayeeacctbankno());

          ps.setBigDecimal(33, dto.getNpayamt());

          ps.setString(34, dto.getSremark());

          ps.setString(35, dto.getSxpaydate());

          ps.setString(36, dto.getSxagentbusinessno());

          ps.setString(37, dto.getSxcheckno());

          ps.setBigDecimal(38, dto.getNxpayamt());

          ps.setString(39, dto.getSxpayeeacctbankname());

          ps.setString(40, dto.getSxpayeeacctno());

          ps.setString(41, dto.getSxpayeeacctname());

          ps.setString(42, dto.getSxaddword());

          ps.setString(43, dto.getShold1());

          ps.setString(44, dto.getShold2());

          ps.setString(45, dto.getShold3());

          ps.setString(46, dto.getShold4());

          ps.setString(47, dto.getSext1());

          ps.setString(48, dto.getSext2());

          ps.setString(49, dto.getSext3());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       HtfDirectpayAdjustsubDto dto = (HtfDirectpayAdjustsubDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            if (dto.getIvousrlno()==null)
              ps.setNull(1, java.sql.Types.BIGINT);
           else
              ps.setLong(1, dto.getIvousrlno().longValue());
            if (dto.getIseqno()==null)
              ps.setNull(2, java.sql.Types.BIGINT);
           else
              ps.setLong(2, dto.getIseqno().longValue());
            ps.setString(3, dto.getSid());
            ps.setString(4, dto.getSvoucherbillid());
            ps.setString(5, dto.getSvoucherbillno());
            ps.setString(6, dto.getSvoucherno());
            ps.setString(7, dto.getSfundtypecode());
            ps.setString(8, dto.getSfundtypename());
            ps.setString(9, dto.getSbgttypecode());
            ps.setString(10, dto.getSbgttypename());
            ps.setString(11, dto.getSprocatcode());
            ps.setString(12, dto.getSprocatname());
            ps.setString(13, dto.getSpaykindcode());
            ps.setString(14, dto.getSpaykindname());
            ps.setString(15, dto.getSmofdepcode());
            ps.setString(16, dto.getSmofdepname());
            ps.setString(17, dto.getSfilenocode());
            ps.setString(18, dto.getSfilenoname());
            ps.setString(19, dto.getSsupdepcode());
            ps.setString(20, dto.getSsupdepname());
            ps.setString(21, dto.getSagencycode());
            ps.setString(22, dto.getSagencyname());
            ps.setString(23, dto.getSexpfunccode());
            ps.setString(24, dto.getSexpfuncname());
            ps.setString(25, dto.getSexpecocode());
            ps.setString(26, dto.getSexpeconame());
            ps.setString(27, dto.getSdepprocode());
            ps.setString(28, dto.getSdepproname());
            ps.setString(29, dto.getSpayeeacctno());
            ps.setString(30, dto.getSpayeeacctname());
            ps.setString(31, dto.getSpayeeacctbankname());
            ps.setString(32, dto.getSpayeeacctbankno());
            ps.setBigDecimal(33, dto.getNpayamt());
            ps.setString(34, dto.getSremark());
            ps.setString(35, dto.getSxpaydate());
            ps.setString(36, dto.getSxagentbusinessno());
            ps.setString(37, dto.getSxcheckno());
            ps.setBigDecimal(38, dto.getNxpayamt());
            ps.setString(39, dto.getSxpayeeacctbankname());
            ps.setString(40, dto.getSxpayeeacctno());
            ps.setString(41, dto.getSxpayeeacctname());
            ps.setString(42, dto.getSxaddword());
            ps.setString(43, dto.getShold1());
            ps.setString(44, dto.getShold2());
            ps.setString(45, dto.getShold3());
            ps.setString(46, dto.getShold4());
            ps.setString(47, dto.getSext1());
            ps.setString(48, dto.getSext2());
            ps.setString(49, dto.getSext3());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        HtfDirectpayAdjustsubDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (HtfDirectpayAdjustsubDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (HtfDirectpayAdjustsubDto)_dtos[i] ; 
  
               if (dto.getIvousrlno()==null)
                  ps.setNull(1, java.sql.Types.BIGINT);
               else
                  ps.setLong(1, dto.getIvousrlno().longValue());
  
               if (dto.getIseqno()==null)
                  ps.setNull(2, java.sql.Types.BIGINT);
               else
                  ps.setLong(2, dto.getIseqno().longValue());
  
               ps.setString(3, dto.getSid());
  
               ps.setString(4, dto.getSvoucherbillid());
  
               ps.setString(5, dto.getSvoucherbillno());
  
               ps.setString(6, dto.getSvoucherno());
  
               ps.setString(7, dto.getSfundtypecode());
  
               ps.setString(8, dto.getSfundtypename());
  
               ps.setString(9, dto.getSbgttypecode());
  
               ps.setString(10, dto.getSbgttypename());
  
               ps.setString(11, dto.getSprocatcode());
  
               ps.setString(12, dto.getSprocatname());
  
               ps.setString(13, dto.getSpaykindcode());
  
               ps.setString(14, dto.getSpaykindname());
  
               ps.setString(15, dto.getSmofdepcode());
  
               ps.setString(16, dto.getSmofdepname());
  
               ps.setString(17, dto.getSfilenocode());
  
               ps.setString(18, dto.getSfilenoname());
  
               ps.setString(19, dto.getSsupdepcode());
  
               ps.setString(20, dto.getSsupdepname());
  
               ps.setString(21, dto.getSagencycode());
  
               ps.setString(22, dto.getSagencyname());
  
               ps.setString(23, dto.getSexpfunccode());
  
               ps.setString(24, dto.getSexpfuncname());
  
               ps.setString(25, dto.getSexpecocode());
  
               ps.setString(26, dto.getSexpeconame());
  
               ps.setString(27, dto.getSdepprocode());
  
               ps.setString(28, dto.getSdepproname());
  
               ps.setString(29, dto.getSpayeeacctno());
  
               ps.setString(30, dto.getSpayeeacctname());
  
               ps.setString(31, dto.getSpayeeacctbankname());
  
               ps.setString(32, dto.getSpayeeacctbankno());
  
               ps.setBigDecimal(33, dto.getNpayamt());
  
               ps.setString(34, dto.getSremark());
  
               ps.setString(35, dto.getSxpaydate());
  
               ps.setString(36, dto.getSxagentbusinessno());
  
               ps.setString(37, dto.getSxcheckno());
  
               ps.setBigDecimal(38, dto.getNxpayamt());
  
               ps.setString(39, dto.getSxpayeeacctbankname());
  
               ps.setString(40, dto.getSxpayeeacctno());
  
               ps.setString(41, dto.getSxpayeeacctname());
  
               ps.setString(42, dto.getSxaddword());
  
               ps.setString(43, dto.getShold1());
  
               ps.setString(44, dto.getShold2());
  
               ps.setString(45, dto.getShold3());
  
               ps.setString(46, dto.getShold4());
  
               ps.setString(47, dto.getSext1());
  
               ps.setString(48, dto.getSext2());
  
               ps.setString(49, dto.getSext3());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       HtfDirectpayAdjustsubPK pk = (HtfDirectpayAdjustsubPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           if (pk.getIseqno()==null)
               ps.setNull(2, java.sql.Types.BIGINT);
           else
               ps.setLong(2, pk.getIseqno().longValue());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       HtfDirectpayAdjustsubPK pk = (HtfDirectpayAdjustsubPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           if (pk.getIseqno()==null)
               ps.setNull(2, java.sql.Types.BIGINT);
           else
               ps.setLong(2, pk.getIseqno().longValue());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        HtfDirectpayAdjustsubPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (HtfDirectpayAdjustsubPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (HtfDirectpayAdjustsubPK)(pks.get(i)) ; 
                   if (pk.getIvousrlno()==null)
                      ps.setNull((i-iBegin)*2+1, java.sql.Types.BIGINT);
                   else
                      ps.setLong((i-iBegin)*2+1, pk.getIvousrlno().longValue());

                   if (pk.getIseqno()==null)
                      ps.setNull((i-iBegin)*2+2, java.sql.Types.BIGINT);
                   else
                      ps.setLong((i-iBegin)*2+2, pk.getIseqno().longValue());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            HtfDirectpayAdjustsubDto[] dtos = new HtfDirectpayAdjustsubDto[0];
		    dtos = (HtfDirectpayAdjustsubDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             HtfDirectpayAdjustsubDto  dto = new  HtfDirectpayAdjustsubDto ();
             //I_VOUSRLNO
             str = rs.getString("I_VOUSRLNO");
             if(str!=null){
                dto.setIvousrlno(new Long(str));
             }

             //I_SEQNO
             str = rs.getString("I_SEQNO");
             if(str!=null){
                dto.setIseqno(new Long(str));
             }

             //S_ID
             str = rs.getString("S_ID");
             if (str == null)
                dto.setSid(null);
             else
                dto.setSid(str.trim());

             //S_VOUCHERBILLID
             str = rs.getString("S_VOUCHERBILLID");
             if (str == null)
                dto.setSvoucherbillid(null);
             else
                dto.setSvoucherbillid(str.trim());

             //S_VOUCHERBILLNO
             str = rs.getString("S_VOUCHERBILLNO");
             if (str == null)
                dto.setSvoucherbillno(null);
             else
                dto.setSvoucherbillno(str.trim());

             //S_VOUCHERNO
             str = rs.getString("S_VOUCHERNO");
             if (str == null)
                dto.setSvoucherno(null);
             else
                dto.setSvoucherno(str.trim());

             //S_FUNDTYPECODE
             str = rs.getString("S_FUNDTYPECODE");
             if (str == null)
                dto.setSfundtypecode(null);
             else
                dto.setSfundtypecode(str.trim());

             //S_FUNDTYPENAME
             str = rs.getString("S_FUNDTYPENAME");
             if (str == null)
                dto.setSfundtypename(null);
             else
                dto.setSfundtypename(str.trim());

             //S_BGTTYPECODE
             str = rs.getString("S_BGTTYPECODE");
             if (str == null)
                dto.setSbgttypecode(null);
             else
                dto.setSbgttypecode(str.trim());

             //S_BGTTYPENAME
             str = rs.getString("S_BGTTYPENAME");
             if (str == null)
                dto.setSbgttypename(null);
             else
                dto.setSbgttypename(str.trim());

             //S_PROCATCODE
             str = rs.getString("S_PROCATCODE");
             if (str == null)
                dto.setSprocatcode(null);
             else
                dto.setSprocatcode(str.trim());

             //S_PROCATNAME
             str = rs.getString("S_PROCATNAME");
             if (str == null)
                dto.setSprocatname(null);
             else
                dto.setSprocatname(str.trim());

             //S_PAYKINDCODE
             str = rs.getString("S_PAYKINDCODE");
             if (str == null)
                dto.setSpaykindcode(null);
             else
                dto.setSpaykindcode(str.trim());

             //S_PAYKINDNAME
             str = rs.getString("S_PAYKINDNAME");
             if (str == null)
                dto.setSpaykindname(null);
             else
                dto.setSpaykindname(str.trim());

             //S_MOFDEPCODE
             str = rs.getString("S_MOFDEPCODE");
             if (str == null)
                dto.setSmofdepcode(null);
             else
                dto.setSmofdepcode(str.trim());

             //S_MOFDEPNAME
             str = rs.getString("S_MOFDEPNAME");
             if (str == null)
                dto.setSmofdepname(null);
             else
                dto.setSmofdepname(str.trim());

             //S_FILENOCODE
             str = rs.getString("S_FILENOCODE");
             if (str == null)
                dto.setSfilenocode(null);
             else
                dto.setSfilenocode(str.trim());

             //S_FILENONAME
             str = rs.getString("S_FILENONAME");
             if (str == null)
                dto.setSfilenoname(null);
             else
                dto.setSfilenoname(str.trim());

             //S_SUPDEPCODE
             str = rs.getString("S_SUPDEPCODE");
             if (str == null)
                dto.setSsupdepcode(null);
             else
                dto.setSsupdepcode(str.trim());

             //S_SUPDEPNAME
             str = rs.getString("S_SUPDEPNAME");
             if (str == null)
                dto.setSsupdepname(null);
             else
                dto.setSsupdepname(str.trim());

             //S_AGENCYCODE
             str = rs.getString("S_AGENCYCODE");
             if (str == null)
                dto.setSagencycode(null);
             else
                dto.setSagencycode(str.trim());

             //S_AGENCYNAME
             str = rs.getString("S_AGENCYNAME");
             if (str == null)
                dto.setSagencyname(null);
             else
                dto.setSagencyname(str.trim());

             //S_EXPFUNCCODE
             str = rs.getString("S_EXPFUNCCODE");
             if (str == null)
                dto.setSexpfunccode(null);
             else
                dto.setSexpfunccode(str.trim());

             //S_EXPFUNCNAME
             str = rs.getString("S_EXPFUNCNAME");
             if (str == null)
                dto.setSexpfuncname(null);
             else
                dto.setSexpfuncname(str.trim());

             //S_EXPECOCODE
             str = rs.getString("S_EXPECOCODE");
             if (str == null)
                dto.setSexpecocode(null);
             else
                dto.setSexpecocode(str.trim());

             //S_EXPECONAME
             str = rs.getString("S_EXPECONAME");
             if (str == null)
                dto.setSexpeconame(null);
             else
                dto.setSexpeconame(str.trim());

             //S_DEPPROCODE
             str = rs.getString("S_DEPPROCODE");
             if (str == null)
                dto.setSdepprocode(null);
             else
                dto.setSdepprocode(str.trim());

             //S_DEPPRONAME
             str = rs.getString("S_DEPPRONAME");
             if (str == null)
                dto.setSdepproname(null);
             else
                dto.setSdepproname(str.trim());

             //S_PAYEEACCTNO
             str = rs.getString("S_PAYEEACCTNO");
             if (str == null)
                dto.setSpayeeacctno(null);
             else
                dto.setSpayeeacctno(str.trim());

             //S_PAYEEACCTNAME
             str = rs.getString("S_PAYEEACCTNAME");
             if (str == null)
                dto.setSpayeeacctname(null);
             else
                dto.setSpayeeacctname(str.trim());

             //S_PAYEEACCTBANKNAME
             str = rs.getString("S_PAYEEACCTBANKNAME");
             if (str == null)
                dto.setSpayeeacctbankname(null);
             else
                dto.setSpayeeacctbankname(str.trim());

             //S_PAYEEACCTBANKNO
             str = rs.getString("S_PAYEEACCTBANKNO");
             if (str == null)
                dto.setSpayeeacctbankno(null);
             else
                dto.setSpayeeacctbankno(str.trim());

             //N_PAYAMT
           dto.setNpayamt(rs.getBigDecimal("N_PAYAMT"));

             //S_REMARK
             str = rs.getString("S_REMARK");
             if (str == null)
                dto.setSremark(null);
             else
                dto.setSremark(str.trim());

             //S_XPAYDATE
             str = rs.getString("S_XPAYDATE");
             if (str == null)
                dto.setSxpaydate(null);
             else
                dto.setSxpaydate(str.trim());

             //S_XAGENTBUSINESSNO
             str = rs.getString("S_XAGENTBUSINESSNO");
             if (str == null)
                dto.setSxagentbusinessno(null);
             else
                dto.setSxagentbusinessno(str.trim());

             //S_XCHECKNO
             str = rs.getString("S_XCHECKNO");
             if (str == null)
                dto.setSxcheckno(null);
             else
                dto.setSxcheckno(str.trim());

             //N_XPAYAMT
           dto.setNxpayamt(rs.getBigDecimal("N_XPAYAMT"));

             //S_XPAYEEACCTBANKNAME
             str = rs.getString("S_XPAYEEACCTBANKNAME");
             if (str == null)
                dto.setSxpayeeacctbankname(null);
             else
                dto.setSxpayeeacctbankname(str.trim());

             //S_XPAYEEACCTNO
             str = rs.getString("S_XPAYEEACCTNO");
             if (str == null)
                dto.setSxpayeeacctno(null);
             else
                dto.setSxpayeeacctno(str.trim());

             //S_XPAYEEACCTNAME
             str = rs.getString("S_XPAYEEACCTNAME");
             if (str == null)
                dto.setSxpayeeacctname(null);
             else
                dto.setSxpayeeacctname(str.trim());

             //S_XADDWORD
             str = rs.getString("S_XADDWORD");
             if (str == null)
                dto.setSxaddword(null);
             else
                dto.setSxaddword(str.trim());

             //S_HOLD1
             str = rs.getString("S_HOLD1");
             if (str == null)
                dto.setShold1(null);
             else
                dto.setShold1(str.trim());

             //S_HOLD2
             str = rs.getString("S_HOLD2");
             if (str == null)
                dto.setShold2(null);
             else
                dto.setShold2(str.trim());

             //S_HOLD3
             str = rs.getString("S_HOLD3");
             if (str == null)
                dto.setShold3(null);
             else
                dto.setShold3(str.trim());

             //S_HOLD4
             str = rs.getString("S_HOLD4");
             if (str == null)
                dto.setShold4(null);
             else
                dto.setShold4(str.trim());

             //S_EXT1
             str = rs.getString("S_EXT1");
             if (str == null)
                dto.setSext1(null);
             else
                dto.setSext1(str.trim());

             //S_EXT2
             str = rs.getString("S_EXT2");
             if (str == null)
                dto.setSext2(null);
             else
                dto.setSext2(str.trim());

             //S_EXT3
             str = rs.getString("S_EXT3");
             if (str == null)
                dto.setSext3(null);
             else
                dto.setSext3(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        HtfDirectpayAdjustsubDto dto = (HtfDirectpayAdjustsubDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_ID
            ps.setString(pos, dto.getSid());
            pos++;

            //S_VOUCHERBILLID
            ps.setString(pos, dto.getSvoucherbillid());
            pos++;

            //S_VOUCHERBILLNO
            ps.setString(pos, dto.getSvoucherbillno());
            pos++;

            //S_VOUCHERNO
            ps.setString(pos, dto.getSvoucherno());
            pos++;

            //S_FUNDTYPECODE
            ps.setString(pos, dto.getSfundtypecode());
            pos++;

            //S_FUNDTYPENAME
            ps.setString(pos, dto.getSfundtypename());
            pos++;

            //S_BGTTYPECODE
            ps.setString(pos, dto.getSbgttypecode());
            pos++;

            //S_BGTTYPENAME
            ps.setString(pos, dto.getSbgttypename());
            pos++;

            //S_PROCATCODE
            ps.setString(pos, dto.getSprocatcode());
            pos++;

            //S_PROCATNAME
            ps.setString(pos, dto.getSprocatname());
            pos++;

            //S_PAYKINDCODE
            ps.setString(pos, dto.getSpaykindcode());
            pos++;

            //S_PAYKINDNAME
            ps.setString(pos, dto.getSpaykindname());
            pos++;

            //S_MOFDEPCODE
            ps.setString(pos, dto.getSmofdepcode());
            pos++;

            //S_MOFDEPNAME
            ps.setString(pos, dto.getSmofdepname());
            pos++;

            //S_FILENOCODE
            ps.setString(pos, dto.getSfilenocode());
            pos++;

            //S_FILENONAME
            ps.setString(pos, dto.getSfilenoname());
            pos++;

            //S_SUPDEPCODE
            ps.setString(pos, dto.getSsupdepcode());
            pos++;

            //S_SUPDEPNAME
            ps.setString(pos, dto.getSsupdepname());
            pos++;

            //S_AGENCYCODE
            ps.setString(pos, dto.getSagencycode());
            pos++;

            //S_AGENCYNAME
            ps.setString(pos, dto.getSagencyname());
            pos++;

            //S_EXPFUNCCODE
            ps.setString(pos, dto.getSexpfunccode());
            pos++;

            //S_EXPFUNCNAME
            ps.setString(pos, dto.getSexpfuncname());
            pos++;

            //S_EXPECOCODE
            ps.setString(pos, dto.getSexpecocode());
            pos++;

            //S_EXPECONAME
            ps.setString(pos, dto.getSexpeconame());
            pos++;

            //S_DEPPROCODE
            ps.setString(pos, dto.getSdepprocode());
            pos++;

            //S_DEPPRONAME
            ps.setString(pos, dto.getSdepproname());
            pos++;

            //S_PAYEEACCTNO
            ps.setString(pos, dto.getSpayeeacctno());
            pos++;

            //S_PAYEEACCTNAME
            ps.setString(pos, dto.getSpayeeacctname());
            pos++;

            //S_PAYEEACCTBANKNAME
            ps.setString(pos, dto.getSpayeeacctbankname());
            pos++;

            //S_PAYEEACCTBANKNO
            ps.setString(pos, dto.getSpayeeacctbankno());
            pos++;

            //N_PAYAMT
            ps.setBigDecimal(pos, dto.getNpayamt());
            pos++;

            //S_REMARK
            ps.setString(pos, dto.getSremark());
            pos++;

            //S_XPAYDATE
            ps.setString(pos, dto.getSxpaydate());
            pos++;

            //S_XAGENTBUSINESSNO
            ps.setString(pos, dto.getSxagentbusinessno());
            pos++;

            //S_XCHECKNO
            ps.setString(pos, dto.getSxcheckno());
            pos++;

            //N_XPAYAMT
            ps.setBigDecimal(pos, dto.getNxpayamt());
            pos++;

            //S_XPAYEEACCTBANKNAME
            ps.setString(pos, dto.getSxpayeeacctbankname());
            pos++;

            //S_XPAYEEACCTNO
            ps.setString(pos, dto.getSxpayeeacctno());
            pos++;

            //S_XPAYEEACCTNAME
            ps.setString(pos, dto.getSxpayeeacctname());
            pos++;

            //S_XADDWORD
            ps.setString(pos, dto.getSxaddword());
            pos++;

            //S_HOLD1
            ps.setString(pos, dto.getShold1());
            pos++;

            //S_HOLD2
            ps.setString(pos, dto.getShold2());
            pos++;

            //S_HOLD3
            ps.setString(pos, dto.getShold3());
            pos++;

            //S_HOLD4
            ps.setString(pos, dto.getShold4());
            pos++;

            //S_EXT1
            ps.setString(pos, dto.getSext1());
            pos++;

            //S_EXT2
            ps.setString(pos, dto.getSext2());
            pos++;

            //S_EXT3
            ps.setString(pos, dto.getSext3());
            pos++;


           //I_VOUSRLNO
           ps.setLong(pos, dto.getIvousrlno().longValue());
           pos++;
           //I_SEQNO
           ps.setLong(pos, dto.getIseqno().longValue());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 HtfDirectpayAdjustsubDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (HtfDirectpayAdjustsubDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (HtfDirectpayAdjustsubDto)_dtos[i] ; 
                int pos = 1;
                //S_ID
                 ps.setString(pos, dto.getSid());
                pos++;

                //S_VOUCHERBILLID
                 ps.setString(pos, dto.getSvoucherbillid());
                pos++;

                //S_VOUCHERBILLNO
                 ps.setString(pos, dto.getSvoucherbillno());
                pos++;

                //S_VOUCHERNO
                 ps.setString(pos, dto.getSvoucherno());
                pos++;

                //S_FUNDTYPECODE
                 ps.setString(pos, dto.getSfundtypecode());
                pos++;

                //S_FUNDTYPENAME
                 ps.setString(pos, dto.getSfundtypename());
                pos++;

                //S_BGTTYPECODE
                 ps.setString(pos, dto.getSbgttypecode());
                pos++;

                //S_BGTTYPENAME
                 ps.setString(pos, dto.getSbgttypename());
                pos++;

                //S_PROCATCODE
                 ps.setString(pos, dto.getSprocatcode());
                pos++;

                //S_PROCATNAME
                 ps.setString(pos, dto.getSprocatname());
                pos++;

                //S_PAYKINDCODE
                 ps.setString(pos, dto.getSpaykindcode());
                pos++;

                //S_PAYKINDNAME
                 ps.setString(pos, dto.getSpaykindname());
                pos++;

                //S_MOFDEPCODE
                 ps.setString(pos, dto.getSmofdepcode());
                pos++;

                //S_MOFDEPNAME
                 ps.setString(pos, dto.getSmofdepname());
                pos++;

                //S_FILENOCODE
                 ps.setString(pos, dto.getSfilenocode());
                pos++;

                //S_FILENONAME
                 ps.setString(pos, dto.getSfilenoname());
                pos++;

                //S_SUPDEPCODE
                 ps.setString(pos, dto.getSsupdepcode());
                pos++;

                //S_SUPDEPNAME
                 ps.setString(pos, dto.getSsupdepname());
                pos++;

                //S_AGENCYCODE
                 ps.setString(pos, dto.getSagencycode());
                pos++;

                //S_AGENCYNAME
                 ps.setString(pos, dto.getSagencyname());
                pos++;

                //S_EXPFUNCCODE
                 ps.setString(pos, dto.getSexpfunccode());
                pos++;

                //S_EXPFUNCNAME
                 ps.setString(pos, dto.getSexpfuncname());
                pos++;

                //S_EXPECOCODE
                 ps.setString(pos, dto.getSexpecocode());
                pos++;

                //S_EXPECONAME
                 ps.setString(pos, dto.getSexpeconame());
                pos++;

                //S_DEPPROCODE
                 ps.setString(pos, dto.getSdepprocode());
                pos++;

                //S_DEPPRONAME
                 ps.setString(pos, dto.getSdepproname());
                pos++;

                //S_PAYEEACCTNO
                 ps.setString(pos, dto.getSpayeeacctno());
                pos++;

                //S_PAYEEACCTNAME
                 ps.setString(pos, dto.getSpayeeacctname());
                pos++;

                //S_PAYEEACCTBANKNAME
                 ps.setString(pos, dto.getSpayeeacctbankname());
                pos++;

                //S_PAYEEACCTBANKNO
                 ps.setString(pos, dto.getSpayeeacctbankno());
                pos++;

                //N_PAYAMT
                 ps.setBigDecimal(pos, dto.getNpayamt());
                pos++;

                //S_REMARK
                 ps.setString(pos, dto.getSremark());
                pos++;

                //S_XPAYDATE
                 ps.setString(pos, dto.getSxpaydate());
                pos++;

                //S_XAGENTBUSINESSNO
                 ps.setString(pos, dto.getSxagentbusinessno());
                pos++;

                //S_XCHECKNO
                 ps.setString(pos, dto.getSxcheckno());
                pos++;

                //N_XPAYAMT
                 ps.setBigDecimal(pos, dto.getNxpayamt());
                pos++;

                //S_XPAYEEACCTBANKNAME
                 ps.setString(pos, dto.getSxpayeeacctbankname());
                pos++;

                //S_XPAYEEACCTNO
                 ps.setString(pos, dto.getSxpayeeacctno());
                pos++;

                //S_XPAYEEACCTNAME
                 ps.setString(pos, dto.getSxpayeeacctname());
                pos++;

                //S_XADDWORD
                 ps.setString(pos, dto.getSxaddword());
                pos++;

                //S_HOLD1
                 ps.setString(pos, dto.getShold1());
                pos++;

                //S_HOLD2
                 ps.setString(pos, dto.getShold2());
                pos++;

                //S_HOLD3
                 ps.setString(pos, dto.getShold3());
                pos++;

                //S_HOLD4
                 ps.setString(pos, dto.getShold4());
                pos++;

                //S_EXT1
                 ps.setString(pos, dto.getSext1());
                pos++;

                //S_EXT2
                 ps.setString(pos, dto.getSext2());
                pos++;

                //S_EXT3
                 ps.setString(pos, dto.getSext3());
                pos++;


               //I_VOUSRLNO
               ps.setLong(pos, dto.getIvousrlno().longValue());
               pos++;
               //I_SEQNO
               ps.setLong(pos, dto.getIseqno().longValue());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       HtfDirectpayAdjustsubPK pk = (HtfDirectpayAdjustsubPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setLong(1, pk.getIvousrlno().longValue());
           ps.setLong(2, pk.getIseqno().longValue());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        HtfDirectpayAdjustsubPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (HtfDirectpayAdjustsubPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (HtfDirectpayAdjustsubPK)(pks.get(i)) ; 
                ps.setLong(1, pk.getIvousrlno().longValue());
                ps.setLong(2, pk.getIseqno().longValue());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                                                                             		throw new SQLException("数据库表：HTF_DIRECTPAY_ADJUSTSUB没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
