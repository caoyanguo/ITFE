    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TvTaxDto ;
import com.cfcc.itfe.persistence.pk.TvTaxPK ;


/**
 * <p>Title: DAO of table: TV_TAX</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:04 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TvTaxDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TV_TAX ("
          + "S_SEQ,S_TAXORGCODE,S_ENTRUSTDATE,S_TRANO,S_MSGID"
          + ",S_TAXVOUNO,C_HANDLETYPE,S_BILLDATE,C_BUDGETTYPE,S_PAYEEBANKNO"
          + ",S_PAYEEOPBKCODE,S_PAYEEACCT,S_PAYEENAME,S_PAYEEORGCODE,S_PAYBKCODE"
          + ",S_PAYOPBKCODE,S_PAYACCT,S_CORPCODE,S_PROTOCOLNO,S_CORPTYPE"
          + ",S_HANDORGNAME,S_TAXPAYCODE,S_TAXPAYNAME,C_PRINTFLAG,C_TRIMSIGN"
          + ",F_TRAAMT,S_REMARK,S_REMARK1,S_REMARK2,I_TAXKINDCOUNT"
          + ",C_RECKONTYPE,S_PROCSTAT,S_STATUS,S_RESULT,S_ADDWORD"
          + ",C_CANCELSTAT,S_CHKBATCH,S_EXPORTER,S_ACCEPTDATE,S_PAYDATE"
          + ",S_CHKDATE,TS_UPDATE"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TV_TAX.S_SEQ, TV_TAX.S_TAXORGCODE, TV_TAX.S_ENTRUSTDATE, TV_TAX.S_TRANO, TV_TAX.S_MSGID, "
        + "TV_TAX.S_TAXVOUNO, TV_TAX.C_HANDLETYPE, TV_TAX.S_BILLDATE, TV_TAX.C_BUDGETTYPE, TV_TAX.S_PAYEEBANKNO, "
        + "TV_TAX.S_PAYEEOPBKCODE, TV_TAX.S_PAYEEACCT, TV_TAX.S_PAYEENAME, TV_TAX.S_PAYEEORGCODE, TV_TAX.S_PAYBKCODE, "
        + "TV_TAX.S_PAYOPBKCODE, TV_TAX.S_PAYACCT, TV_TAX.S_CORPCODE, TV_TAX.S_PROTOCOLNO, TV_TAX.S_CORPTYPE, "
        + "TV_TAX.S_HANDORGNAME, TV_TAX.S_TAXPAYCODE, TV_TAX.S_TAXPAYNAME, TV_TAX.C_PRINTFLAG, TV_TAX.C_TRIMSIGN, "
        + "TV_TAX.F_TRAAMT, TV_TAX.S_REMARK, TV_TAX.S_REMARK1, TV_TAX.S_REMARK2, TV_TAX.I_TAXKINDCOUNT, "
        + "TV_TAX.C_RECKONTYPE, TV_TAX.S_PROCSTAT, TV_TAX.S_STATUS, TV_TAX.S_RESULT, TV_TAX.S_ADDWORD, "
        + "TV_TAX.C_CANCELSTAT, TV_TAX.S_CHKBATCH, TV_TAX.S_EXPORTER, TV_TAX.S_ACCEPTDATE, TV_TAX.S_PAYDATE, "
        + "TV_TAX.S_CHKDATE, TV_TAX.TS_UPDATE "
        + "FROM TV_TAX "
        +" WHERE " 
        + "S_SEQ = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TV_TAX.S_SEQ, TV_TAX.S_TAXORGCODE, TV_TAX.S_ENTRUSTDATE, TV_TAX.S_TRANO, TV_TAX.S_MSGID, "
        + "TV_TAX.S_TAXVOUNO, TV_TAX.C_HANDLETYPE, TV_TAX.S_BILLDATE, TV_TAX.C_BUDGETTYPE, TV_TAX.S_PAYEEBANKNO, "
        + "TV_TAX.S_PAYEEOPBKCODE, TV_TAX.S_PAYEEACCT, TV_TAX.S_PAYEENAME, TV_TAX.S_PAYEEORGCODE, TV_TAX.S_PAYBKCODE, "
        + "TV_TAX.S_PAYOPBKCODE, TV_TAX.S_PAYACCT, TV_TAX.S_CORPCODE, TV_TAX.S_PROTOCOLNO, TV_TAX.S_CORPTYPE, "
        + "TV_TAX.S_HANDORGNAME, TV_TAX.S_TAXPAYCODE, TV_TAX.S_TAXPAYNAME, TV_TAX.C_PRINTFLAG, TV_TAX.C_TRIMSIGN, "
        + "TV_TAX.F_TRAAMT, TV_TAX.S_REMARK, TV_TAX.S_REMARK1, TV_TAX.S_REMARK2, TV_TAX.I_TAXKINDCOUNT, "
        + "TV_TAX.C_RECKONTYPE, TV_TAX.S_PROCSTAT, TV_TAX.S_STATUS, TV_TAX.S_RESULT, TV_TAX.S_ADDWORD, "
        + "TV_TAX.C_CANCELSTAT, TV_TAX.S_CHKBATCH, TV_TAX.S_EXPORTER, TV_TAX.S_ACCEPTDATE, TV_TAX.S_PAYDATE, "
        + "TV_TAX.S_CHKDATE, TV_TAX.TS_UPDATE "
        + "FROM TV_TAX "
        +" WHERE " 
        + "S_SEQ = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TV_TAX.S_SEQ  , TV_TAX.S_TAXORGCODE  , TV_TAX.S_ENTRUSTDATE  , TV_TAX.S_TRANO  , TV_TAX.S_MSGID "
        + " , TV_TAX.S_TAXVOUNO  , TV_TAX.C_HANDLETYPE  , TV_TAX.S_BILLDATE  , TV_TAX.C_BUDGETTYPE  , TV_TAX.S_PAYEEBANKNO "
        + " , TV_TAX.S_PAYEEOPBKCODE  , TV_TAX.S_PAYEEACCT  , TV_TAX.S_PAYEENAME  , TV_TAX.S_PAYEEORGCODE  , TV_TAX.S_PAYBKCODE "
        + " , TV_TAX.S_PAYOPBKCODE  , TV_TAX.S_PAYACCT  , TV_TAX.S_CORPCODE  , TV_TAX.S_PROTOCOLNO  , TV_TAX.S_CORPTYPE "
        + " , TV_TAX.S_HANDORGNAME  , TV_TAX.S_TAXPAYCODE  , TV_TAX.S_TAXPAYNAME  , TV_TAX.C_PRINTFLAG  , TV_TAX.C_TRIMSIGN "
        + " , TV_TAX.F_TRAAMT  , TV_TAX.S_REMARK  , TV_TAX.S_REMARK1  , TV_TAX.S_REMARK2  , TV_TAX.I_TAXKINDCOUNT "
        + " , TV_TAX.C_RECKONTYPE  , TV_TAX.S_PROCSTAT  , TV_TAX.S_STATUS  , TV_TAX.S_RESULT  , TV_TAX.S_ADDWORD "
        + " , TV_TAX.C_CANCELSTAT  , TV_TAX.S_CHKBATCH  , TV_TAX.S_EXPORTER  , TV_TAX.S_ACCEPTDATE  , TV_TAX.S_PAYDATE "
        + " , TV_TAX.S_CHKDATE  , TV_TAX.TS_UPDATE "
        + "FROM TV_TAX ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TV_TAX.S_SEQ, TV_TAX.S_TAXORGCODE, TV_TAX.S_ENTRUSTDATE, TV_TAX.S_TRANO, TV_TAX.S_MSGID, "
        + "TV_TAX.S_TAXVOUNO, TV_TAX.C_HANDLETYPE, TV_TAX.S_BILLDATE, TV_TAX.C_BUDGETTYPE, TV_TAX.S_PAYEEBANKNO, "
        + "TV_TAX.S_PAYEEOPBKCODE, TV_TAX.S_PAYEEACCT, TV_TAX.S_PAYEENAME, TV_TAX.S_PAYEEORGCODE, TV_TAX.S_PAYBKCODE, "
        + "TV_TAX.S_PAYOPBKCODE, TV_TAX.S_PAYACCT, TV_TAX.S_CORPCODE, TV_TAX.S_PROTOCOLNO, TV_TAX.S_CORPTYPE, "
        + "TV_TAX.S_HANDORGNAME, TV_TAX.S_TAXPAYCODE, TV_TAX.S_TAXPAYNAME, TV_TAX.C_PRINTFLAG, TV_TAX.C_TRIMSIGN, "
        + "TV_TAX.F_TRAAMT, TV_TAX.S_REMARK, TV_TAX.S_REMARK1, TV_TAX.S_REMARK2, TV_TAX.I_TAXKINDCOUNT, "
        + "TV_TAX.C_RECKONTYPE, TV_TAX.S_PROCSTAT, TV_TAX.S_STATUS, TV_TAX.S_RESULT, TV_TAX.S_ADDWORD, "
        + "TV_TAX.C_CANCELSTAT, TV_TAX.S_CHKBATCH, TV_TAX.S_EXPORTER, TV_TAX.S_ACCEPTDATE, TV_TAX.S_PAYDATE, "
        + "TV_TAX.S_CHKDATE, TV_TAX.TS_UPDATE "
        + "FROM TV_TAX " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "S_SEQ = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TV_TAX SET "
        + "S_TAXORGCODE =?,S_ENTRUSTDATE =?,S_TRANO =?,S_MSGID =?,S_TAXVOUNO =?, "
        + "C_HANDLETYPE =?,S_BILLDATE =?,C_BUDGETTYPE =?,S_PAYEEBANKNO =?,S_PAYEEOPBKCODE =?, "
        + "S_PAYEEACCT =?,S_PAYEENAME =?,S_PAYEEORGCODE =?,S_PAYBKCODE =?,S_PAYOPBKCODE =?, "
        + "S_PAYACCT =?,S_CORPCODE =?,S_PROTOCOLNO =?,S_CORPTYPE =?,S_HANDORGNAME =?, "
        + "S_TAXPAYCODE =?,S_TAXPAYNAME =?,C_PRINTFLAG =?,C_TRIMSIGN =?,F_TRAAMT =?, "
        + "S_REMARK =?,S_REMARK1 =?,S_REMARK2 =?,I_TAXKINDCOUNT =?,C_RECKONTYPE =?, "
        + "S_PROCSTAT =?,S_STATUS =?,S_RESULT =?,S_ADDWORD =?,C_CANCELSTAT =?, "
        + "S_CHKBATCH =?,S_EXPORTER =?,S_ACCEPTDATE =?,S_PAYDATE =?,S_CHKDATE =?, "
        + "TS_UPDATE =? "
        + "WHERE "
        + "S_SEQ = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TV_TAX SET "
        + "S_TAXORGCODE =?, S_ENTRUSTDATE =?, S_TRANO =?, S_MSGID =?, S_TAXVOUNO =?,  "
        + "C_HANDLETYPE =?, S_BILLDATE =?, C_BUDGETTYPE =?, S_PAYEEBANKNO =?, S_PAYEEOPBKCODE =?,  "
        + "S_PAYEEACCT =?, S_PAYEENAME =?, S_PAYEEORGCODE =?, S_PAYBKCODE =?, S_PAYOPBKCODE =?,  "
        + "S_PAYACCT =?, S_CORPCODE =?, S_PROTOCOLNO =?, S_CORPTYPE =?, S_HANDORGNAME =?,  "
        + "S_TAXPAYCODE =?, S_TAXPAYNAME =?, C_PRINTFLAG =?, C_TRIMSIGN =?, F_TRAAMT =?,  "
        + "S_REMARK =?, S_REMARK1 =?, S_REMARK2 =?, I_TAXKINDCOUNT =?, C_RECKONTYPE =?,  "
        + "S_PROCSTAT =?, S_STATUS =?, S_RESULT =?, S_ADDWORD =?, C_CANCELSTAT =?,  "
        + "S_CHKBATCH =?, S_EXPORTER =?, S_ACCEPTDATE =?, S_PAYDATE =?, S_CHKDATE =?,  "
        + "TS_UPDATE =? "
        + "WHERE "
        + "S_SEQ = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TV_TAX " 
        + " WHERE "
        + "S_SEQ = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TvTaxDto dto = (TvTaxDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getSseq());

          ps.setString(2, dto.getStaxorgcode());

          ps.setString(3, dto.getSentrustdate());

          ps.setString(4, dto.getStrano());

          ps.setString(5, dto.getSmsgid());

          ps.setString(6, dto.getStaxvouno());

          ps.setString(7, dto.getChandletype());

          ps.setString(8, dto.getSbilldate());

          ps.setString(9, dto.getCbudgettype());

          ps.setString(10, dto.getSpayeebankno());

          ps.setString(11, dto.getSpayeeopbkcode());

          ps.setString(12, dto.getSpayeeacct());

          ps.setString(13, dto.getSpayeename());

          ps.setString(14, dto.getSpayeeorgcode());

          ps.setString(15, dto.getSpaybkcode());

          ps.setString(16, dto.getSpayopbkcode());

          ps.setString(17, dto.getSpayacct());

          ps.setString(18, dto.getScorpcode());

          ps.setString(19, dto.getSprotocolno());

          ps.setString(20, dto.getScorptype());

          ps.setString(21, dto.getShandorgname());

          ps.setString(22, dto.getStaxpaycode());

          ps.setString(23, dto.getStaxpayname());

          ps.setString(24, dto.getCprintflag());

          ps.setString(25, dto.getCtrimsign());

          ps.setBigDecimal(26, dto.getFtraamt());

          ps.setString(27, dto.getSremark());

          ps.setString(28, dto.getSremark1());

          ps.setString(29, dto.getSremark2());

          if (dto.getItaxkindcount()==null)
            ps.setNull(30, java.sql.Types.SMALLINT);
         else
            ps.setShort(30, dto.getItaxkindcount().shortValue());
          ps.setString(31, dto.getCreckontype());

          ps.setString(32, dto.getSprocstat());

          ps.setString(33, dto.getSstatus());

          ps.setString(34, dto.getSresult());

          ps.setString(35, dto.getSaddword());

          ps.setString(36, dto.getCcancelstat());

          ps.setString(37, dto.getSchkbatch());

          ps.setString(38, dto.getSexporter());

          ps.setString(39, dto.getSacceptdate());

          ps.setString(40, dto.getSpaydate());

          ps.setString(41, dto.getSchkdate());

          ps.setTimestamp(42, dto.getTsupdate());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TvTaxDto dto = (TvTaxDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getSseq());
            ps.setString(2, dto.getStaxorgcode());
            ps.setString(3, dto.getSentrustdate());
            ps.setString(4, dto.getStrano());
            ps.setString(5, dto.getSmsgid());
            ps.setString(6, dto.getStaxvouno());
            ps.setString(7, dto.getChandletype());
            ps.setString(8, dto.getSbilldate());
            ps.setString(9, dto.getCbudgettype());
            ps.setString(10, dto.getSpayeebankno());
            ps.setString(11, dto.getSpayeeopbkcode());
            ps.setString(12, dto.getSpayeeacct());
            ps.setString(13, dto.getSpayeename());
            ps.setString(14, dto.getSpayeeorgcode());
            ps.setString(15, dto.getSpaybkcode());
            ps.setString(16, dto.getSpayopbkcode());
            ps.setString(17, dto.getSpayacct());
            ps.setString(18, dto.getScorpcode());
            ps.setString(19, dto.getSprotocolno());
            ps.setString(20, dto.getScorptype());
            ps.setString(21, dto.getShandorgname());
            ps.setString(22, dto.getStaxpaycode());
            ps.setString(23, dto.getStaxpayname());
            ps.setString(24, dto.getCprintflag());
            ps.setString(25, dto.getCtrimsign());
            ps.setBigDecimal(26, dto.getFtraamt());
            ps.setString(27, dto.getSremark());
            ps.setString(28, dto.getSremark1());
            ps.setString(29, dto.getSremark2());
            if (dto.getItaxkindcount()==null)
              ps.setNull(30, java.sql.Types.SMALLINT);
           else
              ps.setShort(30, dto.getItaxkindcount().shortValue());
            ps.setString(31, dto.getCreckontype());
            ps.setString(32, dto.getSprocstat());
            ps.setString(33, dto.getSstatus());
            ps.setString(34, dto.getSresult());
            ps.setString(35, dto.getSaddword());
            ps.setString(36, dto.getCcancelstat());
            ps.setString(37, dto.getSchkbatch());
            ps.setString(38, dto.getSexporter());
            ps.setString(39, dto.getSacceptdate());
            ps.setString(40, dto.getSpaydate());
            ps.setString(41, dto.getSchkdate());
            ps.setTimestamp(42, dto.getTsupdate());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TvTaxDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TvTaxDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TvTaxDto)_dtos[i] ; 
  
               ps.setString(1, dto.getSseq());
  
               ps.setString(2, dto.getStaxorgcode());
  
               ps.setString(3, dto.getSentrustdate());
  
               ps.setString(4, dto.getStrano());
  
               ps.setString(5, dto.getSmsgid());
  
               ps.setString(6, dto.getStaxvouno());
  
               ps.setString(7, dto.getChandletype());
  
               ps.setString(8, dto.getSbilldate());
  
               ps.setString(9, dto.getCbudgettype());
  
               ps.setString(10, dto.getSpayeebankno());
  
               ps.setString(11, dto.getSpayeeopbkcode());
  
               ps.setString(12, dto.getSpayeeacct());
  
               ps.setString(13, dto.getSpayeename());
  
               ps.setString(14, dto.getSpayeeorgcode());
  
               ps.setString(15, dto.getSpaybkcode());
  
               ps.setString(16, dto.getSpayopbkcode());
  
               ps.setString(17, dto.getSpayacct());
  
               ps.setString(18, dto.getScorpcode());
  
               ps.setString(19, dto.getSprotocolno());
  
               ps.setString(20, dto.getScorptype());
  
               ps.setString(21, dto.getShandorgname());
  
               ps.setString(22, dto.getStaxpaycode());
  
               ps.setString(23, dto.getStaxpayname());
  
               ps.setString(24, dto.getCprintflag());
  
               ps.setString(25, dto.getCtrimsign());
  
               ps.setBigDecimal(26, dto.getFtraamt());
  
               ps.setString(27, dto.getSremark());
  
               ps.setString(28, dto.getSremark1());
  
               ps.setString(29, dto.getSremark2());
  
               if (dto.getItaxkindcount()==null)
                  ps.setNull(30, java.sql.Types.SMALLINT);
               else
                  ps.setShort(30, dto.getItaxkindcount().shortValue());
  
               ps.setString(31, dto.getCreckontype());
  
               ps.setString(32, dto.getSprocstat());
  
               ps.setString(33, dto.getSstatus());
  
               ps.setString(34, dto.getSresult());
  
               ps.setString(35, dto.getSaddword());
  
               ps.setString(36, dto.getCcancelstat());
  
               ps.setString(37, dto.getSchkbatch());
  
               ps.setString(38, dto.getSexporter());
  
               ps.setString(39, dto.getSacceptdate());
  
               ps.setString(40, dto.getSpaydate());
  
               ps.setString(41, dto.getSchkdate());
  
               ps.setTimestamp(42, dto.getTsupdate());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvTaxPK pk = (TvTaxPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           ps.setString(1, pk.getSseq());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvTaxPK pk = (TvTaxPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           ps.setString(1, pk.getSseq());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TvTaxPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvTaxPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TvTaxPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*1+1, pk.getSseq());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TvTaxDto[] dtos = new TvTaxDto[0];
		    dtos = (TvTaxDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TvTaxDto  dto = new  TvTaxDto ();
             //S_SEQ
             str = rs.getString("S_SEQ");
             if (str == null)
                dto.setSseq(null);
             else
                dto.setSseq(str.trim());

             //S_TAXORGCODE
             str = rs.getString("S_TAXORGCODE");
             if (str == null)
                dto.setStaxorgcode(null);
             else
                dto.setStaxorgcode(str.trim());

             //S_ENTRUSTDATE
             str = rs.getString("S_ENTRUSTDATE");
             if (str == null)
                dto.setSentrustdate(null);
             else
                dto.setSentrustdate(str.trim());

             //S_TRANO
             str = rs.getString("S_TRANO");
             if (str == null)
                dto.setStrano(null);
             else
                dto.setStrano(str.trim());

             //S_MSGID
             str = rs.getString("S_MSGID");
             if (str == null)
                dto.setSmsgid(null);
             else
                dto.setSmsgid(str.trim());

             //S_TAXVOUNO
             str = rs.getString("S_TAXVOUNO");
             if (str == null)
                dto.setStaxvouno(null);
             else
                dto.setStaxvouno(str.trim());

             //C_HANDLETYPE
             str = rs.getString("C_HANDLETYPE");
             if (str == null)
                dto.setChandletype(null);
             else
                dto.setChandletype(str.trim());

             //S_BILLDATE
             str = rs.getString("S_BILLDATE");
             if (str == null)
                dto.setSbilldate(null);
             else
                dto.setSbilldate(str.trim());

             //C_BUDGETTYPE
             str = rs.getString("C_BUDGETTYPE");
             if (str == null)
                dto.setCbudgettype(null);
             else
                dto.setCbudgettype(str.trim());

             //S_PAYEEBANKNO
             str = rs.getString("S_PAYEEBANKNO");
             if (str == null)
                dto.setSpayeebankno(null);
             else
                dto.setSpayeebankno(str.trim());

             //S_PAYEEOPBKCODE
             str = rs.getString("S_PAYEEOPBKCODE");
             if (str == null)
                dto.setSpayeeopbkcode(null);
             else
                dto.setSpayeeopbkcode(str.trim());

             //S_PAYEEACCT
             str = rs.getString("S_PAYEEACCT");
             if (str == null)
                dto.setSpayeeacct(null);
             else
                dto.setSpayeeacct(str.trim());

             //S_PAYEENAME
             str = rs.getString("S_PAYEENAME");
             if (str == null)
                dto.setSpayeename(null);
             else
                dto.setSpayeename(str.trim());

             //S_PAYEEORGCODE
             str = rs.getString("S_PAYEEORGCODE");
             if (str == null)
                dto.setSpayeeorgcode(null);
             else
                dto.setSpayeeorgcode(str.trim());

             //S_PAYBKCODE
             str = rs.getString("S_PAYBKCODE");
             if (str == null)
                dto.setSpaybkcode(null);
             else
                dto.setSpaybkcode(str.trim());

             //S_PAYOPBKCODE
             str = rs.getString("S_PAYOPBKCODE");
             if (str == null)
                dto.setSpayopbkcode(null);
             else
                dto.setSpayopbkcode(str.trim());

             //S_PAYACCT
             str = rs.getString("S_PAYACCT");
             if (str == null)
                dto.setSpayacct(null);
             else
                dto.setSpayacct(str.trim());

             //S_CORPCODE
             str = rs.getString("S_CORPCODE");
             if (str == null)
                dto.setScorpcode(null);
             else
                dto.setScorpcode(str.trim());

             //S_PROTOCOLNO
             str = rs.getString("S_PROTOCOLNO");
             if (str == null)
                dto.setSprotocolno(null);
             else
                dto.setSprotocolno(str.trim());

             //S_CORPTYPE
             str = rs.getString("S_CORPTYPE");
             if (str == null)
                dto.setScorptype(null);
             else
                dto.setScorptype(str.trim());

             //S_HANDORGNAME
             str = rs.getString("S_HANDORGNAME");
             if (str == null)
                dto.setShandorgname(null);
             else
                dto.setShandorgname(str.trim());

             //S_TAXPAYCODE
             str = rs.getString("S_TAXPAYCODE");
             if (str == null)
                dto.setStaxpaycode(null);
             else
                dto.setStaxpaycode(str.trim());

             //S_TAXPAYNAME
             str = rs.getString("S_TAXPAYNAME");
             if (str == null)
                dto.setStaxpayname(null);
             else
                dto.setStaxpayname(str.trim());

             //C_PRINTFLAG
             str = rs.getString("C_PRINTFLAG");
             if (str == null)
                dto.setCprintflag(null);
             else
                dto.setCprintflag(str.trim());

             //C_TRIMSIGN
             str = rs.getString("C_TRIMSIGN");
             if (str == null)
                dto.setCtrimsign(null);
             else
                dto.setCtrimsign(str.trim());

             //F_TRAAMT
           dto.setFtraamt(rs.getBigDecimal("F_TRAAMT"));

             //S_REMARK
             str = rs.getString("S_REMARK");
             if (str == null)
                dto.setSremark(null);
             else
                dto.setSremark(str.trim());

             //S_REMARK1
             str = rs.getString("S_REMARK1");
             if (str == null)
                dto.setSremark1(null);
             else
                dto.setSremark1(str.trim());

             //S_REMARK2
             str = rs.getString("S_REMARK2");
             if (str == null)
                dto.setSremark2(null);
             else
                dto.setSremark2(str.trim());

             //I_TAXKINDCOUNT
             str = rs.getString("I_TAXKINDCOUNT");
             if(str!=null){
                dto.setItaxkindcount(new Short(str));
             }

             //C_RECKONTYPE
             str = rs.getString("C_RECKONTYPE");
             if (str == null)
                dto.setCreckontype(null);
             else
                dto.setCreckontype(str.trim());

             //S_PROCSTAT
             str = rs.getString("S_PROCSTAT");
             if (str == null)
                dto.setSprocstat(null);
             else
                dto.setSprocstat(str.trim());

             //S_STATUS
             str = rs.getString("S_STATUS");
             if (str == null)
                dto.setSstatus(null);
             else
                dto.setSstatus(str.trim());

             //S_RESULT
             str = rs.getString("S_RESULT");
             if (str == null)
                dto.setSresult(null);
             else
                dto.setSresult(str.trim());

             //S_ADDWORD
             str = rs.getString("S_ADDWORD");
             if (str == null)
                dto.setSaddword(null);
             else
                dto.setSaddword(str.trim());

             //C_CANCELSTAT
             str = rs.getString("C_CANCELSTAT");
             if (str == null)
                dto.setCcancelstat(null);
             else
                dto.setCcancelstat(str.trim());

             //S_CHKBATCH
             str = rs.getString("S_CHKBATCH");
             if (str == null)
                dto.setSchkbatch(null);
             else
                dto.setSchkbatch(str.trim());

             //S_EXPORTER
             str = rs.getString("S_EXPORTER");
             if (str == null)
                dto.setSexporter(null);
             else
                dto.setSexporter(str.trim());

             //S_ACCEPTDATE
             str = rs.getString("S_ACCEPTDATE");
             if (str == null)
                dto.setSacceptdate(null);
             else
                dto.setSacceptdate(str.trim());

             //S_PAYDATE
             str = rs.getString("S_PAYDATE");
             if (str == null)
                dto.setSpaydate(null);
             else
                dto.setSpaydate(str.trim());

             //S_CHKDATE
             str = rs.getString("S_CHKDATE");
             if (str == null)
                dto.setSchkdate(null);
             else
                dto.setSchkdate(str.trim());

             //TS_UPDATE
           dto.setTsupdate(rs.getTimestamp("TS_UPDATE"));



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TvTaxDto dto = (TvTaxDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_TAXORGCODE
            ps.setString(pos, dto.getStaxorgcode());
            pos++;

            //S_ENTRUSTDATE
            ps.setString(pos, dto.getSentrustdate());
            pos++;

            //S_TRANO
            ps.setString(pos, dto.getStrano());
            pos++;

            //S_MSGID
            ps.setString(pos, dto.getSmsgid());
            pos++;

            //S_TAXVOUNO
            ps.setString(pos, dto.getStaxvouno());
            pos++;

            //C_HANDLETYPE
            ps.setString(pos, dto.getChandletype());
            pos++;

            //S_BILLDATE
            ps.setString(pos, dto.getSbilldate());
            pos++;

            //C_BUDGETTYPE
            ps.setString(pos, dto.getCbudgettype());
            pos++;

            //S_PAYEEBANKNO
            ps.setString(pos, dto.getSpayeebankno());
            pos++;

            //S_PAYEEOPBKCODE
            ps.setString(pos, dto.getSpayeeopbkcode());
            pos++;

            //S_PAYEEACCT
            ps.setString(pos, dto.getSpayeeacct());
            pos++;

            //S_PAYEENAME
            ps.setString(pos, dto.getSpayeename());
            pos++;

            //S_PAYEEORGCODE
            ps.setString(pos, dto.getSpayeeorgcode());
            pos++;

            //S_PAYBKCODE
            ps.setString(pos, dto.getSpaybkcode());
            pos++;

            //S_PAYOPBKCODE
            ps.setString(pos, dto.getSpayopbkcode());
            pos++;

            //S_PAYACCT
            ps.setString(pos, dto.getSpayacct());
            pos++;

            //S_CORPCODE
            ps.setString(pos, dto.getScorpcode());
            pos++;

            //S_PROTOCOLNO
            ps.setString(pos, dto.getSprotocolno());
            pos++;

            //S_CORPTYPE
            ps.setString(pos, dto.getScorptype());
            pos++;

            //S_HANDORGNAME
            ps.setString(pos, dto.getShandorgname());
            pos++;

            //S_TAXPAYCODE
            ps.setString(pos, dto.getStaxpaycode());
            pos++;

            //S_TAXPAYNAME
            ps.setString(pos, dto.getStaxpayname());
            pos++;

            //C_PRINTFLAG
            ps.setString(pos, dto.getCprintflag());
            pos++;

            //C_TRIMSIGN
            ps.setString(pos, dto.getCtrimsign());
            pos++;

            //F_TRAAMT
            ps.setBigDecimal(pos, dto.getFtraamt());
            pos++;

            //S_REMARK
            ps.setString(pos, dto.getSremark());
            pos++;

            //S_REMARK1
            ps.setString(pos, dto.getSremark1());
            pos++;

            //S_REMARK2
            ps.setString(pos, dto.getSremark2());
            pos++;

            //I_TAXKINDCOUNT
            if (dto.getItaxkindcount()==null)
               ps.setNull(pos, java.sql.Types.SMALLINT);
            else
               ps.setShort(pos, dto.getItaxkindcount().shortValue());
            pos++;      

            //C_RECKONTYPE
            ps.setString(pos, dto.getCreckontype());
            pos++;

            //S_PROCSTAT
            ps.setString(pos, dto.getSprocstat());
            pos++;

            //S_STATUS
            ps.setString(pos, dto.getSstatus());
            pos++;

            //S_RESULT
            ps.setString(pos, dto.getSresult());
            pos++;

            //S_ADDWORD
            ps.setString(pos, dto.getSaddword());
            pos++;

            //C_CANCELSTAT
            ps.setString(pos, dto.getCcancelstat());
            pos++;

            //S_CHKBATCH
            ps.setString(pos, dto.getSchkbatch());
            pos++;

            //S_EXPORTER
            ps.setString(pos, dto.getSexporter());
            pos++;

            //S_ACCEPTDATE
            ps.setString(pos, dto.getSacceptdate());
            pos++;

            //S_PAYDATE
            ps.setString(pos, dto.getSpaydate());
            pos++;

            //S_CHKDATE
            ps.setString(pos, dto.getSchkdate());
            pos++;

            //TS_UPDATE
            ps.setTimestamp(pos, dto.getTsupdate());
            pos++;


           //S_SEQ
           ps.setString(pos, dto.getSseq());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TvTaxDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TvTaxDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TvTaxDto)_dtos[i] ; 
                int pos = 1;
                //S_TAXORGCODE
                 ps.setString(pos, dto.getStaxorgcode());
                pos++;

                //S_ENTRUSTDATE
                 ps.setString(pos, dto.getSentrustdate());
                pos++;

                //S_TRANO
                 ps.setString(pos, dto.getStrano());
                pos++;

                //S_MSGID
                 ps.setString(pos, dto.getSmsgid());
                pos++;

                //S_TAXVOUNO
                 ps.setString(pos, dto.getStaxvouno());
                pos++;

                //C_HANDLETYPE
                 ps.setString(pos, dto.getChandletype());
                pos++;

                //S_BILLDATE
                 ps.setString(pos, dto.getSbilldate());
                pos++;

                //C_BUDGETTYPE
                 ps.setString(pos, dto.getCbudgettype());
                pos++;

                //S_PAYEEBANKNO
                 ps.setString(pos, dto.getSpayeebankno());
                pos++;

                //S_PAYEEOPBKCODE
                 ps.setString(pos, dto.getSpayeeopbkcode());
                pos++;

                //S_PAYEEACCT
                 ps.setString(pos, dto.getSpayeeacct());
                pos++;

                //S_PAYEENAME
                 ps.setString(pos, dto.getSpayeename());
                pos++;

                //S_PAYEEORGCODE
                 ps.setString(pos, dto.getSpayeeorgcode());
                pos++;

                //S_PAYBKCODE
                 ps.setString(pos, dto.getSpaybkcode());
                pos++;

                //S_PAYOPBKCODE
                 ps.setString(pos, dto.getSpayopbkcode());
                pos++;

                //S_PAYACCT
                 ps.setString(pos, dto.getSpayacct());
                pos++;

                //S_CORPCODE
                 ps.setString(pos, dto.getScorpcode());
                pos++;

                //S_PROTOCOLNO
                 ps.setString(pos, dto.getSprotocolno());
                pos++;

                //S_CORPTYPE
                 ps.setString(pos, dto.getScorptype());
                pos++;

                //S_HANDORGNAME
                 ps.setString(pos, dto.getShandorgname());
                pos++;

                //S_TAXPAYCODE
                 ps.setString(pos, dto.getStaxpaycode());
                pos++;

                //S_TAXPAYNAME
                 ps.setString(pos, dto.getStaxpayname());
                pos++;

                //C_PRINTFLAG
                 ps.setString(pos, dto.getCprintflag());
                pos++;

                //C_TRIMSIGN
                 ps.setString(pos, dto.getCtrimsign());
                pos++;

                //F_TRAAMT
                 ps.setBigDecimal(pos, dto.getFtraamt());
                pos++;

                //S_REMARK
                 ps.setString(pos, dto.getSremark());
                pos++;

                //S_REMARK1
                 ps.setString(pos, dto.getSremark1());
                pos++;

                //S_REMARK2
                 ps.setString(pos, dto.getSremark2());
                pos++;

                //I_TAXKINDCOUNT
                 if (dto.getItaxkindcount()==null)
                   ps.setNull(pos, java.sql.Types.SMALLINT);
                else
                   ps.setShort(pos, dto.getItaxkindcount().shortValue());
                pos++;

                //C_RECKONTYPE
                 ps.setString(pos, dto.getCreckontype());
                pos++;

                //S_PROCSTAT
                 ps.setString(pos, dto.getSprocstat());
                pos++;

                //S_STATUS
                 ps.setString(pos, dto.getSstatus());
                pos++;

                //S_RESULT
                 ps.setString(pos, dto.getSresult());
                pos++;

                //S_ADDWORD
                 ps.setString(pos, dto.getSaddword());
                pos++;

                //C_CANCELSTAT
                 ps.setString(pos, dto.getCcancelstat());
                pos++;

                //S_CHKBATCH
                 ps.setString(pos, dto.getSchkbatch());
                pos++;

                //S_EXPORTER
                 ps.setString(pos, dto.getSexporter());
                pos++;

                //S_ACCEPTDATE
                 ps.setString(pos, dto.getSacceptdate());
                pos++;

                //S_PAYDATE
                 ps.setString(pos, dto.getSpaydate());
                pos++;

                //S_CHKDATE
                 ps.setString(pos, dto.getSchkdate());
                pos++;

                //TS_UPDATE
                 ps.setTimestamp(pos, dto.getTsupdate());
                pos++;


               //S_SEQ
               ps.setString(pos, dto.getSseq());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TvTaxPK pk = (TvTaxPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setString(1, pk.getSseq());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TvTaxPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvTaxPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TvTaxPK)(pks.get(i)) ; 
                ps.setString(1, pk.getSseq());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                                                           		throw new SQLException("数据库表：TV_TAX没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
