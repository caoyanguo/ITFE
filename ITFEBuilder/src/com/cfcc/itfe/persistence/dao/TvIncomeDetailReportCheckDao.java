    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TvIncomeDetailReportCheckDto ;
import com.cfcc.itfe.persistence.pk.TvIncomeDetailReportCheckPK ;


/**
 * <p>Title: DAO of table: TV_INCOME_DETAIL_REPORT_CHECK</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:02 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TvIncomeDetailReportCheckDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TV_INCOME_DETAIL_REPORT_CHECK ("
          + "S_ORGCODE,S_TRECODE,S_CREATDATE,F_AMT,N_MONEYDAY"
          + ",S_STATUS,S_DEMO,S_TREATTRIB,TS_SYSUPDATE,S_HOLD1"
          + ",S_HOLD2"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,CURRENT TIMESTAMP ,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_ORGCODE, TV_INCOME_DETAIL_REPORT_CHECK.S_TRECODE, TV_INCOME_DETAIL_REPORT_CHECK.S_CREATDATE, TV_INCOME_DETAIL_REPORT_CHECK.F_AMT, TV_INCOME_DETAIL_REPORT_CHECK.N_MONEYDAY, "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_STATUS, TV_INCOME_DETAIL_REPORT_CHECK.S_DEMO, TV_INCOME_DETAIL_REPORT_CHECK.S_TREATTRIB, TV_INCOME_DETAIL_REPORT_CHECK.TS_SYSUPDATE, TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD1, "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD2 "
        + "FROM TV_INCOME_DETAIL_REPORT_CHECK "
        +" WHERE " 
        + "S_TRECODE = ? AND S_CREATDATE = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_ORGCODE, TV_INCOME_DETAIL_REPORT_CHECK.S_TRECODE, TV_INCOME_DETAIL_REPORT_CHECK.S_CREATDATE, TV_INCOME_DETAIL_REPORT_CHECK.F_AMT, TV_INCOME_DETAIL_REPORT_CHECK.N_MONEYDAY, "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_STATUS, TV_INCOME_DETAIL_REPORT_CHECK.S_DEMO, TV_INCOME_DETAIL_REPORT_CHECK.S_TREATTRIB, TV_INCOME_DETAIL_REPORT_CHECK.TS_SYSUPDATE, TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD1, "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD2 "
        + "FROM TV_INCOME_DETAIL_REPORT_CHECK "
        +" WHERE " 
        + "S_TRECODE = ? AND S_CREATDATE = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TV_INCOME_DETAIL_REPORT_CHECK.S_ORGCODE  , TV_INCOME_DETAIL_REPORT_CHECK.S_TRECODE  , TV_INCOME_DETAIL_REPORT_CHECK.S_CREATDATE  , TV_INCOME_DETAIL_REPORT_CHECK.F_AMT  , TV_INCOME_DETAIL_REPORT_CHECK.N_MONEYDAY "
        + " , TV_INCOME_DETAIL_REPORT_CHECK.S_STATUS  , TV_INCOME_DETAIL_REPORT_CHECK.S_DEMO  , TV_INCOME_DETAIL_REPORT_CHECK.S_TREATTRIB  , TV_INCOME_DETAIL_REPORT_CHECK.TS_SYSUPDATE  , TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD1 "
        + " , TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD2 "
        + "FROM TV_INCOME_DETAIL_REPORT_CHECK ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_ORGCODE, TV_INCOME_DETAIL_REPORT_CHECK.S_TRECODE, TV_INCOME_DETAIL_REPORT_CHECK.S_CREATDATE, TV_INCOME_DETAIL_REPORT_CHECK.F_AMT, TV_INCOME_DETAIL_REPORT_CHECK.N_MONEYDAY, "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_STATUS, TV_INCOME_DETAIL_REPORT_CHECK.S_DEMO, TV_INCOME_DETAIL_REPORT_CHECK.S_TREATTRIB, TV_INCOME_DETAIL_REPORT_CHECK.TS_SYSUPDATE, TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD1, "
        + "TV_INCOME_DETAIL_REPORT_CHECK.S_HOLD2 "
        + "FROM TV_INCOME_DETAIL_REPORT_CHECK " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "S_TRECODE = ? AND S_CREATDATE = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TV_INCOME_DETAIL_REPORT_CHECK SET "
        + "S_ORGCODE =?,F_AMT =?,N_MONEYDAY =?,S_STATUS =?,S_DEMO =?, "
        + "S_TREATTRIB =?,TS_SYSUPDATE =CURRENT TIMESTAMP,S_HOLD1 =?,S_HOLD2 =? "
        + "WHERE "
        + "S_TRECODE = ? AND S_CREATDATE = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TV_INCOME_DETAIL_REPORT_CHECK SET "
        + "S_ORGCODE =?, F_AMT =?, N_MONEYDAY =?, S_STATUS =?, S_DEMO =?,  "
        + "S_TREATTRIB =?, TS_SYSUPDATE =CURRENT TIMESTAMP, S_HOLD1 =?, S_HOLD2 =? "
        + "WHERE "
        + "S_TRECODE = ? AND S_CREATDATE = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TV_INCOME_DETAIL_REPORT_CHECK " 
        + " WHERE "
        + "S_TRECODE = ? AND S_CREATDATE = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 2;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TvIncomeDetailReportCheckDto dto = (TvIncomeDetailReportCheckDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getSorgcode());

          ps.setString(2, dto.getStrecode());

          ps.setString(3, dto.getScreatdate());

          ps.setBigDecimal(4, dto.getFamt());

          ps.setBigDecimal(5, dto.getNmoneyday());

          ps.setString(6, dto.getSstatus());

          ps.setString(7, dto.getSdemo());

          ps.setString(8, dto.getStreattrib());

           ps.setString(9, dto.getShold1());

          ps.setString(10, dto.getShold2());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TvIncomeDetailReportCheckDto dto = (TvIncomeDetailReportCheckDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getSorgcode());
            ps.setString(2, dto.getStrecode());
            ps.setString(3, dto.getScreatdate());
            ps.setBigDecimal(4, dto.getFamt());
            ps.setBigDecimal(5, dto.getNmoneyday());
            ps.setString(6, dto.getSstatus());
            ps.setString(7, dto.getSdemo());
            ps.setString(8, dto.getStreattrib());
             ps.setString(9, dto.getShold1());
            ps.setString(10, dto.getShold2());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TvIncomeDetailReportCheckDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TvIncomeDetailReportCheckDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TvIncomeDetailReportCheckDto)_dtos[i] ; 
  
               ps.setString(1, dto.getSorgcode());
  
               ps.setString(2, dto.getStrecode());
  
               ps.setString(3, dto.getScreatdate());
  
               ps.setBigDecimal(4, dto.getFamt());
  
               ps.setBigDecimal(5, dto.getNmoneyday());
  
               ps.setString(6, dto.getSstatus());
  
               ps.setString(7, dto.getSdemo());
  
               ps.setString(8, dto.getStreattrib());
   
               ps.setString(9, dto.getShold1());
  
               ps.setString(10, dto.getShold2());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvIncomeDetailReportCheckPK pk = (TvIncomeDetailReportCheckPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           ps.setString(1, pk.getStrecode());

           ps.setString(2, pk.getScreatdate());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvIncomeDetailReportCheckPK pk = (TvIncomeDetailReportCheckPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           ps.setString(1, pk.getStrecode());

           ps.setString(2, pk.getScreatdate());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TvIncomeDetailReportCheckPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvIncomeDetailReportCheckPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TvIncomeDetailReportCheckPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*2+1, pk.getStrecode());

                   ps.setString((i-iBegin)*2+2, pk.getScreatdate());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TvIncomeDetailReportCheckDto[] dtos = new TvIncomeDetailReportCheckDto[0];
		    dtos = (TvIncomeDetailReportCheckDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TvIncomeDetailReportCheckDto  dto = new  TvIncomeDetailReportCheckDto ();
             //S_ORGCODE
             str = rs.getString("S_ORGCODE");
             if (str == null)
                dto.setSorgcode(null);
             else
                dto.setSorgcode(str.trim());

             //S_TRECODE
             str = rs.getString("S_TRECODE");
             if (str == null)
                dto.setStrecode(null);
             else
                dto.setStrecode(str.trim());

             //S_CREATDATE
             str = rs.getString("S_CREATDATE");
             if (str == null)
                dto.setScreatdate(null);
             else
                dto.setScreatdate(str.trim());

             //F_AMT
           dto.setFamt(rs.getBigDecimal("F_AMT"));

             //N_MONEYDAY
           dto.setNmoneyday(rs.getBigDecimal("N_MONEYDAY"));

             //S_STATUS
             str = rs.getString("S_STATUS");
             if (str == null)
                dto.setSstatus(null);
             else
                dto.setSstatus(str.trim());

             //S_DEMO
             str = rs.getString("S_DEMO");
             if (str == null)
                dto.setSdemo(null);
             else
                dto.setSdemo(str.trim());

             //S_TREATTRIB
             str = rs.getString("S_TREATTRIB");
             if (str == null)
                dto.setStreattrib(null);
             else
                dto.setStreattrib(str.trim());

             //TS_SYSUPDATE
           dto.setTssysupdate(rs.getTimestamp("TS_SYSUPDATE"));

             //S_HOLD1
             str = rs.getString("S_HOLD1");
             if (str == null)
                dto.setShold1(null);
             else
                dto.setShold1(str.trim());

             //S_HOLD2
             str = rs.getString("S_HOLD2");
             if (str == null)
                dto.setShold2(null);
             else
                dto.setShold2(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TvIncomeDetailReportCheckDto dto = (TvIncomeDetailReportCheckDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_ORGCODE
            ps.setString(pos, dto.getSorgcode());
            pos++;

            //F_AMT
            ps.setBigDecimal(pos, dto.getFamt());
            pos++;

            //N_MONEYDAY
            ps.setBigDecimal(pos, dto.getNmoneyday());
            pos++;

            //S_STATUS
            ps.setString(pos, dto.getSstatus());
            pos++;

            //S_DEMO
            ps.setString(pos, dto.getSdemo());
            pos++;

            //S_TREATTRIB
            ps.setString(pos, dto.getStreattrib());
            pos++;

            //TS_SYSUPDATE
            //S_HOLD1
            ps.setString(pos, dto.getShold1());
            pos++;

            //S_HOLD2
            ps.setString(pos, dto.getShold2());
            pos++;


           //S_TRECODE
           ps.setString(pos, dto.getStrecode());
           pos++;
           //S_CREATDATE
           ps.setString(pos, dto.getScreatdate());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TvIncomeDetailReportCheckDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TvIncomeDetailReportCheckDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TvIncomeDetailReportCheckDto)_dtos[i] ; 
                int pos = 1;
                //S_ORGCODE
                 ps.setString(pos, dto.getSorgcode());
                pos++;

                //F_AMT
                 ps.setBigDecimal(pos, dto.getFamt());
                pos++;

                //N_MONEYDAY
                 ps.setBigDecimal(pos, dto.getNmoneyday());
                pos++;

                //S_STATUS
                 ps.setString(pos, dto.getSstatus());
                pos++;

                //S_DEMO
                 ps.setString(pos, dto.getSdemo());
                pos++;

                //S_TREATTRIB
                 ps.setString(pos, dto.getStreattrib());
                pos++;

                //TS_SYSUPDATE
                 //S_HOLD1
                 ps.setString(pos, dto.getShold1());
                pos++;

                //S_HOLD2
                 ps.setString(pos, dto.getShold2());
                pos++;


               //S_TRECODE
               ps.setString(pos, dto.getStrecode());
               pos++;
               //S_CREATDATE
               ps.setString(pos, dto.getScreatdate());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TvIncomeDetailReportCheckPK pk = (TvIncomeDetailReportCheckPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setString(1, pk.getStrecode());
           ps.setString(2, pk.getScreatdate());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TvIncomeDetailReportCheckPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvIncomeDetailReportCheckPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TvIncomeDetailReportCheckPK)(pks.get(i)) ; 
                ps.setString(1, pk.getStrecode());
                ps.setString(2, pk.getScreatdate());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                           		throw new SQLException("数据库表：TV_INCOME_DETAIL_REPORT_CHECK没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
