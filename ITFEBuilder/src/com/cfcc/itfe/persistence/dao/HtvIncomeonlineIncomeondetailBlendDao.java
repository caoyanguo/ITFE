    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.HtvIncomeonlineIncomeondetailBlendDto ;
import com.cfcc.itfe.persistence.pk.HtvIncomeonlineIncomeondetailBlendPK ;


/**
 * <p>Title: DAO of table: HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND</p>
 * <p>Description:电子税票入库流水勾兑表 Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:56 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class HtvIncomeonlineIncomeondetailBlendDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND ("
          + "S_SEQ,S_FINORGCODE,S_APPLYDATE,S_INTREDATE,S_BLEND"
          + ",S_PACKNO,S_TRECODE,S_TRENAME,S_TAXORGCODE,S_PAYBNKNO"
          + ",S_TRANO,S_ORIMSGNO,F_TRAAMT,F_AMT,S_PAYEROPNBNKNO"
          + ",S_PAYEROPBKNAME,S_HANDORGNAME,S_PAYACCT,S_TAXVOUNO,S_BILLDATE"
          + ",S_TAXPAYCODE,S_TAXPAYNAME,S_BUDGETTYPE,S_TRIMFLAG,S_ETPCODE"
          + ",S_ETPNAME,S_ETPTYPE,S_BDGSBTCODE,S_BDGSBTNAME,S_LIMIT"
          + ",S_TAXTYPECODE,S_TAXKINDNAME,S_BDGLEVEL,S_BDGLEVELNAME,S_TAXSTARTDATE"
          + ",S_TAXENDDATE,S_ASTFLAG,S_TAXTYPE,S_ACCT,S_TRASTATE"
          + ",S_INPUTERID,TS_SYSUPDATE,S_VOUCHANNEL,S_STATUS,S_REMARK"
          + ",S_REMARK1,S_REMARK2,S_REMARK3,S_REMARK4,S_REMARK5"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,CURRENT TIMESTAMP ,?,?,?,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_SEQ, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_FINORGCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_APPLYDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INTREDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BLEND, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PACKNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRECODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRENAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXORGCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYBNKNO, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRANO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ORIMSGNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_TRAAMT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_AMT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPNBNKNO, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPBKNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_HANDORGNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYACCT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXVOUNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BILLDATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BUDGETTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRIMFLAG, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPCODE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_LIMIT, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPECODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXKINDNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVEL, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVELNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXSTARTDATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXENDDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ASTFLAG, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ACCT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRASTATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INPUTERID, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.TS_SYSUPDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_VOUCHANNEL, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_STATUS, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK1, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK2, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK3, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK4, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK5 "
        + "FROM HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND "
        +" WHERE " 
        + "S_SEQ = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_SEQ, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_FINORGCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_APPLYDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INTREDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BLEND, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PACKNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRECODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRENAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXORGCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYBNKNO, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRANO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ORIMSGNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_TRAAMT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_AMT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPNBNKNO, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPBKNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_HANDORGNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYACCT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXVOUNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BILLDATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BUDGETTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRIMFLAG, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPCODE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_LIMIT, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPECODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXKINDNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVEL, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVELNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXSTARTDATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXENDDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ASTFLAG, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ACCT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRASTATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INPUTERID, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.TS_SYSUPDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_VOUCHANNEL, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_STATUS, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK1, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK2, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK3, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK4, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK5 "
        + "FROM HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND "
        +" WHERE " 
        + "S_SEQ = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_SEQ  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_FINORGCODE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_APPLYDATE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INTREDATE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BLEND "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PACKNO  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRECODE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRENAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXORGCODE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYBNKNO "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRANO  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ORIMSGNO  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_TRAAMT  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_AMT  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPNBNKNO "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPBKNAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_HANDORGNAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYACCT  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXVOUNO  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BILLDATE "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYCODE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYNAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BUDGETTYPE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRIMFLAG  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPCODE "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPNAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPTYPE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTCODE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTNAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_LIMIT "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPECODE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXKINDNAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVEL  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVELNAME  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXSTARTDATE "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXENDDATE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ASTFLAG  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ACCT  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRASTATE "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INPUTERID  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.TS_SYSUPDATE  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_VOUCHANNEL  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_STATUS  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK "
        + " , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK1  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK2  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK3  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK4  , HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK5 "
        + "FROM HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_SEQ, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_FINORGCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_APPLYDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INTREDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BLEND, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PACKNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRECODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRENAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXORGCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYBNKNO, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRANO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ORIMSGNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_TRAAMT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.F_AMT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPNBNKNO, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYEROPBKNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_HANDORGNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_PAYACCT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXVOUNO, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BILLDATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXPAYNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BUDGETTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRIMFLAG, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPCODE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ETPTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTCODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGSBTNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_LIMIT, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPECODE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXKINDNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVEL, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_BDGLEVELNAME, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXSTARTDATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXENDDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ASTFLAG, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TAXTYPE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_ACCT, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_TRASTATE, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_INPUTERID, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.TS_SYSUPDATE, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_VOUCHANNEL, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_STATUS, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK, "
        + "HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK1, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK2, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK3, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK4, HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND.S_REMARK5 "
        + "FROM HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "S_SEQ = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND SET "
        + "S_FINORGCODE =?,S_APPLYDATE =?,S_INTREDATE =?,S_BLEND =?,S_PACKNO =?, "
        + "S_TRECODE =?,S_TRENAME =?,S_TAXORGCODE =?,S_PAYBNKNO =?,S_TRANO =?, "
        + "S_ORIMSGNO =?,F_TRAAMT =?,F_AMT =?,S_PAYEROPNBNKNO =?,S_PAYEROPBKNAME =?, "
        + "S_HANDORGNAME =?,S_PAYACCT =?,S_TAXVOUNO =?,S_BILLDATE =?,S_TAXPAYCODE =?, "
        + "S_TAXPAYNAME =?,S_BUDGETTYPE =?,S_TRIMFLAG =?,S_ETPCODE =?,S_ETPNAME =?, "
        + "S_ETPTYPE =?,S_BDGSBTCODE =?,S_BDGSBTNAME =?,S_LIMIT =?,S_TAXTYPECODE =?, "
        + "S_TAXKINDNAME =?,S_BDGLEVEL =?,S_BDGLEVELNAME =?,S_TAXSTARTDATE =?,S_TAXENDDATE =?, "
        + "S_ASTFLAG =?,S_TAXTYPE =?,S_ACCT =?,S_TRASTATE =?,S_INPUTERID =?, "
        + "TS_SYSUPDATE =CURRENT TIMESTAMP,S_VOUCHANNEL =?,S_STATUS =?,S_REMARK =?,S_REMARK1 =?, "
        + "S_REMARK2 =?,S_REMARK3 =?,S_REMARK4 =?,S_REMARK5 =? "
        + "WHERE "
        + "S_SEQ = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND SET "
        + "S_FINORGCODE =?, S_APPLYDATE =?, S_INTREDATE =?, S_BLEND =?, S_PACKNO =?,  "
        + "S_TRECODE =?, S_TRENAME =?, S_TAXORGCODE =?, S_PAYBNKNO =?, S_TRANO =?,  "
        + "S_ORIMSGNO =?, F_TRAAMT =?, F_AMT =?, S_PAYEROPNBNKNO =?, S_PAYEROPBKNAME =?,  "
        + "S_HANDORGNAME =?, S_PAYACCT =?, S_TAXVOUNO =?, S_BILLDATE =?, S_TAXPAYCODE =?,  "
        + "S_TAXPAYNAME =?, S_BUDGETTYPE =?, S_TRIMFLAG =?, S_ETPCODE =?, S_ETPNAME =?,  "
        + "S_ETPTYPE =?, S_BDGSBTCODE =?, S_BDGSBTNAME =?, S_LIMIT =?, S_TAXTYPECODE =?,  "
        + "S_TAXKINDNAME =?, S_BDGLEVEL =?, S_BDGLEVELNAME =?, S_TAXSTARTDATE =?, S_TAXENDDATE =?,  "
        + "S_ASTFLAG =?, S_TAXTYPE =?, S_ACCT =?, S_TRASTATE =?, S_INPUTERID =?,  "
        + "TS_SYSUPDATE =CURRENT TIMESTAMP, S_VOUCHANNEL =?, S_STATUS =?, S_REMARK =?, S_REMARK1 =?,  "
        + "S_REMARK2 =?, S_REMARK3 =?, S_REMARK4 =?, S_REMARK5 =? "
        + "WHERE "
        + "S_SEQ = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND " 
        + " WHERE "
        + "S_SEQ = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     HtvIncomeonlineIncomeondetailBlendDto dto = (HtvIncomeonlineIncomeondetailBlendDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getSseq());

          ps.setString(2, dto.getSfinorgcode());

          ps.setString(3, dto.getSapplydate());

          ps.setString(4, dto.getSintredate());

          ps.setString(5, dto.getSblend());

          ps.setString(6, dto.getSpackno());

          ps.setString(7, dto.getStrecode());

          ps.setString(8, dto.getStrename());

          ps.setString(9, dto.getStaxorgcode());

          ps.setString(10, dto.getSpaybnkno());

          ps.setString(11, dto.getStrano());

          ps.setString(12, dto.getSorimsgno());

          ps.setBigDecimal(13, dto.getFtraamt());

          ps.setBigDecimal(14, dto.getFamt());

          ps.setString(15, dto.getSpayeropnbnkno());

          ps.setString(16, dto.getSpayeropbkname());

          ps.setString(17, dto.getShandorgname());

          ps.setString(18, dto.getSpayacct());

          ps.setString(19, dto.getStaxvouno());

          ps.setString(20, dto.getSbilldate());

          ps.setString(21, dto.getStaxpaycode());

          ps.setString(22, dto.getStaxpayname());

          ps.setString(23, dto.getSbudgettype());

          ps.setString(24, dto.getStrimflag());

          ps.setString(25, dto.getSetpcode());

          ps.setString(26, dto.getSetpname());

          ps.setString(27, dto.getSetptype());

          ps.setString(28, dto.getSbdgsbtcode());

          ps.setString(29, dto.getSbdgsbtname());

          ps.setString(30, dto.getSlimit());

          ps.setString(31, dto.getStaxtypecode());

          ps.setString(32, dto.getStaxkindname());

          ps.setString(33, dto.getSbdglevel());

          ps.setString(34, dto.getSbdglevelname());

          ps.setString(35, dto.getStaxstartdate());

          ps.setString(36, dto.getStaxenddate());

          ps.setString(37, dto.getSastflag());

          ps.setString(38, dto.getStaxtype());

          ps.setString(39, dto.getSacct());

          ps.setString(40, dto.getStrastate());

          ps.setString(41, dto.getSinputerid());

           ps.setString(42, dto.getSvouchannel());

          ps.setString(43, dto.getSstatus());

          ps.setString(44, dto.getSremark());

          ps.setString(45, dto.getSremark1());

          ps.setString(46, dto.getSremark2());

          ps.setString(47, dto.getSremark3());

          ps.setString(48, dto.getSremark4());

          ps.setString(49, dto.getSremark5());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       HtvIncomeonlineIncomeondetailBlendDto dto = (HtvIncomeonlineIncomeondetailBlendDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getSseq());
            ps.setString(2, dto.getSfinorgcode());
            ps.setString(3, dto.getSapplydate());
            ps.setString(4, dto.getSintredate());
            ps.setString(5, dto.getSblend());
            ps.setString(6, dto.getSpackno());
            ps.setString(7, dto.getStrecode());
            ps.setString(8, dto.getStrename());
            ps.setString(9, dto.getStaxorgcode());
            ps.setString(10, dto.getSpaybnkno());
            ps.setString(11, dto.getStrano());
            ps.setString(12, dto.getSorimsgno());
            ps.setBigDecimal(13, dto.getFtraamt());
            ps.setBigDecimal(14, dto.getFamt());
            ps.setString(15, dto.getSpayeropnbnkno());
            ps.setString(16, dto.getSpayeropbkname());
            ps.setString(17, dto.getShandorgname());
            ps.setString(18, dto.getSpayacct());
            ps.setString(19, dto.getStaxvouno());
            ps.setString(20, dto.getSbilldate());
            ps.setString(21, dto.getStaxpaycode());
            ps.setString(22, dto.getStaxpayname());
            ps.setString(23, dto.getSbudgettype());
            ps.setString(24, dto.getStrimflag());
            ps.setString(25, dto.getSetpcode());
            ps.setString(26, dto.getSetpname());
            ps.setString(27, dto.getSetptype());
            ps.setString(28, dto.getSbdgsbtcode());
            ps.setString(29, dto.getSbdgsbtname());
            ps.setString(30, dto.getSlimit());
            ps.setString(31, dto.getStaxtypecode());
            ps.setString(32, dto.getStaxkindname());
            ps.setString(33, dto.getSbdglevel());
            ps.setString(34, dto.getSbdglevelname());
            ps.setString(35, dto.getStaxstartdate());
            ps.setString(36, dto.getStaxenddate());
            ps.setString(37, dto.getSastflag());
            ps.setString(38, dto.getStaxtype());
            ps.setString(39, dto.getSacct());
            ps.setString(40, dto.getStrastate());
            ps.setString(41, dto.getSinputerid());
             ps.setString(42, dto.getSvouchannel());
            ps.setString(43, dto.getSstatus());
            ps.setString(44, dto.getSremark());
            ps.setString(45, dto.getSremark1());
            ps.setString(46, dto.getSremark2());
            ps.setString(47, dto.getSremark3());
            ps.setString(48, dto.getSremark4());
            ps.setString(49, dto.getSremark5());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        HtvIncomeonlineIncomeondetailBlendDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (HtvIncomeonlineIncomeondetailBlendDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (HtvIncomeonlineIncomeondetailBlendDto)_dtos[i] ; 
  
               ps.setString(1, dto.getSseq());
  
               ps.setString(2, dto.getSfinorgcode());
  
               ps.setString(3, dto.getSapplydate());
  
               ps.setString(4, dto.getSintredate());
  
               ps.setString(5, dto.getSblend());
  
               ps.setString(6, dto.getSpackno());
  
               ps.setString(7, dto.getStrecode());
  
               ps.setString(8, dto.getStrename());
  
               ps.setString(9, dto.getStaxorgcode());
  
               ps.setString(10, dto.getSpaybnkno());
  
               ps.setString(11, dto.getStrano());
  
               ps.setString(12, dto.getSorimsgno());
  
               ps.setBigDecimal(13, dto.getFtraamt());
  
               ps.setBigDecimal(14, dto.getFamt());
  
               ps.setString(15, dto.getSpayeropnbnkno());
  
               ps.setString(16, dto.getSpayeropbkname());
  
               ps.setString(17, dto.getShandorgname());
  
               ps.setString(18, dto.getSpayacct());
  
               ps.setString(19, dto.getStaxvouno());
  
               ps.setString(20, dto.getSbilldate());
  
               ps.setString(21, dto.getStaxpaycode());
  
               ps.setString(22, dto.getStaxpayname());
  
               ps.setString(23, dto.getSbudgettype());
  
               ps.setString(24, dto.getStrimflag());
  
               ps.setString(25, dto.getSetpcode());
  
               ps.setString(26, dto.getSetpname());
  
               ps.setString(27, dto.getSetptype());
  
               ps.setString(28, dto.getSbdgsbtcode());
  
               ps.setString(29, dto.getSbdgsbtname());
  
               ps.setString(30, dto.getSlimit());
  
               ps.setString(31, dto.getStaxtypecode());
  
               ps.setString(32, dto.getStaxkindname());
  
               ps.setString(33, dto.getSbdglevel());
  
               ps.setString(34, dto.getSbdglevelname());
  
               ps.setString(35, dto.getStaxstartdate());
  
               ps.setString(36, dto.getStaxenddate());
  
               ps.setString(37, dto.getSastflag());
  
               ps.setString(38, dto.getStaxtype());
  
               ps.setString(39, dto.getSacct());
  
               ps.setString(40, dto.getStrastate());
  
               ps.setString(41, dto.getSinputerid());
   
               ps.setString(42, dto.getSvouchannel());
  
               ps.setString(43, dto.getSstatus());
  
               ps.setString(44, dto.getSremark());
  
               ps.setString(45, dto.getSremark1());
  
               ps.setString(46, dto.getSremark2());
  
               ps.setString(47, dto.getSremark3());
  
               ps.setString(48, dto.getSremark4());
  
               ps.setString(49, dto.getSremark5());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       HtvIncomeonlineIncomeondetailBlendPK pk = (HtvIncomeonlineIncomeondetailBlendPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           ps.setString(1, pk.getSseq());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       HtvIncomeonlineIncomeondetailBlendPK pk = (HtvIncomeonlineIncomeondetailBlendPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           ps.setString(1, pk.getSseq());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        HtvIncomeonlineIncomeondetailBlendPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (HtvIncomeonlineIncomeondetailBlendPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (HtvIncomeonlineIncomeondetailBlendPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*1+1, pk.getSseq());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            HtvIncomeonlineIncomeondetailBlendDto[] dtos = new HtvIncomeonlineIncomeondetailBlendDto[0];
		    dtos = (HtvIncomeonlineIncomeondetailBlendDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             HtvIncomeonlineIncomeondetailBlendDto  dto = new  HtvIncomeonlineIncomeondetailBlendDto ();
             //S_SEQ
             str = rs.getString("S_SEQ");
             if (str == null)
                dto.setSseq(null);
             else
                dto.setSseq(str.trim());

             //S_FINORGCODE
             str = rs.getString("S_FINORGCODE");
             if (str == null)
                dto.setSfinorgcode(null);
             else
                dto.setSfinorgcode(str.trim());

             //S_APPLYDATE
             str = rs.getString("S_APPLYDATE");
             if (str == null)
                dto.setSapplydate(null);
             else
                dto.setSapplydate(str.trim());

             //S_INTREDATE
             str = rs.getString("S_INTREDATE");
             if (str == null)
                dto.setSintredate(null);
             else
                dto.setSintredate(str.trim());

             //S_BLEND
             str = rs.getString("S_BLEND");
             if (str == null)
                dto.setSblend(null);
             else
                dto.setSblend(str.trim());

             //S_PACKNO
             str = rs.getString("S_PACKNO");
             if (str == null)
                dto.setSpackno(null);
             else
                dto.setSpackno(str.trim());

             //S_TRECODE
             str = rs.getString("S_TRECODE");
             if (str == null)
                dto.setStrecode(null);
             else
                dto.setStrecode(str.trim());

             //S_TRENAME
             str = rs.getString("S_TRENAME");
             if (str == null)
                dto.setStrename(null);
             else
                dto.setStrename(str.trim());

             //S_TAXORGCODE
             str = rs.getString("S_TAXORGCODE");
             if (str == null)
                dto.setStaxorgcode(null);
             else
                dto.setStaxorgcode(str.trim());

             //S_PAYBNKNO
             str = rs.getString("S_PAYBNKNO");
             if (str == null)
                dto.setSpaybnkno(null);
             else
                dto.setSpaybnkno(str.trim());

             //S_TRANO
             str = rs.getString("S_TRANO");
             if (str == null)
                dto.setStrano(null);
             else
                dto.setStrano(str.trim());

             //S_ORIMSGNO
             str = rs.getString("S_ORIMSGNO");
             if (str == null)
                dto.setSorimsgno(null);
             else
                dto.setSorimsgno(str.trim());

             //F_TRAAMT
           dto.setFtraamt(rs.getBigDecimal("F_TRAAMT"));

             //F_AMT
           dto.setFamt(rs.getBigDecimal("F_AMT"));

             //S_PAYEROPNBNKNO
             str = rs.getString("S_PAYEROPNBNKNO");
             if (str == null)
                dto.setSpayeropnbnkno(null);
             else
                dto.setSpayeropnbnkno(str.trim());

             //S_PAYEROPBKNAME
             str = rs.getString("S_PAYEROPBKNAME");
             if (str == null)
                dto.setSpayeropbkname(null);
             else
                dto.setSpayeropbkname(str.trim());

             //S_HANDORGNAME
             str = rs.getString("S_HANDORGNAME");
             if (str == null)
                dto.setShandorgname(null);
             else
                dto.setShandorgname(str.trim());

             //S_PAYACCT
             str = rs.getString("S_PAYACCT");
             if (str == null)
                dto.setSpayacct(null);
             else
                dto.setSpayacct(str.trim());

             //S_TAXVOUNO
             str = rs.getString("S_TAXVOUNO");
             if (str == null)
                dto.setStaxvouno(null);
             else
                dto.setStaxvouno(str.trim());

             //S_BILLDATE
             str = rs.getString("S_BILLDATE");
             if (str == null)
                dto.setSbilldate(null);
             else
                dto.setSbilldate(str.trim());

             //S_TAXPAYCODE
             str = rs.getString("S_TAXPAYCODE");
             if (str == null)
                dto.setStaxpaycode(null);
             else
                dto.setStaxpaycode(str.trim());

             //S_TAXPAYNAME
             str = rs.getString("S_TAXPAYNAME");
             if (str == null)
                dto.setStaxpayname(null);
             else
                dto.setStaxpayname(str.trim());

             //S_BUDGETTYPE
             str = rs.getString("S_BUDGETTYPE");
             if (str == null)
                dto.setSbudgettype(null);
             else
                dto.setSbudgettype(str.trim());

             //S_TRIMFLAG
             str = rs.getString("S_TRIMFLAG");
             if (str == null)
                dto.setStrimflag(null);
             else
                dto.setStrimflag(str.trim());

             //S_ETPCODE
             str = rs.getString("S_ETPCODE");
             if (str == null)
                dto.setSetpcode(null);
             else
                dto.setSetpcode(str.trim());

             //S_ETPNAME
             str = rs.getString("S_ETPNAME");
             if (str == null)
                dto.setSetpname(null);
             else
                dto.setSetpname(str.trim());

             //S_ETPTYPE
             str = rs.getString("S_ETPTYPE");
             if (str == null)
                dto.setSetptype(null);
             else
                dto.setSetptype(str.trim());

             //S_BDGSBTCODE
             str = rs.getString("S_BDGSBTCODE");
             if (str == null)
                dto.setSbdgsbtcode(null);
             else
                dto.setSbdgsbtcode(str.trim());

             //S_BDGSBTNAME
             str = rs.getString("S_BDGSBTNAME");
             if (str == null)
                dto.setSbdgsbtname(null);
             else
                dto.setSbdgsbtname(str.trim());

             //S_LIMIT
             str = rs.getString("S_LIMIT");
             if (str == null)
                dto.setSlimit(null);
             else
                dto.setSlimit(str.trim());

             //S_TAXTYPECODE
             str = rs.getString("S_TAXTYPECODE");
             if (str == null)
                dto.setStaxtypecode(null);
             else
                dto.setStaxtypecode(str.trim());

             //S_TAXKINDNAME
             str = rs.getString("S_TAXKINDNAME");
             if (str == null)
                dto.setStaxkindname(null);
             else
                dto.setStaxkindname(str.trim());

             //S_BDGLEVEL
             str = rs.getString("S_BDGLEVEL");
             if (str == null)
                dto.setSbdglevel(null);
             else
                dto.setSbdglevel(str.trim());

             //S_BDGLEVELNAME
             str = rs.getString("S_BDGLEVELNAME");
             if (str == null)
                dto.setSbdglevelname(null);
             else
                dto.setSbdglevelname(str.trim());

             //S_TAXSTARTDATE
             str = rs.getString("S_TAXSTARTDATE");
             if (str == null)
                dto.setStaxstartdate(null);
             else
                dto.setStaxstartdate(str.trim());

             //S_TAXENDDATE
             str = rs.getString("S_TAXENDDATE");
             if (str == null)
                dto.setStaxenddate(null);
             else
                dto.setStaxenddate(str.trim());

             //S_ASTFLAG
             str = rs.getString("S_ASTFLAG");
             if (str == null)
                dto.setSastflag(null);
             else
                dto.setSastflag(str.trim());

             //S_TAXTYPE
             str = rs.getString("S_TAXTYPE");
             if (str == null)
                dto.setStaxtype(null);
             else
                dto.setStaxtype(str.trim());

             //S_ACCT
             str = rs.getString("S_ACCT");
             if (str == null)
                dto.setSacct(null);
             else
                dto.setSacct(str.trim());

             //S_TRASTATE
             str = rs.getString("S_TRASTATE");
             if (str == null)
                dto.setStrastate(null);
             else
                dto.setStrastate(str.trim());

             //S_INPUTERID
             str = rs.getString("S_INPUTERID");
             if (str == null)
                dto.setSinputerid(null);
             else
                dto.setSinputerid(str.trim());

             //TS_SYSUPDATE
           dto.setTssysupdate(rs.getTimestamp("TS_SYSUPDATE"));

             //S_VOUCHANNEL
             str = rs.getString("S_VOUCHANNEL");
             if (str == null)
                dto.setSvouchannel(null);
             else
                dto.setSvouchannel(str.trim());

             //S_STATUS
             str = rs.getString("S_STATUS");
             if (str == null)
                dto.setSstatus(null);
             else
                dto.setSstatus(str.trim());

             //S_REMARK
             str = rs.getString("S_REMARK");
             if (str == null)
                dto.setSremark(null);
             else
                dto.setSremark(str.trim());

             //S_REMARK1
             str = rs.getString("S_REMARK1");
             if (str == null)
                dto.setSremark1(null);
             else
                dto.setSremark1(str.trim());

             //S_REMARK2
             str = rs.getString("S_REMARK2");
             if (str == null)
                dto.setSremark2(null);
             else
                dto.setSremark2(str.trim());

             //S_REMARK3
             str = rs.getString("S_REMARK3");
             if (str == null)
                dto.setSremark3(null);
             else
                dto.setSremark3(str.trim());

             //S_REMARK4
             str = rs.getString("S_REMARK4");
             if (str == null)
                dto.setSremark4(null);
             else
                dto.setSremark4(str.trim());

             //S_REMARK5
             str = rs.getString("S_REMARK5");
             if (str == null)
                dto.setSremark5(null);
             else
                dto.setSremark5(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        HtvIncomeonlineIncomeondetailBlendDto dto = (HtvIncomeonlineIncomeondetailBlendDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_FINORGCODE
            ps.setString(pos, dto.getSfinorgcode());
            pos++;

            //S_APPLYDATE
            ps.setString(pos, dto.getSapplydate());
            pos++;

            //S_INTREDATE
            ps.setString(pos, dto.getSintredate());
            pos++;

            //S_BLEND
            ps.setString(pos, dto.getSblend());
            pos++;

            //S_PACKNO
            ps.setString(pos, dto.getSpackno());
            pos++;

            //S_TRECODE
            ps.setString(pos, dto.getStrecode());
            pos++;

            //S_TRENAME
            ps.setString(pos, dto.getStrename());
            pos++;

            //S_TAXORGCODE
            ps.setString(pos, dto.getStaxorgcode());
            pos++;

            //S_PAYBNKNO
            ps.setString(pos, dto.getSpaybnkno());
            pos++;

            //S_TRANO
            ps.setString(pos, dto.getStrano());
            pos++;

            //S_ORIMSGNO
            ps.setString(pos, dto.getSorimsgno());
            pos++;

            //F_TRAAMT
            ps.setBigDecimal(pos, dto.getFtraamt());
            pos++;

            //F_AMT
            ps.setBigDecimal(pos, dto.getFamt());
            pos++;

            //S_PAYEROPNBNKNO
            ps.setString(pos, dto.getSpayeropnbnkno());
            pos++;

            //S_PAYEROPBKNAME
            ps.setString(pos, dto.getSpayeropbkname());
            pos++;

            //S_HANDORGNAME
            ps.setString(pos, dto.getShandorgname());
            pos++;

            //S_PAYACCT
            ps.setString(pos, dto.getSpayacct());
            pos++;

            //S_TAXVOUNO
            ps.setString(pos, dto.getStaxvouno());
            pos++;

            //S_BILLDATE
            ps.setString(pos, dto.getSbilldate());
            pos++;

            //S_TAXPAYCODE
            ps.setString(pos, dto.getStaxpaycode());
            pos++;

            //S_TAXPAYNAME
            ps.setString(pos, dto.getStaxpayname());
            pos++;

            //S_BUDGETTYPE
            ps.setString(pos, dto.getSbudgettype());
            pos++;

            //S_TRIMFLAG
            ps.setString(pos, dto.getStrimflag());
            pos++;

            //S_ETPCODE
            ps.setString(pos, dto.getSetpcode());
            pos++;

            //S_ETPNAME
            ps.setString(pos, dto.getSetpname());
            pos++;

            //S_ETPTYPE
            ps.setString(pos, dto.getSetptype());
            pos++;

            //S_BDGSBTCODE
            ps.setString(pos, dto.getSbdgsbtcode());
            pos++;

            //S_BDGSBTNAME
            ps.setString(pos, dto.getSbdgsbtname());
            pos++;

            //S_LIMIT
            ps.setString(pos, dto.getSlimit());
            pos++;

            //S_TAXTYPECODE
            ps.setString(pos, dto.getStaxtypecode());
            pos++;

            //S_TAXKINDNAME
            ps.setString(pos, dto.getStaxkindname());
            pos++;

            //S_BDGLEVEL
            ps.setString(pos, dto.getSbdglevel());
            pos++;

            //S_BDGLEVELNAME
            ps.setString(pos, dto.getSbdglevelname());
            pos++;

            //S_TAXSTARTDATE
            ps.setString(pos, dto.getStaxstartdate());
            pos++;

            //S_TAXENDDATE
            ps.setString(pos, dto.getStaxenddate());
            pos++;

            //S_ASTFLAG
            ps.setString(pos, dto.getSastflag());
            pos++;

            //S_TAXTYPE
            ps.setString(pos, dto.getStaxtype());
            pos++;

            //S_ACCT
            ps.setString(pos, dto.getSacct());
            pos++;

            //S_TRASTATE
            ps.setString(pos, dto.getStrastate());
            pos++;

            //S_INPUTERID
            ps.setString(pos, dto.getSinputerid());
            pos++;

            //TS_SYSUPDATE
            //S_VOUCHANNEL
            ps.setString(pos, dto.getSvouchannel());
            pos++;

            //S_STATUS
            ps.setString(pos, dto.getSstatus());
            pos++;

            //S_REMARK
            ps.setString(pos, dto.getSremark());
            pos++;

            //S_REMARK1
            ps.setString(pos, dto.getSremark1());
            pos++;

            //S_REMARK2
            ps.setString(pos, dto.getSremark2());
            pos++;

            //S_REMARK3
            ps.setString(pos, dto.getSremark3());
            pos++;

            //S_REMARK4
            ps.setString(pos, dto.getSremark4());
            pos++;

            //S_REMARK5
            ps.setString(pos, dto.getSremark5());
            pos++;


           //S_SEQ
           ps.setString(pos, dto.getSseq());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 HtvIncomeonlineIncomeondetailBlendDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (HtvIncomeonlineIncomeondetailBlendDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (HtvIncomeonlineIncomeondetailBlendDto)_dtos[i] ; 
                int pos = 1;
                //S_FINORGCODE
                 ps.setString(pos, dto.getSfinorgcode());
                pos++;

                //S_APPLYDATE
                 ps.setString(pos, dto.getSapplydate());
                pos++;

                //S_INTREDATE
                 ps.setString(pos, dto.getSintredate());
                pos++;

                //S_BLEND
                 ps.setString(pos, dto.getSblend());
                pos++;

                //S_PACKNO
                 ps.setString(pos, dto.getSpackno());
                pos++;

                //S_TRECODE
                 ps.setString(pos, dto.getStrecode());
                pos++;

                //S_TRENAME
                 ps.setString(pos, dto.getStrename());
                pos++;

                //S_TAXORGCODE
                 ps.setString(pos, dto.getStaxorgcode());
                pos++;

                //S_PAYBNKNO
                 ps.setString(pos, dto.getSpaybnkno());
                pos++;

                //S_TRANO
                 ps.setString(pos, dto.getStrano());
                pos++;

                //S_ORIMSGNO
                 ps.setString(pos, dto.getSorimsgno());
                pos++;

                //F_TRAAMT
                 ps.setBigDecimal(pos, dto.getFtraamt());
                pos++;

                //F_AMT
                 ps.setBigDecimal(pos, dto.getFamt());
                pos++;

                //S_PAYEROPNBNKNO
                 ps.setString(pos, dto.getSpayeropnbnkno());
                pos++;

                //S_PAYEROPBKNAME
                 ps.setString(pos, dto.getSpayeropbkname());
                pos++;

                //S_HANDORGNAME
                 ps.setString(pos, dto.getShandorgname());
                pos++;

                //S_PAYACCT
                 ps.setString(pos, dto.getSpayacct());
                pos++;

                //S_TAXVOUNO
                 ps.setString(pos, dto.getStaxvouno());
                pos++;

                //S_BILLDATE
                 ps.setString(pos, dto.getSbilldate());
                pos++;

                //S_TAXPAYCODE
                 ps.setString(pos, dto.getStaxpaycode());
                pos++;

                //S_TAXPAYNAME
                 ps.setString(pos, dto.getStaxpayname());
                pos++;

                //S_BUDGETTYPE
                 ps.setString(pos, dto.getSbudgettype());
                pos++;

                //S_TRIMFLAG
                 ps.setString(pos, dto.getStrimflag());
                pos++;

                //S_ETPCODE
                 ps.setString(pos, dto.getSetpcode());
                pos++;

                //S_ETPNAME
                 ps.setString(pos, dto.getSetpname());
                pos++;

                //S_ETPTYPE
                 ps.setString(pos, dto.getSetptype());
                pos++;

                //S_BDGSBTCODE
                 ps.setString(pos, dto.getSbdgsbtcode());
                pos++;

                //S_BDGSBTNAME
                 ps.setString(pos, dto.getSbdgsbtname());
                pos++;

                //S_LIMIT
                 ps.setString(pos, dto.getSlimit());
                pos++;

                //S_TAXTYPECODE
                 ps.setString(pos, dto.getStaxtypecode());
                pos++;

                //S_TAXKINDNAME
                 ps.setString(pos, dto.getStaxkindname());
                pos++;

                //S_BDGLEVEL
                 ps.setString(pos, dto.getSbdglevel());
                pos++;

                //S_BDGLEVELNAME
                 ps.setString(pos, dto.getSbdglevelname());
                pos++;

                //S_TAXSTARTDATE
                 ps.setString(pos, dto.getStaxstartdate());
                pos++;

                //S_TAXENDDATE
                 ps.setString(pos, dto.getStaxenddate());
                pos++;

                //S_ASTFLAG
                 ps.setString(pos, dto.getSastflag());
                pos++;

                //S_TAXTYPE
                 ps.setString(pos, dto.getStaxtype());
                pos++;

                //S_ACCT
                 ps.setString(pos, dto.getSacct());
                pos++;

                //S_TRASTATE
                 ps.setString(pos, dto.getStrastate());
                pos++;

                //S_INPUTERID
                 ps.setString(pos, dto.getSinputerid());
                pos++;

                //TS_SYSUPDATE
                 //S_VOUCHANNEL
                 ps.setString(pos, dto.getSvouchannel());
                pos++;

                //S_STATUS
                 ps.setString(pos, dto.getSstatus());
                pos++;

                //S_REMARK
                 ps.setString(pos, dto.getSremark());
                pos++;

                //S_REMARK1
                 ps.setString(pos, dto.getSremark1());
                pos++;

                //S_REMARK2
                 ps.setString(pos, dto.getSremark2());
                pos++;

                //S_REMARK3
                 ps.setString(pos, dto.getSremark3());
                pos++;

                //S_REMARK4
                 ps.setString(pos, dto.getSremark4());
                pos++;

                //S_REMARK5
                 ps.setString(pos, dto.getSremark5());
                pos++;


               //S_SEQ
               ps.setString(pos, dto.getSseq());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       HtvIncomeonlineIncomeondetailBlendPK pk = (HtvIncomeonlineIncomeondetailBlendPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setString(1, pk.getSseq());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        HtvIncomeonlineIncomeondetailBlendPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (HtvIncomeonlineIncomeondetailBlendPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (HtvIncomeonlineIncomeondetailBlendPK)(pks.get(i)) ; 
                ps.setString(1, pk.getSseq());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                                                                                   		throw new SQLException("数据库表：HTV_INCOMEONLINE_INCOMEONDETAIL_BLEND没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
