    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TvSendlogDto ;
import com.cfcc.itfe.persistence.pk.TvSendlogPK ;


/**
 * <p>Title: DAO of table: TV_SENDLOG</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:04 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TvSendlogDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TV_SENDLOG ("
          + "S_SENDNO,S_RECVNO,S_SENDORGCODE,S_DATE,S_OPERATIONTYPECODE"
          + ",S_RECVORGCODE,S_TITLE,S_SENDTIME,S_RETCODE,S_MSGFILEPATH"
          + ",I_COUNT,N_MONEY,S_USERCODE,S_DEMO,S_SEQ"
          + ",S_STATE,S_PACKNO,S_TRECODE,S_PAYEEBANKNO,S_BILLORG"
          + ",S_PAYOUTVOUTYPE,S_RETCODEDESC,S_PROCTIME,S_SENDDATE,S_IFSEND"
          + ",S_TURNSENDFLAG"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TV_SENDLOG.S_SENDNO, TV_SENDLOG.S_RECVNO, TV_SENDLOG.S_SENDORGCODE, TV_SENDLOG.S_DATE, TV_SENDLOG.S_OPERATIONTYPECODE, "
        + "TV_SENDLOG.S_RECVORGCODE, TV_SENDLOG.S_TITLE, TV_SENDLOG.S_SENDTIME, TV_SENDLOG.S_RETCODE, TV_SENDLOG.S_MSGFILEPATH, "
        + "TV_SENDLOG.I_COUNT, TV_SENDLOG.N_MONEY, TV_SENDLOG.S_USERCODE, TV_SENDLOG.S_DEMO, TV_SENDLOG.S_SEQ, "
        + "TV_SENDLOG.S_STATE, TV_SENDLOG.S_PACKNO, TV_SENDLOG.S_TRECODE, TV_SENDLOG.S_PAYEEBANKNO, TV_SENDLOG.S_BILLORG, "
        + "TV_SENDLOG.S_PAYOUTVOUTYPE, TV_SENDLOG.S_RETCODEDESC, TV_SENDLOG.S_PROCTIME, TV_SENDLOG.S_SENDDATE, TV_SENDLOG.S_IFSEND, "
        + "TV_SENDLOG.S_TURNSENDFLAG "
        + "FROM TV_SENDLOG "
        +" WHERE " 
        + "S_SENDNO = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TV_SENDLOG.S_SENDNO, TV_SENDLOG.S_RECVNO, TV_SENDLOG.S_SENDORGCODE, TV_SENDLOG.S_DATE, TV_SENDLOG.S_OPERATIONTYPECODE, "
        + "TV_SENDLOG.S_RECVORGCODE, TV_SENDLOG.S_TITLE, TV_SENDLOG.S_SENDTIME, TV_SENDLOG.S_RETCODE, TV_SENDLOG.S_MSGFILEPATH, "
        + "TV_SENDLOG.I_COUNT, TV_SENDLOG.N_MONEY, TV_SENDLOG.S_USERCODE, TV_SENDLOG.S_DEMO, TV_SENDLOG.S_SEQ, "
        + "TV_SENDLOG.S_STATE, TV_SENDLOG.S_PACKNO, TV_SENDLOG.S_TRECODE, TV_SENDLOG.S_PAYEEBANKNO, TV_SENDLOG.S_BILLORG, "
        + "TV_SENDLOG.S_PAYOUTVOUTYPE, TV_SENDLOG.S_RETCODEDESC, TV_SENDLOG.S_PROCTIME, TV_SENDLOG.S_SENDDATE, TV_SENDLOG.S_IFSEND, "
        + "TV_SENDLOG.S_TURNSENDFLAG "
        + "FROM TV_SENDLOG "
        +" WHERE " 
        + "S_SENDNO = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TV_SENDLOG.S_SENDNO  , TV_SENDLOG.S_RECVNO  , TV_SENDLOG.S_SENDORGCODE  , TV_SENDLOG.S_DATE  , TV_SENDLOG.S_OPERATIONTYPECODE "
        + " , TV_SENDLOG.S_RECVORGCODE  , TV_SENDLOG.S_TITLE  , TV_SENDLOG.S_SENDTIME  , TV_SENDLOG.S_RETCODE  , TV_SENDLOG.S_MSGFILEPATH "
        + " , TV_SENDLOG.I_COUNT  , TV_SENDLOG.N_MONEY  , TV_SENDLOG.S_USERCODE  , TV_SENDLOG.S_DEMO  , TV_SENDLOG.S_SEQ "
        + " , TV_SENDLOG.S_STATE  , TV_SENDLOG.S_PACKNO  , TV_SENDLOG.S_TRECODE  , TV_SENDLOG.S_PAYEEBANKNO  , TV_SENDLOG.S_BILLORG "
        + " , TV_SENDLOG.S_PAYOUTVOUTYPE  , TV_SENDLOG.S_RETCODEDESC  , TV_SENDLOG.S_PROCTIME  , TV_SENDLOG.S_SENDDATE  , TV_SENDLOG.S_IFSEND "
        + " , TV_SENDLOG.S_TURNSENDFLAG "
        + "FROM TV_SENDLOG ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TV_SENDLOG.S_SENDNO, TV_SENDLOG.S_RECVNO, TV_SENDLOG.S_SENDORGCODE, TV_SENDLOG.S_DATE, TV_SENDLOG.S_OPERATIONTYPECODE, "
        + "TV_SENDLOG.S_RECVORGCODE, TV_SENDLOG.S_TITLE, TV_SENDLOG.S_SENDTIME, TV_SENDLOG.S_RETCODE, TV_SENDLOG.S_MSGFILEPATH, "
        + "TV_SENDLOG.I_COUNT, TV_SENDLOG.N_MONEY, TV_SENDLOG.S_USERCODE, TV_SENDLOG.S_DEMO, TV_SENDLOG.S_SEQ, "
        + "TV_SENDLOG.S_STATE, TV_SENDLOG.S_PACKNO, TV_SENDLOG.S_TRECODE, TV_SENDLOG.S_PAYEEBANKNO, TV_SENDLOG.S_BILLORG, "
        + "TV_SENDLOG.S_PAYOUTVOUTYPE, TV_SENDLOG.S_RETCODEDESC, TV_SENDLOG.S_PROCTIME, TV_SENDLOG.S_SENDDATE, TV_SENDLOG.S_IFSEND, "
        + "TV_SENDLOG.S_TURNSENDFLAG "
        + "FROM TV_SENDLOG " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "S_SENDNO = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TV_SENDLOG SET "
        + "S_RECVNO =?,S_SENDORGCODE =?,S_DATE =?,S_OPERATIONTYPECODE =?,S_RECVORGCODE =?, "
        + "S_TITLE =?,S_SENDTIME =?,S_RETCODE =?,S_MSGFILEPATH =?,I_COUNT =?, "
        + "N_MONEY =?,S_USERCODE =?,S_DEMO =?,S_SEQ =?,S_STATE =?, "
        + "S_PACKNO =?,S_TRECODE =?,S_PAYEEBANKNO =?,S_BILLORG =?,S_PAYOUTVOUTYPE =?, "
        + "S_RETCODEDESC =?,S_PROCTIME =?,S_SENDDATE =?,S_IFSEND =?,S_TURNSENDFLAG =? "
        + "WHERE "
        + "S_SENDNO = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TV_SENDLOG SET "
        + "S_RECVNO =?, S_SENDORGCODE =?, S_DATE =?, S_OPERATIONTYPECODE =?, S_RECVORGCODE =?,  "
        + "S_TITLE =?, S_SENDTIME =?, S_RETCODE =?, S_MSGFILEPATH =?, I_COUNT =?,  "
        + "N_MONEY =?, S_USERCODE =?, S_DEMO =?, S_SEQ =?, S_STATE =?,  "
        + "S_PACKNO =?, S_TRECODE =?, S_PAYEEBANKNO =?, S_BILLORG =?, S_PAYOUTVOUTYPE =?,  "
        + "S_RETCODEDESC =?, S_PROCTIME =?, S_SENDDATE =?, S_IFSEND =?, S_TURNSENDFLAG =? "
        + "WHERE "
        + "S_SENDNO = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TV_SENDLOG " 
        + " WHERE "
        + "S_SENDNO = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TvSendlogDto dto = (TvSendlogDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getSsendno());

          ps.setString(2, dto.getSrecvno());

          ps.setString(3, dto.getSsendorgcode());

          ps.setString(4, dto.getSdate());

          ps.setString(5, dto.getSoperationtypecode());

          ps.setString(6, dto.getSrecvorgcode());

          ps.setString(7, dto.getStitle());

          ps.setTimestamp(8, dto.getSsendtime());

          ps.setString(9, dto.getSretcode());

          ps.setString(10, dto.getSmsgfilepath());

          if (dto.getIcount()==null)
            ps.setNull(11, java.sql.Types.INTEGER);
         else
            ps.setInt(11, dto.getIcount().intValue());
          ps.setBigDecimal(12, dto.getNmoney());

          ps.setString(13, dto.getSusercode());

          ps.setString(14, dto.getSdemo());

          ps.setString(15, dto.getSseq());

          ps.setString(16, dto.getSstate());

          ps.setString(17, dto.getSpackno());

          ps.setString(18, dto.getStrecode());

          ps.setString(19, dto.getSpayeebankno());

          ps.setString(20, dto.getSbillorg());

          ps.setString(21, dto.getSpayoutvoutype());

          ps.setString(22, dto.getSretcodedesc());

          ps.setTimestamp(23, dto.getSproctime());

          ps.setString(24, dto.getSsenddate());

          ps.setString(25, dto.getSifsend());

          ps.setString(26, dto.getSturnsendflag());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TvSendlogDto dto = (TvSendlogDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getSsendno());
            ps.setString(2, dto.getSrecvno());
            ps.setString(3, dto.getSsendorgcode());
            ps.setString(4, dto.getSdate());
            ps.setString(5, dto.getSoperationtypecode());
            ps.setString(6, dto.getSrecvorgcode());
            ps.setString(7, dto.getStitle());
            ps.setTimestamp(8, dto.getSsendtime());
            ps.setString(9, dto.getSretcode());
            ps.setString(10, dto.getSmsgfilepath());
            if (dto.getIcount()==null)
              ps.setNull(11, java.sql.Types.INTEGER);
           else
              ps.setInt(11, dto.getIcount().intValue());
            ps.setBigDecimal(12, dto.getNmoney());
            ps.setString(13, dto.getSusercode());
            ps.setString(14, dto.getSdemo());
            ps.setString(15, dto.getSseq());
            ps.setString(16, dto.getSstate());
            ps.setString(17, dto.getSpackno());
            ps.setString(18, dto.getStrecode());
            ps.setString(19, dto.getSpayeebankno());
            ps.setString(20, dto.getSbillorg());
            ps.setString(21, dto.getSpayoutvoutype());
            ps.setString(22, dto.getSretcodedesc());
            ps.setTimestamp(23, dto.getSproctime());
            ps.setString(24, dto.getSsenddate());
            ps.setString(25, dto.getSifsend());
            ps.setString(26, dto.getSturnsendflag());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TvSendlogDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TvSendlogDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TvSendlogDto)_dtos[i] ; 
  
               ps.setString(1, dto.getSsendno());
  
               ps.setString(2, dto.getSrecvno());
  
               ps.setString(3, dto.getSsendorgcode());
  
               ps.setString(4, dto.getSdate());
  
               ps.setString(5, dto.getSoperationtypecode());
  
               ps.setString(6, dto.getSrecvorgcode());
  
               ps.setString(7, dto.getStitle());
  
               ps.setTimestamp(8, dto.getSsendtime());
  
               ps.setString(9, dto.getSretcode());
  
               ps.setString(10, dto.getSmsgfilepath());
  
               if (dto.getIcount()==null)
                  ps.setNull(11, java.sql.Types.INTEGER);
               else
                  ps.setInt(11, dto.getIcount().intValue());
  
               ps.setBigDecimal(12, dto.getNmoney());
  
               ps.setString(13, dto.getSusercode());
  
               ps.setString(14, dto.getSdemo());
  
               ps.setString(15, dto.getSseq());
  
               ps.setString(16, dto.getSstate());
  
               ps.setString(17, dto.getSpackno());
  
               ps.setString(18, dto.getStrecode());
  
               ps.setString(19, dto.getSpayeebankno());
  
               ps.setString(20, dto.getSbillorg());
  
               ps.setString(21, dto.getSpayoutvoutype());
  
               ps.setString(22, dto.getSretcodedesc());
  
               ps.setTimestamp(23, dto.getSproctime());
  
               ps.setString(24, dto.getSsenddate());
  
               ps.setString(25, dto.getSifsend());
  
               ps.setString(26, dto.getSturnsendflag());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvSendlogPK pk = (TvSendlogPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           ps.setString(1, pk.getSsendno());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvSendlogPK pk = (TvSendlogPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           ps.setString(1, pk.getSsendno());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TvSendlogPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvSendlogPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TvSendlogPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*1+1, pk.getSsendno());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TvSendlogDto[] dtos = new TvSendlogDto[0];
		    dtos = (TvSendlogDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TvSendlogDto  dto = new  TvSendlogDto ();
             //S_SENDNO
             str = rs.getString("S_SENDNO");
             if (str == null)
                dto.setSsendno(null);
             else
                dto.setSsendno(str.trim());

             //S_RECVNO
             str = rs.getString("S_RECVNO");
             if (str == null)
                dto.setSrecvno(null);
             else
                dto.setSrecvno(str.trim());

             //S_SENDORGCODE
             str = rs.getString("S_SENDORGCODE");
             if (str == null)
                dto.setSsendorgcode(null);
             else
                dto.setSsendorgcode(str.trim());

             //S_DATE
             str = rs.getString("S_DATE");
             if (str == null)
                dto.setSdate(null);
             else
                dto.setSdate(str.trim());

             //S_OPERATIONTYPECODE
             str = rs.getString("S_OPERATIONTYPECODE");
             if (str == null)
                dto.setSoperationtypecode(null);
             else
                dto.setSoperationtypecode(str.trim());

             //S_RECVORGCODE
             str = rs.getString("S_RECVORGCODE");
             if (str == null)
                dto.setSrecvorgcode(null);
             else
                dto.setSrecvorgcode(str.trim());

             //S_TITLE
             str = rs.getString("S_TITLE");
             if (str == null)
                dto.setStitle(null);
             else
                dto.setStitle(str.trim());

             //S_SENDTIME
           dto.setSsendtime(rs.getTimestamp("S_SENDTIME"));

             //S_RETCODE
             str = rs.getString("S_RETCODE");
             if (str == null)
                dto.setSretcode(null);
             else
                dto.setSretcode(str.trim());

             //S_MSGFILEPATH
             str = rs.getString("S_MSGFILEPATH");
             if (str == null)
                dto.setSmsgfilepath(null);
             else
                dto.setSmsgfilepath(str.trim());

             //I_COUNT
             str = rs.getString("I_COUNT");
             if(str!=null){
                dto.setIcount(new Integer(str));
             }

             //N_MONEY
           dto.setNmoney(rs.getBigDecimal("N_MONEY"));

             //S_USERCODE
             str = rs.getString("S_USERCODE");
             if (str == null)
                dto.setSusercode(null);
             else
                dto.setSusercode(str.trim());

             //S_DEMO
             str = rs.getString("S_DEMO");
             if (str == null)
                dto.setSdemo(null);
             else
                dto.setSdemo(str.trim());

             //S_SEQ
             str = rs.getString("S_SEQ");
             if (str == null)
                dto.setSseq(null);
             else
                dto.setSseq(str.trim());

             //S_STATE
             str = rs.getString("S_STATE");
             if (str == null)
                dto.setSstate(null);
             else
                dto.setSstate(str.trim());

             //S_PACKNO
             str = rs.getString("S_PACKNO");
             if (str == null)
                dto.setSpackno(null);
             else
                dto.setSpackno(str.trim());

             //S_TRECODE
             str = rs.getString("S_TRECODE");
             if (str == null)
                dto.setStrecode(null);
             else
                dto.setStrecode(str.trim());

             //S_PAYEEBANKNO
             str = rs.getString("S_PAYEEBANKNO");
             if (str == null)
                dto.setSpayeebankno(null);
             else
                dto.setSpayeebankno(str.trim());

             //S_BILLORG
             str = rs.getString("S_BILLORG");
             if (str == null)
                dto.setSbillorg(null);
             else
                dto.setSbillorg(str.trim());

             //S_PAYOUTVOUTYPE
             str = rs.getString("S_PAYOUTVOUTYPE");
             if (str == null)
                dto.setSpayoutvoutype(null);
             else
                dto.setSpayoutvoutype(str.trim());

             //S_RETCODEDESC
             str = rs.getString("S_RETCODEDESC");
             if (str == null)
                dto.setSretcodedesc(null);
             else
                dto.setSretcodedesc(str.trim());

             //S_PROCTIME
           dto.setSproctime(rs.getTimestamp("S_PROCTIME"));

             //S_SENDDATE
             str = rs.getString("S_SENDDATE");
             if (str == null)
                dto.setSsenddate(null);
             else
                dto.setSsenddate(str.trim());

             //S_IFSEND
             str = rs.getString("S_IFSEND");
             if (str == null)
                dto.setSifsend(null);
             else
                dto.setSifsend(str.trim());

             //S_TURNSENDFLAG
             str = rs.getString("S_TURNSENDFLAG");
             if (str == null)
                dto.setSturnsendflag(null);
             else
                dto.setSturnsendflag(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TvSendlogDto dto = (TvSendlogDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_RECVNO
            ps.setString(pos, dto.getSrecvno());
            pos++;

            //S_SENDORGCODE
            ps.setString(pos, dto.getSsendorgcode());
            pos++;

            //S_DATE
            ps.setString(pos, dto.getSdate());
            pos++;

            //S_OPERATIONTYPECODE
            ps.setString(pos, dto.getSoperationtypecode());
            pos++;

            //S_RECVORGCODE
            ps.setString(pos, dto.getSrecvorgcode());
            pos++;

            //S_TITLE
            ps.setString(pos, dto.getStitle());
            pos++;

            //S_SENDTIME
            ps.setTimestamp(pos, dto.getSsendtime());
            pos++;

            //S_RETCODE
            ps.setString(pos, dto.getSretcode());
            pos++;

            //S_MSGFILEPATH
            ps.setString(pos, dto.getSmsgfilepath());
            pos++;

            //I_COUNT
            if (dto.getIcount()==null)
                ps.setNull(pos, java.sql.Types.INTEGER);
            else
                ps.setInt(pos, dto.getIcount().intValue());
            pos++;

            //N_MONEY
            ps.setBigDecimal(pos, dto.getNmoney());
            pos++;

            //S_USERCODE
            ps.setString(pos, dto.getSusercode());
            pos++;

            //S_DEMO
            ps.setString(pos, dto.getSdemo());
            pos++;

            //S_SEQ
            ps.setString(pos, dto.getSseq());
            pos++;

            //S_STATE
            ps.setString(pos, dto.getSstate());
            pos++;

            //S_PACKNO
            ps.setString(pos, dto.getSpackno());
            pos++;

            //S_TRECODE
            ps.setString(pos, dto.getStrecode());
            pos++;

            //S_PAYEEBANKNO
            ps.setString(pos, dto.getSpayeebankno());
            pos++;

            //S_BILLORG
            ps.setString(pos, dto.getSbillorg());
            pos++;

            //S_PAYOUTVOUTYPE
            ps.setString(pos, dto.getSpayoutvoutype());
            pos++;

            //S_RETCODEDESC
            ps.setString(pos, dto.getSretcodedesc());
            pos++;

            //S_PROCTIME
            ps.setTimestamp(pos, dto.getSproctime());
            pos++;

            //S_SENDDATE
            ps.setString(pos, dto.getSsenddate());
            pos++;

            //S_IFSEND
            ps.setString(pos, dto.getSifsend());
            pos++;

            //S_TURNSENDFLAG
            ps.setString(pos, dto.getSturnsendflag());
            pos++;


           //S_SENDNO
           ps.setString(pos, dto.getSsendno());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TvSendlogDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TvSendlogDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TvSendlogDto)_dtos[i] ; 
                int pos = 1;
                //S_RECVNO
                 ps.setString(pos, dto.getSrecvno());
                pos++;

                //S_SENDORGCODE
                 ps.setString(pos, dto.getSsendorgcode());
                pos++;

                //S_DATE
                 ps.setString(pos, dto.getSdate());
                pos++;

                //S_OPERATIONTYPECODE
                 ps.setString(pos, dto.getSoperationtypecode());
                pos++;

                //S_RECVORGCODE
                 ps.setString(pos, dto.getSrecvorgcode());
                pos++;

                //S_TITLE
                 ps.setString(pos, dto.getStitle());
                pos++;

                //S_SENDTIME
                 ps.setTimestamp(pos, dto.getSsendtime());
                pos++;

                //S_RETCODE
                 ps.setString(pos, dto.getSretcode());
                pos++;

                //S_MSGFILEPATH
                 ps.setString(pos, dto.getSmsgfilepath());
                pos++;

                //I_COUNT
                 if (dto.getIcount()==null)
                   ps.setNull(pos, java.sql.Types.INTEGER);
                else
                   ps.setInt(pos, dto.getIcount().intValue());
                pos++ ;

                //N_MONEY
                 ps.setBigDecimal(pos, dto.getNmoney());
                pos++;

                //S_USERCODE
                 ps.setString(pos, dto.getSusercode());
                pos++;

                //S_DEMO
                 ps.setString(pos, dto.getSdemo());
                pos++;

                //S_SEQ
                 ps.setString(pos, dto.getSseq());
                pos++;

                //S_STATE
                 ps.setString(pos, dto.getSstate());
                pos++;

                //S_PACKNO
                 ps.setString(pos, dto.getSpackno());
                pos++;

                //S_TRECODE
                 ps.setString(pos, dto.getStrecode());
                pos++;

                //S_PAYEEBANKNO
                 ps.setString(pos, dto.getSpayeebankno());
                pos++;

                //S_BILLORG
                 ps.setString(pos, dto.getSbillorg());
                pos++;

                //S_PAYOUTVOUTYPE
                 ps.setString(pos, dto.getSpayoutvoutype());
                pos++;

                //S_RETCODEDESC
                 ps.setString(pos, dto.getSretcodedesc());
                pos++;

                //S_PROCTIME
                 ps.setTimestamp(pos, dto.getSproctime());
                pos++;

                //S_SENDDATE
                 ps.setString(pos, dto.getSsenddate());
                pos++;

                //S_IFSEND
                 ps.setString(pos, dto.getSifsend());
                pos++;

                //S_TURNSENDFLAG
                 ps.setString(pos, dto.getSturnsendflag());
                pos++;


               //S_SENDNO
               ps.setString(pos, dto.getSsendno());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TvSendlogPK pk = (TvSendlogPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setString(1, pk.getSsendno());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TvSendlogPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvSendlogPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TvSendlogPK)(pks.get(i)) ; 
                ps.setString(1, pk.getSsendno());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                           		throw new SQLException("数据库表：TV_SENDLOG没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
