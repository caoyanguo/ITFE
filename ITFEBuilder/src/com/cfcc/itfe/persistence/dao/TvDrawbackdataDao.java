    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TvDrawbackdataDto ;
import com.cfcc.itfe.persistence.pk.TvDrawbackdataPK ;


/**
 * <p>Title: DAO of table: TV_DRAWBACKDATA</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:01 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TvDrawbackdataDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TV_DRAWBACKDATA ("
          + "S_SENDORGCODE,S_TAXORGCODE,S_COMMITDATE,S_DEALNO,S_VOUNO"
          + ",S_GENDATE,S_TRECODE,S_PAYEETAXPAYERCODE,S_PAYEEREGTYPE,S_PAYEENAME"
          + ",S_PAYEEBANKNO,S_PAYEEACCOUNT,N_MONEY,S_BUDGETSUBCODE,S_BUDGETLEVELCODE"
          + ",S_ORIGINTICKETNO,S_ORIGINTICKETDATE,S_BACKFLAG,S_BACKREASONFLAG,S_RECVFLAG"
          + ",S_CHECKFLAG,S_FILEBATCH,S_VERIFYFLAG,S_OUTFILENAME,S_ELECSIGN"
          + ",S_DEMO"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TV_DRAWBACKDATA.S_SENDORGCODE, TV_DRAWBACKDATA.S_TAXORGCODE, TV_DRAWBACKDATA.S_COMMITDATE, TV_DRAWBACKDATA.S_DEALNO, TV_DRAWBACKDATA.S_VOUNO, "
        + "TV_DRAWBACKDATA.S_GENDATE, TV_DRAWBACKDATA.S_TRECODE, TV_DRAWBACKDATA.S_PAYEETAXPAYERCODE, TV_DRAWBACKDATA.S_PAYEEREGTYPE, TV_DRAWBACKDATA.S_PAYEENAME, "
        + "TV_DRAWBACKDATA.S_PAYEEBANKNO, TV_DRAWBACKDATA.S_PAYEEACCOUNT, TV_DRAWBACKDATA.N_MONEY, TV_DRAWBACKDATA.S_BUDGETSUBCODE, TV_DRAWBACKDATA.S_BUDGETLEVELCODE, "
        + "TV_DRAWBACKDATA.S_ORIGINTICKETNO, TV_DRAWBACKDATA.S_ORIGINTICKETDATE, TV_DRAWBACKDATA.S_BACKFLAG, TV_DRAWBACKDATA.S_BACKREASONFLAG, TV_DRAWBACKDATA.S_RECVFLAG, "
        + "TV_DRAWBACKDATA.S_CHECKFLAG, TV_DRAWBACKDATA.S_FILEBATCH, TV_DRAWBACKDATA.S_VERIFYFLAG, TV_DRAWBACKDATA.S_OUTFILENAME, TV_DRAWBACKDATA.S_ELECSIGN, "
        + "TV_DRAWBACKDATA.S_DEMO "
        + "FROM TV_DRAWBACKDATA "
        +" WHERE " 
        + "S_SENDORGCODE = ? AND S_COMMITDATE = ? AND S_DEALNO = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TV_DRAWBACKDATA.S_SENDORGCODE, TV_DRAWBACKDATA.S_TAXORGCODE, TV_DRAWBACKDATA.S_COMMITDATE, TV_DRAWBACKDATA.S_DEALNO, TV_DRAWBACKDATA.S_VOUNO, "
        + "TV_DRAWBACKDATA.S_GENDATE, TV_DRAWBACKDATA.S_TRECODE, TV_DRAWBACKDATA.S_PAYEETAXPAYERCODE, TV_DRAWBACKDATA.S_PAYEEREGTYPE, TV_DRAWBACKDATA.S_PAYEENAME, "
        + "TV_DRAWBACKDATA.S_PAYEEBANKNO, TV_DRAWBACKDATA.S_PAYEEACCOUNT, TV_DRAWBACKDATA.N_MONEY, TV_DRAWBACKDATA.S_BUDGETSUBCODE, TV_DRAWBACKDATA.S_BUDGETLEVELCODE, "
        + "TV_DRAWBACKDATA.S_ORIGINTICKETNO, TV_DRAWBACKDATA.S_ORIGINTICKETDATE, TV_DRAWBACKDATA.S_BACKFLAG, TV_DRAWBACKDATA.S_BACKREASONFLAG, TV_DRAWBACKDATA.S_RECVFLAG, "
        + "TV_DRAWBACKDATA.S_CHECKFLAG, TV_DRAWBACKDATA.S_FILEBATCH, TV_DRAWBACKDATA.S_VERIFYFLAG, TV_DRAWBACKDATA.S_OUTFILENAME, TV_DRAWBACKDATA.S_ELECSIGN, "
        + "TV_DRAWBACKDATA.S_DEMO "
        + "FROM TV_DRAWBACKDATA "
        +" WHERE " 
        + "S_SENDORGCODE = ? AND S_COMMITDATE = ? AND S_DEALNO = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TV_DRAWBACKDATA.S_SENDORGCODE  , TV_DRAWBACKDATA.S_TAXORGCODE  , TV_DRAWBACKDATA.S_COMMITDATE  , TV_DRAWBACKDATA.S_DEALNO  , TV_DRAWBACKDATA.S_VOUNO "
        + " , TV_DRAWBACKDATA.S_GENDATE  , TV_DRAWBACKDATA.S_TRECODE  , TV_DRAWBACKDATA.S_PAYEETAXPAYERCODE  , TV_DRAWBACKDATA.S_PAYEEREGTYPE  , TV_DRAWBACKDATA.S_PAYEENAME "
        + " , TV_DRAWBACKDATA.S_PAYEEBANKNO  , TV_DRAWBACKDATA.S_PAYEEACCOUNT  , TV_DRAWBACKDATA.N_MONEY  , TV_DRAWBACKDATA.S_BUDGETSUBCODE  , TV_DRAWBACKDATA.S_BUDGETLEVELCODE "
        + " , TV_DRAWBACKDATA.S_ORIGINTICKETNO  , TV_DRAWBACKDATA.S_ORIGINTICKETDATE  , TV_DRAWBACKDATA.S_BACKFLAG  , TV_DRAWBACKDATA.S_BACKREASONFLAG  , TV_DRAWBACKDATA.S_RECVFLAG "
        + " , TV_DRAWBACKDATA.S_CHECKFLAG  , TV_DRAWBACKDATA.S_FILEBATCH  , TV_DRAWBACKDATA.S_VERIFYFLAG  , TV_DRAWBACKDATA.S_OUTFILENAME  , TV_DRAWBACKDATA.S_ELECSIGN "
        + " , TV_DRAWBACKDATA.S_DEMO "
        + "FROM TV_DRAWBACKDATA ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TV_DRAWBACKDATA.S_SENDORGCODE, TV_DRAWBACKDATA.S_TAXORGCODE, TV_DRAWBACKDATA.S_COMMITDATE, TV_DRAWBACKDATA.S_DEALNO, TV_DRAWBACKDATA.S_VOUNO, "
        + "TV_DRAWBACKDATA.S_GENDATE, TV_DRAWBACKDATA.S_TRECODE, TV_DRAWBACKDATA.S_PAYEETAXPAYERCODE, TV_DRAWBACKDATA.S_PAYEEREGTYPE, TV_DRAWBACKDATA.S_PAYEENAME, "
        + "TV_DRAWBACKDATA.S_PAYEEBANKNO, TV_DRAWBACKDATA.S_PAYEEACCOUNT, TV_DRAWBACKDATA.N_MONEY, TV_DRAWBACKDATA.S_BUDGETSUBCODE, TV_DRAWBACKDATA.S_BUDGETLEVELCODE, "
        + "TV_DRAWBACKDATA.S_ORIGINTICKETNO, TV_DRAWBACKDATA.S_ORIGINTICKETDATE, TV_DRAWBACKDATA.S_BACKFLAG, TV_DRAWBACKDATA.S_BACKREASONFLAG, TV_DRAWBACKDATA.S_RECVFLAG, "
        + "TV_DRAWBACKDATA.S_CHECKFLAG, TV_DRAWBACKDATA.S_FILEBATCH, TV_DRAWBACKDATA.S_VERIFYFLAG, TV_DRAWBACKDATA.S_OUTFILENAME, TV_DRAWBACKDATA.S_ELECSIGN, "
        + "TV_DRAWBACKDATA.S_DEMO "
        + "FROM TV_DRAWBACKDATA " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "S_SENDORGCODE = ? AND S_COMMITDATE = ? AND S_DEALNO = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TV_DRAWBACKDATA SET "
        + "S_TAXORGCODE =?,S_VOUNO =?,S_GENDATE =?,S_TRECODE =?,S_PAYEETAXPAYERCODE =?, "
        + "S_PAYEEREGTYPE =?,S_PAYEENAME =?,S_PAYEEBANKNO =?,S_PAYEEACCOUNT =?,N_MONEY =?, "
        + "S_BUDGETSUBCODE =?,S_BUDGETLEVELCODE =?,S_ORIGINTICKETNO =?,S_ORIGINTICKETDATE =?,S_BACKFLAG =?, "
        + "S_BACKREASONFLAG =?,S_RECVFLAG =?,S_CHECKFLAG =?,S_FILEBATCH =?,S_VERIFYFLAG =?, "
        + "S_OUTFILENAME =?,S_ELECSIGN =?,S_DEMO =? "
        + "WHERE "
        + "S_SENDORGCODE = ? AND S_COMMITDATE = ? AND S_DEALNO = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TV_DRAWBACKDATA SET "
        + "S_TAXORGCODE =?, S_VOUNO =?, S_GENDATE =?, S_TRECODE =?, S_PAYEETAXPAYERCODE =?,  "
        + "S_PAYEEREGTYPE =?, S_PAYEENAME =?, S_PAYEEBANKNO =?, S_PAYEEACCOUNT =?, N_MONEY =?,  "
        + "S_BUDGETSUBCODE =?, S_BUDGETLEVELCODE =?, S_ORIGINTICKETNO =?, S_ORIGINTICKETDATE =?, S_BACKFLAG =?,  "
        + "S_BACKREASONFLAG =?, S_RECVFLAG =?, S_CHECKFLAG =?, S_FILEBATCH =?, S_VERIFYFLAG =?,  "
        + "S_OUTFILENAME =?, S_ELECSIGN =?, S_DEMO =? "
        + "WHERE "
        + "S_SENDORGCODE = ? AND S_COMMITDATE = ? AND S_DEALNO = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TV_DRAWBACKDATA " 
        + " WHERE "
        + "S_SENDORGCODE = ? AND S_COMMITDATE = ? AND S_DEALNO = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 3;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TvDrawbackdataDto dto = (TvDrawbackdataDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getSsendorgcode());

          ps.setString(2, dto.getStaxorgcode());

          ps.setString(3, dto.getScommitdate());

          ps.setString(4, dto.getSdealno());

          ps.setString(5, dto.getSvouno());

          ps.setString(6, dto.getSgendate());

          ps.setString(7, dto.getStrecode());

          ps.setString(8, dto.getSpayeetaxpayercode());

          ps.setString(9, dto.getSpayeeregtype());

          ps.setString(10, dto.getSpayeename());

          ps.setString(11, dto.getSpayeebankno());

          ps.setString(12, dto.getSpayeeaccount());

          ps.setBigDecimal(13, dto.getNmoney());

          ps.setString(14, dto.getSbudgetsubcode());

          ps.setString(15, dto.getSbudgetlevelcode());

          ps.setString(16, dto.getSoriginticketno());

          ps.setString(17, dto.getSoriginticketdate());

          ps.setString(18, dto.getSbackflag());

          ps.setString(19, dto.getSbackreasonflag());

          ps.setString(20, dto.getSrecvflag());

          ps.setString(21, dto.getScheckflag());

          ps.setString(22, dto.getSfilebatch());

          ps.setString(23, dto.getSverifyflag());

          ps.setString(24, dto.getSoutfilename());

          ps.setString(25, dto.getSelecsign());

          ps.setString(26, dto.getSdemo());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TvDrawbackdataDto dto = (TvDrawbackdataDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getSsendorgcode());
            ps.setString(2, dto.getStaxorgcode());
            ps.setString(3, dto.getScommitdate());
            ps.setString(4, dto.getSdealno());
            ps.setString(5, dto.getSvouno());
            ps.setString(6, dto.getSgendate());
            ps.setString(7, dto.getStrecode());
            ps.setString(8, dto.getSpayeetaxpayercode());
            ps.setString(9, dto.getSpayeeregtype());
            ps.setString(10, dto.getSpayeename());
            ps.setString(11, dto.getSpayeebankno());
            ps.setString(12, dto.getSpayeeaccount());
            ps.setBigDecimal(13, dto.getNmoney());
            ps.setString(14, dto.getSbudgetsubcode());
            ps.setString(15, dto.getSbudgetlevelcode());
            ps.setString(16, dto.getSoriginticketno());
            ps.setString(17, dto.getSoriginticketdate());
            ps.setString(18, dto.getSbackflag());
            ps.setString(19, dto.getSbackreasonflag());
            ps.setString(20, dto.getSrecvflag());
            ps.setString(21, dto.getScheckflag());
            ps.setString(22, dto.getSfilebatch());
            ps.setString(23, dto.getSverifyflag());
            ps.setString(24, dto.getSoutfilename());
            ps.setString(25, dto.getSelecsign());
            ps.setString(26, dto.getSdemo());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TvDrawbackdataDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TvDrawbackdataDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TvDrawbackdataDto)_dtos[i] ; 
  
               ps.setString(1, dto.getSsendorgcode());
  
               ps.setString(2, dto.getStaxorgcode());
  
               ps.setString(3, dto.getScommitdate());
  
               ps.setString(4, dto.getSdealno());
  
               ps.setString(5, dto.getSvouno());
  
               ps.setString(6, dto.getSgendate());
  
               ps.setString(7, dto.getStrecode());
  
               ps.setString(8, dto.getSpayeetaxpayercode());
  
               ps.setString(9, dto.getSpayeeregtype());
  
               ps.setString(10, dto.getSpayeename());
  
               ps.setString(11, dto.getSpayeebankno());
  
               ps.setString(12, dto.getSpayeeaccount());
  
               ps.setBigDecimal(13, dto.getNmoney());
  
               ps.setString(14, dto.getSbudgetsubcode());
  
               ps.setString(15, dto.getSbudgetlevelcode());
  
               ps.setString(16, dto.getSoriginticketno());
  
               ps.setString(17, dto.getSoriginticketdate());
  
               ps.setString(18, dto.getSbackflag());
  
               ps.setString(19, dto.getSbackreasonflag());
  
               ps.setString(20, dto.getSrecvflag());
  
               ps.setString(21, dto.getScheckflag());
  
               ps.setString(22, dto.getSfilebatch());
  
               ps.setString(23, dto.getSverifyflag());
  
               ps.setString(24, dto.getSoutfilename());
  
               ps.setString(25, dto.getSelecsign());
  
               ps.setString(26, dto.getSdemo());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvDrawbackdataPK pk = (TvDrawbackdataPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           ps.setString(1, pk.getSsendorgcode());

           ps.setString(2, pk.getScommitdate());

           ps.setString(3, pk.getSdealno());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TvDrawbackdataPK pk = (TvDrawbackdataPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           ps.setString(1, pk.getSsendorgcode());

           ps.setString(2, pk.getScommitdate());

           ps.setString(3, pk.getSdealno());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TvDrawbackdataPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvDrawbackdataPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TvDrawbackdataPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*3+1, pk.getSsendorgcode());

                   ps.setString((i-iBegin)*3+2, pk.getScommitdate());

                   ps.setString((i-iBegin)*3+3, pk.getSdealno());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TvDrawbackdataDto[] dtos = new TvDrawbackdataDto[0];
		    dtos = (TvDrawbackdataDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TvDrawbackdataDto  dto = new  TvDrawbackdataDto ();
             //S_SENDORGCODE
             str = rs.getString("S_SENDORGCODE");
             if (str == null)
                dto.setSsendorgcode(null);
             else
                dto.setSsendorgcode(str.trim());

             //S_TAXORGCODE
             str = rs.getString("S_TAXORGCODE");
             if (str == null)
                dto.setStaxorgcode(null);
             else
                dto.setStaxorgcode(str.trim());

             //S_COMMITDATE
             str = rs.getString("S_COMMITDATE");
             if (str == null)
                dto.setScommitdate(null);
             else
                dto.setScommitdate(str.trim());

             //S_DEALNO
             str = rs.getString("S_DEALNO");
             if (str == null)
                dto.setSdealno(null);
             else
                dto.setSdealno(str.trim());

             //S_VOUNO
             str = rs.getString("S_VOUNO");
             if (str == null)
                dto.setSvouno(null);
             else
                dto.setSvouno(str.trim());

             //S_GENDATE
             str = rs.getString("S_GENDATE");
             if (str == null)
                dto.setSgendate(null);
             else
                dto.setSgendate(str.trim());

             //S_TRECODE
             str = rs.getString("S_TRECODE");
             if (str == null)
                dto.setStrecode(null);
             else
                dto.setStrecode(str.trim());

             //S_PAYEETAXPAYERCODE
             str = rs.getString("S_PAYEETAXPAYERCODE");
             if (str == null)
                dto.setSpayeetaxpayercode(null);
             else
                dto.setSpayeetaxpayercode(str.trim());

             //S_PAYEEREGTYPE
             str = rs.getString("S_PAYEEREGTYPE");
             if (str == null)
                dto.setSpayeeregtype(null);
             else
                dto.setSpayeeregtype(str.trim());

             //S_PAYEENAME
             str = rs.getString("S_PAYEENAME");
             if (str == null)
                dto.setSpayeename(null);
             else
                dto.setSpayeename(str.trim());

             //S_PAYEEBANKNO
             str = rs.getString("S_PAYEEBANKNO");
             if (str == null)
                dto.setSpayeebankno(null);
             else
                dto.setSpayeebankno(str.trim());

             //S_PAYEEACCOUNT
             str = rs.getString("S_PAYEEACCOUNT");
             if (str == null)
                dto.setSpayeeaccount(null);
             else
                dto.setSpayeeaccount(str.trim());

             //N_MONEY
           dto.setNmoney(rs.getBigDecimal("N_MONEY"));

             //S_BUDGETSUBCODE
             str = rs.getString("S_BUDGETSUBCODE");
             if (str == null)
                dto.setSbudgetsubcode(null);
             else
                dto.setSbudgetsubcode(str.trim());

             //S_BUDGETLEVELCODE
             str = rs.getString("S_BUDGETLEVELCODE");
             if (str == null)
                dto.setSbudgetlevelcode(null);
             else
                dto.setSbudgetlevelcode(str.trim());

             //S_ORIGINTICKETNO
             str = rs.getString("S_ORIGINTICKETNO");
             if (str == null)
                dto.setSoriginticketno(null);
             else
                dto.setSoriginticketno(str.trim());

             //S_ORIGINTICKETDATE
             str = rs.getString("S_ORIGINTICKETDATE");
             if (str == null)
                dto.setSoriginticketdate(null);
             else
                dto.setSoriginticketdate(str.trim());

             //S_BACKFLAG
             str = rs.getString("S_BACKFLAG");
             if (str == null)
                dto.setSbackflag(null);
             else
                dto.setSbackflag(str.trim());

             //S_BACKREASONFLAG
             str = rs.getString("S_BACKREASONFLAG");
             if (str == null)
                dto.setSbackreasonflag(null);
             else
                dto.setSbackreasonflag(str.trim());

             //S_RECVFLAG
             str = rs.getString("S_RECVFLAG");
             if (str == null)
                dto.setSrecvflag(null);
             else
                dto.setSrecvflag(str.trim());

             //S_CHECKFLAG
             str = rs.getString("S_CHECKFLAG");
             if (str == null)
                dto.setScheckflag(null);
             else
                dto.setScheckflag(str.trim());

             //S_FILEBATCH
             str = rs.getString("S_FILEBATCH");
             if (str == null)
                dto.setSfilebatch(null);
             else
                dto.setSfilebatch(str.trim());

             //S_VERIFYFLAG
             str = rs.getString("S_VERIFYFLAG");
             if (str == null)
                dto.setSverifyflag(null);
             else
                dto.setSverifyflag(str.trim());

             //S_OUTFILENAME
             str = rs.getString("S_OUTFILENAME");
             if (str == null)
                dto.setSoutfilename(null);
             else
                dto.setSoutfilename(str.trim());

             //S_ELECSIGN
             str = rs.getString("S_ELECSIGN");
             if (str == null)
                dto.setSelecsign(null);
             else
                dto.setSelecsign(str.trim());

             //S_DEMO
             str = rs.getString("S_DEMO");
             if (str == null)
                dto.setSdemo(null);
             else
                dto.setSdemo(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TvDrawbackdataDto dto = (TvDrawbackdataDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_TAXORGCODE
            ps.setString(pos, dto.getStaxorgcode());
            pos++;

            //S_VOUNO
            ps.setString(pos, dto.getSvouno());
            pos++;

            //S_GENDATE
            ps.setString(pos, dto.getSgendate());
            pos++;

            //S_TRECODE
            ps.setString(pos, dto.getStrecode());
            pos++;

            //S_PAYEETAXPAYERCODE
            ps.setString(pos, dto.getSpayeetaxpayercode());
            pos++;

            //S_PAYEEREGTYPE
            ps.setString(pos, dto.getSpayeeregtype());
            pos++;

            //S_PAYEENAME
            ps.setString(pos, dto.getSpayeename());
            pos++;

            //S_PAYEEBANKNO
            ps.setString(pos, dto.getSpayeebankno());
            pos++;

            //S_PAYEEACCOUNT
            ps.setString(pos, dto.getSpayeeaccount());
            pos++;

            //N_MONEY
            ps.setBigDecimal(pos, dto.getNmoney());
            pos++;

            //S_BUDGETSUBCODE
            ps.setString(pos, dto.getSbudgetsubcode());
            pos++;

            //S_BUDGETLEVELCODE
            ps.setString(pos, dto.getSbudgetlevelcode());
            pos++;

            //S_ORIGINTICKETNO
            ps.setString(pos, dto.getSoriginticketno());
            pos++;

            //S_ORIGINTICKETDATE
            ps.setString(pos, dto.getSoriginticketdate());
            pos++;

            //S_BACKFLAG
            ps.setString(pos, dto.getSbackflag());
            pos++;

            //S_BACKREASONFLAG
            ps.setString(pos, dto.getSbackreasonflag());
            pos++;

            //S_RECVFLAG
            ps.setString(pos, dto.getSrecvflag());
            pos++;

            //S_CHECKFLAG
            ps.setString(pos, dto.getScheckflag());
            pos++;

            //S_FILEBATCH
            ps.setString(pos, dto.getSfilebatch());
            pos++;

            //S_VERIFYFLAG
            ps.setString(pos, dto.getSverifyflag());
            pos++;

            //S_OUTFILENAME
            ps.setString(pos, dto.getSoutfilename());
            pos++;

            //S_ELECSIGN
            ps.setString(pos, dto.getSelecsign());
            pos++;

            //S_DEMO
            ps.setString(pos, dto.getSdemo());
            pos++;


           //S_SENDORGCODE
           ps.setString(pos, dto.getSsendorgcode());
           pos++;
           //S_COMMITDATE
           ps.setString(pos, dto.getScommitdate());
           pos++;
           //S_DEALNO
           ps.setString(pos, dto.getSdealno());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TvDrawbackdataDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TvDrawbackdataDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TvDrawbackdataDto)_dtos[i] ; 
                int pos = 1;
                //S_TAXORGCODE
                 ps.setString(pos, dto.getStaxorgcode());
                pos++;

                //S_VOUNO
                 ps.setString(pos, dto.getSvouno());
                pos++;

                //S_GENDATE
                 ps.setString(pos, dto.getSgendate());
                pos++;

                //S_TRECODE
                 ps.setString(pos, dto.getStrecode());
                pos++;

                //S_PAYEETAXPAYERCODE
                 ps.setString(pos, dto.getSpayeetaxpayercode());
                pos++;

                //S_PAYEEREGTYPE
                 ps.setString(pos, dto.getSpayeeregtype());
                pos++;

                //S_PAYEENAME
                 ps.setString(pos, dto.getSpayeename());
                pos++;

                //S_PAYEEBANKNO
                 ps.setString(pos, dto.getSpayeebankno());
                pos++;

                //S_PAYEEACCOUNT
                 ps.setString(pos, dto.getSpayeeaccount());
                pos++;

                //N_MONEY
                 ps.setBigDecimal(pos, dto.getNmoney());
                pos++;

                //S_BUDGETSUBCODE
                 ps.setString(pos, dto.getSbudgetsubcode());
                pos++;

                //S_BUDGETLEVELCODE
                 ps.setString(pos, dto.getSbudgetlevelcode());
                pos++;

                //S_ORIGINTICKETNO
                 ps.setString(pos, dto.getSoriginticketno());
                pos++;

                //S_ORIGINTICKETDATE
                 ps.setString(pos, dto.getSoriginticketdate());
                pos++;

                //S_BACKFLAG
                 ps.setString(pos, dto.getSbackflag());
                pos++;

                //S_BACKREASONFLAG
                 ps.setString(pos, dto.getSbackreasonflag());
                pos++;

                //S_RECVFLAG
                 ps.setString(pos, dto.getSrecvflag());
                pos++;

                //S_CHECKFLAG
                 ps.setString(pos, dto.getScheckflag());
                pos++;

                //S_FILEBATCH
                 ps.setString(pos, dto.getSfilebatch());
                pos++;

                //S_VERIFYFLAG
                 ps.setString(pos, dto.getSverifyflag());
                pos++;

                //S_OUTFILENAME
                 ps.setString(pos, dto.getSoutfilename());
                pos++;

                //S_ELECSIGN
                 ps.setString(pos, dto.getSelecsign());
                pos++;

                //S_DEMO
                 ps.setString(pos, dto.getSdemo());
                pos++;


               //S_SENDORGCODE
               ps.setString(pos, dto.getSsendorgcode());
               pos++;
               //S_COMMITDATE
               ps.setString(pos, dto.getScommitdate());
               pos++;
               //S_DEALNO
               ps.setString(pos, dto.getSdealno());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TvDrawbackdataPK pk = (TvDrawbackdataPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setString(1, pk.getSsendorgcode());
           ps.setString(2, pk.getScommitdate());
           ps.setString(3, pk.getSdealno());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TvDrawbackdataPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TvDrawbackdataPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TvDrawbackdataPK)(pks.get(i)) ; 
                ps.setString(1, pk.getSsendorgcode());
                ps.setString(2, pk.getScommitdate());
                ps.setString(3, pk.getSdealno());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                     		throw new SQLException("数据库表：TV_DRAWBACKDATA没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
