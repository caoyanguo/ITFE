    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.HtvPayoutDetailListDto ;
import com.cfcc.itfe.persistence.pk.HtvPayoutDetailListPK ;


/**
 * <p>Title: DAO of table: HTV_PAYOUT_DETAIL_LIST</p>
 * <p>Description:实拨拨款凭证明细清单5257 Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:56 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class HtvPayoutDetailListDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO HTV_PAYOUT_DETAIL_LIST ("
          + "S_ID,S_VOUCHERBILLID,S_PAYVOUCHERNO,S_FUNDTYPECODE,S_FUNDTYPENAME"
          + ",S_PAYTYPECODE,S_PAYTYPENAME,S_PAYEEACCTNO,S_PAYEEACCTNAME,S_PAYEEACCTBANKNAME"
          + ",S_PAYEEACCTBANKNO,S_PAYACCTNO,S_PAYACCTNAME,S_PAYACCTBANKNAME,S_AGENCYCODE"
          + ",S_AGENCYNAME,S_EXPFUNCCODE,S_EXPFUNCNAME,S_EXPECOCODE,S_EXPECONAME"
          + ",S_PAYSUMMARYCODE,S_PAYSUMMARYNAME,N_PAYAMT,D_PAYDATE,S_HOLD1"
          + ",S_HOLD2,S_HOLD3,S_HOLD4"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "HTV_PAYOUT_DETAIL_LIST.S_ID, HTV_PAYOUT_DETAIL_LIST.S_VOUCHERBILLID, HTV_PAYOUT_DETAIL_LIST.S_PAYVOUCHERNO, HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPECODE, HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPENAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYTYPECODE, HTV_PAYOUT_DETAIL_LIST.S_PAYTYPENAME, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNO, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNAME, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNO, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNO, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNAME, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTBANKNAME, HTV_PAYOUT_DETAIL_LIST.S_AGENCYCODE, "
        + "HTV_PAYOUT_DETAIL_LIST.S_AGENCYNAME, HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCCODE, HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCNAME, HTV_PAYOUT_DETAIL_LIST.S_EXPECOCODE, HTV_PAYOUT_DETAIL_LIST.S_EXPECONAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYCODE, HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYNAME, HTV_PAYOUT_DETAIL_LIST.N_PAYAMT, HTV_PAYOUT_DETAIL_LIST.D_PAYDATE, HTV_PAYOUT_DETAIL_LIST.S_HOLD1, "
        + "HTV_PAYOUT_DETAIL_LIST.S_HOLD2, HTV_PAYOUT_DETAIL_LIST.S_HOLD3, HTV_PAYOUT_DETAIL_LIST.S_HOLD4 "
        + "FROM HTV_PAYOUT_DETAIL_LIST "
        +" WHERE " 
        + "S_ID = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "HTV_PAYOUT_DETAIL_LIST.S_ID, HTV_PAYOUT_DETAIL_LIST.S_VOUCHERBILLID, HTV_PAYOUT_DETAIL_LIST.S_PAYVOUCHERNO, HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPECODE, HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPENAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYTYPECODE, HTV_PAYOUT_DETAIL_LIST.S_PAYTYPENAME, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNO, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNAME, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNO, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNO, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNAME, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTBANKNAME, HTV_PAYOUT_DETAIL_LIST.S_AGENCYCODE, "
        + "HTV_PAYOUT_DETAIL_LIST.S_AGENCYNAME, HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCCODE, HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCNAME, HTV_PAYOUT_DETAIL_LIST.S_EXPECOCODE, HTV_PAYOUT_DETAIL_LIST.S_EXPECONAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYCODE, HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYNAME, HTV_PAYOUT_DETAIL_LIST.N_PAYAMT, HTV_PAYOUT_DETAIL_LIST.D_PAYDATE, HTV_PAYOUT_DETAIL_LIST.S_HOLD1, "
        + "HTV_PAYOUT_DETAIL_LIST.S_HOLD2, HTV_PAYOUT_DETAIL_LIST.S_HOLD3, HTV_PAYOUT_DETAIL_LIST.S_HOLD4 "
        + "FROM HTV_PAYOUT_DETAIL_LIST "
        +" WHERE " 
        + "S_ID = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  HTV_PAYOUT_DETAIL_LIST.S_ID  , HTV_PAYOUT_DETAIL_LIST.S_VOUCHERBILLID  , HTV_PAYOUT_DETAIL_LIST.S_PAYVOUCHERNO  , HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPECODE  , HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPENAME "
        + " , HTV_PAYOUT_DETAIL_LIST.S_PAYTYPECODE  , HTV_PAYOUT_DETAIL_LIST.S_PAYTYPENAME  , HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNO  , HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNAME  , HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNAME "
        + " , HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNO  , HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNO  , HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNAME  , HTV_PAYOUT_DETAIL_LIST.S_PAYACCTBANKNAME  , HTV_PAYOUT_DETAIL_LIST.S_AGENCYCODE "
        + " , HTV_PAYOUT_DETAIL_LIST.S_AGENCYNAME  , HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCCODE  , HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCNAME  , HTV_PAYOUT_DETAIL_LIST.S_EXPECOCODE  , HTV_PAYOUT_DETAIL_LIST.S_EXPECONAME "
        + " , HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYCODE  , HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYNAME  , HTV_PAYOUT_DETAIL_LIST.N_PAYAMT  , HTV_PAYOUT_DETAIL_LIST.D_PAYDATE  , HTV_PAYOUT_DETAIL_LIST.S_HOLD1 "
        + " , HTV_PAYOUT_DETAIL_LIST.S_HOLD2  , HTV_PAYOUT_DETAIL_LIST.S_HOLD3  , HTV_PAYOUT_DETAIL_LIST.S_HOLD4 "
        + "FROM HTV_PAYOUT_DETAIL_LIST ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "HTV_PAYOUT_DETAIL_LIST.S_ID, HTV_PAYOUT_DETAIL_LIST.S_VOUCHERBILLID, HTV_PAYOUT_DETAIL_LIST.S_PAYVOUCHERNO, HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPECODE, HTV_PAYOUT_DETAIL_LIST.S_FUNDTYPENAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYTYPECODE, HTV_PAYOUT_DETAIL_LIST.S_PAYTYPENAME, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNO, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTNAME, HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYEEACCTBANKNO, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNO, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTNAME, HTV_PAYOUT_DETAIL_LIST.S_PAYACCTBANKNAME, HTV_PAYOUT_DETAIL_LIST.S_AGENCYCODE, "
        + "HTV_PAYOUT_DETAIL_LIST.S_AGENCYNAME, HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCCODE, HTV_PAYOUT_DETAIL_LIST.S_EXPFUNCNAME, HTV_PAYOUT_DETAIL_LIST.S_EXPECOCODE, HTV_PAYOUT_DETAIL_LIST.S_EXPECONAME, "
        + "HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYCODE, HTV_PAYOUT_DETAIL_LIST.S_PAYSUMMARYNAME, HTV_PAYOUT_DETAIL_LIST.N_PAYAMT, HTV_PAYOUT_DETAIL_LIST.D_PAYDATE, HTV_PAYOUT_DETAIL_LIST.S_HOLD1, "
        + "HTV_PAYOUT_DETAIL_LIST.S_HOLD2, HTV_PAYOUT_DETAIL_LIST.S_HOLD3, HTV_PAYOUT_DETAIL_LIST.S_HOLD4 "
        + "FROM HTV_PAYOUT_DETAIL_LIST " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "S_ID = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE HTV_PAYOUT_DETAIL_LIST SET "
        + "S_VOUCHERBILLID =?,S_PAYVOUCHERNO =?,S_FUNDTYPECODE =?,S_FUNDTYPENAME =?,S_PAYTYPECODE =?, "
        + "S_PAYTYPENAME =?,S_PAYEEACCTNO =?,S_PAYEEACCTNAME =?,S_PAYEEACCTBANKNAME =?,S_PAYEEACCTBANKNO =?, "
        + "S_PAYACCTNO =?,S_PAYACCTNAME =?,S_PAYACCTBANKNAME =?,S_AGENCYCODE =?,S_AGENCYNAME =?, "
        + "S_EXPFUNCCODE =?,S_EXPFUNCNAME =?,S_EXPECOCODE =?,S_EXPECONAME =?,S_PAYSUMMARYCODE =?, "
        + "S_PAYSUMMARYNAME =?,N_PAYAMT =?,D_PAYDATE =?,S_HOLD1 =?,S_HOLD2 =?, "
        + "S_HOLD3 =?,S_HOLD4 =? "
        + "WHERE "
        + "S_ID = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE HTV_PAYOUT_DETAIL_LIST SET "
        + "S_VOUCHERBILLID =?, S_PAYVOUCHERNO =?, S_FUNDTYPECODE =?, S_FUNDTYPENAME =?, S_PAYTYPECODE =?,  "
        + "S_PAYTYPENAME =?, S_PAYEEACCTNO =?, S_PAYEEACCTNAME =?, S_PAYEEACCTBANKNAME =?, S_PAYEEACCTBANKNO =?,  "
        + "S_PAYACCTNO =?, S_PAYACCTNAME =?, S_PAYACCTBANKNAME =?, S_AGENCYCODE =?, S_AGENCYNAME =?,  "
        + "S_EXPFUNCCODE =?, S_EXPFUNCNAME =?, S_EXPECOCODE =?, S_EXPECONAME =?, S_PAYSUMMARYCODE =?,  "
        + "S_PAYSUMMARYNAME =?, N_PAYAMT =?, D_PAYDATE =?, S_HOLD1 =?, S_HOLD2 =?,  "
        + "S_HOLD3 =?, S_HOLD4 =? "
        + "WHERE "
        + "S_ID = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM HTV_PAYOUT_DETAIL_LIST " 
        + " WHERE "
        + "S_ID = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     HtvPayoutDetailListDto dto = (HtvPayoutDetailListDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getSid());

          ps.setString(2, dto.getSvoucherbillid());

          ps.setString(3, dto.getSpayvoucherno());

          ps.setString(4, dto.getSfundtypecode());

          ps.setString(5, dto.getSfundtypename());

          ps.setString(6, dto.getSpaytypecode());

          ps.setString(7, dto.getSpaytypename());

          ps.setString(8, dto.getSpayeeacctno());

          ps.setString(9, dto.getSpayeeacctname());

          ps.setString(10, dto.getSpayeeacctbankname());

          ps.setString(11, dto.getSpayeeacctbankno());

          ps.setString(12, dto.getSpayacctno());

          ps.setString(13, dto.getSpayacctname());

          ps.setString(14, dto.getSpayacctbankname());

          ps.setString(15, dto.getSagencycode());

          ps.setString(16, dto.getSagencyname());

          ps.setString(17, dto.getSexpfunccode());

          ps.setString(18, dto.getSexpfuncname());

          ps.setString(19, dto.getSexpecocode());

          ps.setString(20, dto.getSexpeconame());

          ps.setString(21, dto.getSpaysummarycode());

          ps.setString(22, dto.getSpaysummaryname());

          ps.setBigDecimal(23, dto.getNpayamt());

          ps.setString(24, dto.getDpaydate());

          ps.setString(25, dto.getShold1());

          ps.setString(26, dto.getShold2());

          ps.setString(27, dto.getShold3());

          ps.setString(28, dto.getShold4());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       HtvPayoutDetailListDto dto = (HtvPayoutDetailListDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getSid());
            ps.setString(2, dto.getSvoucherbillid());
            ps.setString(3, dto.getSpayvoucherno());
            ps.setString(4, dto.getSfundtypecode());
            ps.setString(5, dto.getSfundtypename());
            ps.setString(6, dto.getSpaytypecode());
            ps.setString(7, dto.getSpaytypename());
            ps.setString(8, dto.getSpayeeacctno());
            ps.setString(9, dto.getSpayeeacctname());
            ps.setString(10, dto.getSpayeeacctbankname());
            ps.setString(11, dto.getSpayeeacctbankno());
            ps.setString(12, dto.getSpayacctno());
            ps.setString(13, dto.getSpayacctname());
            ps.setString(14, dto.getSpayacctbankname());
            ps.setString(15, dto.getSagencycode());
            ps.setString(16, dto.getSagencyname());
            ps.setString(17, dto.getSexpfunccode());
            ps.setString(18, dto.getSexpfuncname());
            ps.setString(19, dto.getSexpecocode());
            ps.setString(20, dto.getSexpeconame());
            ps.setString(21, dto.getSpaysummarycode());
            ps.setString(22, dto.getSpaysummaryname());
            ps.setBigDecimal(23, dto.getNpayamt());
            ps.setString(24, dto.getDpaydate());
            ps.setString(25, dto.getShold1());
            ps.setString(26, dto.getShold2());
            ps.setString(27, dto.getShold3());
            ps.setString(28, dto.getShold4());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        HtvPayoutDetailListDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (HtvPayoutDetailListDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (HtvPayoutDetailListDto)_dtos[i] ; 
  
               ps.setString(1, dto.getSid());
  
               ps.setString(2, dto.getSvoucherbillid());
  
               ps.setString(3, dto.getSpayvoucherno());
  
               ps.setString(4, dto.getSfundtypecode());
  
               ps.setString(5, dto.getSfundtypename());
  
               ps.setString(6, dto.getSpaytypecode());
  
               ps.setString(7, dto.getSpaytypename());
  
               ps.setString(8, dto.getSpayeeacctno());
  
               ps.setString(9, dto.getSpayeeacctname());
  
               ps.setString(10, dto.getSpayeeacctbankname());
  
               ps.setString(11, dto.getSpayeeacctbankno());
  
               ps.setString(12, dto.getSpayacctno());
  
               ps.setString(13, dto.getSpayacctname());
  
               ps.setString(14, dto.getSpayacctbankname());
  
               ps.setString(15, dto.getSagencycode());
  
               ps.setString(16, dto.getSagencyname());
  
               ps.setString(17, dto.getSexpfunccode());
  
               ps.setString(18, dto.getSexpfuncname());
  
               ps.setString(19, dto.getSexpecocode());
  
               ps.setString(20, dto.getSexpeconame());
  
               ps.setString(21, dto.getSpaysummarycode());
  
               ps.setString(22, dto.getSpaysummaryname());
  
               ps.setBigDecimal(23, dto.getNpayamt());
  
               ps.setString(24, dto.getDpaydate());
  
               ps.setString(25, dto.getShold1());
  
               ps.setString(26, dto.getShold2());
  
               ps.setString(27, dto.getShold3());
  
               ps.setString(28, dto.getShold4());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       HtvPayoutDetailListPK pk = (HtvPayoutDetailListPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           ps.setString(1, pk.getSid());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       HtvPayoutDetailListPK pk = (HtvPayoutDetailListPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           ps.setString(1, pk.getSid());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        HtvPayoutDetailListPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (HtvPayoutDetailListPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (HtvPayoutDetailListPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*1+1, pk.getSid());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            HtvPayoutDetailListDto[] dtos = new HtvPayoutDetailListDto[0];
		    dtos = (HtvPayoutDetailListDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             HtvPayoutDetailListDto  dto = new  HtvPayoutDetailListDto ();
             //S_ID
             str = rs.getString("S_ID");
             if (str == null)
                dto.setSid(null);
             else
                dto.setSid(str.trim());

             //S_VOUCHERBILLID
             str = rs.getString("S_VOUCHERBILLID");
             if (str == null)
                dto.setSvoucherbillid(null);
             else
                dto.setSvoucherbillid(str.trim());

             //S_PAYVOUCHERNO
             str = rs.getString("S_PAYVOUCHERNO");
             if (str == null)
                dto.setSpayvoucherno(null);
             else
                dto.setSpayvoucherno(str.trim());

             //S_FUNDTYPECODE
             str = rs.getString("S_FUNDTYPECODE");
             if (str == null)
                dto.setSfundtypecode(null);
             else
                dto.setSfundtypecode(str.trim());

             //S_FUNDTYPENAME
             str = rs.getString("S_FUNDTYPENAME");
             if (str == null)
                dto.setSfundtypename(null);
             else
                dto.setSfundtypename(str.trim());

             //S_PAYTYPECODE
             str = rs.getString("S_PAYTYPECODE");
             if (str == null)
                dto.setSpaytypecode(null);
             else
                dto.setSpaytypecode(str.trim());

             //S_PAYTYPENAME
             str = rs.getString("S_PAYTYPENAME");
             if (str == null)
                dto.setSpaytypename(null);
             else
                dto.setSpaytypename(str.trim());

             //S_PAYEEACCTNO
             str = rs.getString("S_PAYEEACCTNO");
             if (str == null)
                dto.setSpayeeacctno(null);
             else
                dto.setSpayeeacctno(str.trim());

             //S_PAYEEACCTNAME
             str = rs.getString("S_PAYEEACCTNAME");
             if (str == null)
                dto.setSpayeeacctname(null);
             else
                dto.setSpayeeacctname(str.trim());

             //S_PAYEEACCTBANKNAME
             str = rs.getString("S_PAYEEACCTBANKNAME");
             if (str == null)
                dto.setSpayeeacctbankname(null);
             else
                dto.setSpayeeacctbankname(str.trim());

             //S_PAYEEACCTBANKNO
             str = rs.getString("S_PAYEEACCTBANKNO");
             if (str == null)
                dto.setSpayeeacctbankno(null);
             else
                dto.setSpayeeacctbankno(str.trim());

             //S_PAYACCTNO
             str = rs.getString("S_PAYACCTNO");
             if (str == null)
                dto.setSpayacctno(null);
             else
                dto.setSpayacctno(str.trim());

             //S_PAYACCTNAME
             str = rs.getString("S_PAYACCTNAME");
             if (str == null)
                dto.setSpayacctname(null);
             else
                dto.setSpayacctname(str.trim());

             //S_PAYACCTBANKNAME
             str = rs.getString("S_PAYACCTBANKNAME");
             if (str == null)
                dto.setSpayacctbankname(null);
             else
                dto.setSpayacctbankname(str.trim());

             //S_AGENCYCODE
             str = rs.getString("S_AGENCYCODE");
             if (str == null)
                dto.setSagencycode(null);
             else
                dto.setSagencycode(str.trim());

             //S_AGENCYNAME
             str = rs.getString("S_AGENCYNAME");
             if (str == null)
                dto.setSagencyname(null);
             else
                dto.setSagencyname(str.trim());

             //S_EXPFUNCCODE
             str = rs.getString("S_EXPFUNCCODE");
             if (str == null)
                dto.setSexpfunccode(null);
             else
                dto.setSexpfunccode(str.trim());

             //S_EXPFUNCNAME
             str = rs.getString("S_EXPFUNCNAME");
             if (str == null)
                dto.setSexpfuncname(null);
             else
                dto.setSexpfuncname(str.trim());

             //S_EXPECOCODE
             str = rs.getString("S_EXPECOCODE");
             if (str == null)
                dto.setSexpecocode(null);
             else
                dto.setSexpecocode(str.trim());

             //S_EXPECONAME
             str = rs.getString("S_EXPECONAME");
             if (str == null)
                dto.setSexpeconame(null);
             else
                dto.setSexpeconame(str.trim());

             //S_PAYSUMMARYCODE
             str = rs.getString("S_PAYSUMMARYCODE");
             if (str == null)
                dto.setSpaysummarycode(null);
             else
                dto.setSpaysummarycode(str.trim());

             //S_PAYSUMMARYNAME
             str = rs.getString("S_PAYSUMMARYNAME");
             if (str == null)
                dto.setSpaysummaryname(null);
             else
                dto.setSpaysummaryname(str.trim());

             //N_PAYAMT
           dto.setNpayamt(rs.getBigDecimal("N_PAYAMT"));

             //D_PAYDATE
             str = rs.getString("D_PAYDATE");
             if (str == null)
                dto.setDpaydate(null);
             else
                dto.setDpaydate(str.trim());

             //S_HOLD1
             str = rs.getString("S_HOLD1");
             if (str == null)
                dto.setShold1(null);
             else
                dto.setShold1(str.trim());

             //S_HOLD2
             str = rs.getString("S_HOLD2");
             if (str == null)
                dto.setShold2(null);
             else
                dto.setShold2(str.trim());

             //S_HOLD3
             str = rs.getString("S_HOLD3");
             if (str == null)
                dto.setShold3(null);
             else
                dto.setShold3(str.trim());

             //S_HOLD4
             str = rs.getString("S_HOLD4");
             if (str == null)
                dto.setShold4(null);
             else
                dto.setShold4(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        HtvPayoutDetailListDto dto = (HtvPayoutDetailListDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_VOUCHERBILLID
            ps.setString(pos, dto.getSvoucherbillid());
            pos++;

            //S_PAYVOUCHERNO
            ps.setString(pos, dto.getSpayvoucherno());
            pos++;

            //S_FUNDTYPECODE
            ps.setString(pos, dto.getSfundtypecode());
            pos++;

            //S_FUNDTYPENAME
            ps.setString(pos, dto.getSfundtypename());
            pos++;

            //S_PAYTYPECODE
            ps.setString(pos, dto.getSpaytypecode());
            pos++;

            //S_PAYTYPENAME
            ps.setString(pos, dto.getSpaytypename());
            pos++;

            //S_PAYEEACCTNO
            ps.setString(pos, dto.getSpayeeacctno());
            pos++;

            //S_PAYEEACCTNAME
            ps.setString(pos, dto.getSpayeeacctname());
            pos++;

            //S_PAYEEACCTBANKNAME
            ps.setString(pos, dto.getSpayeeacctbankname());
            pos++;

            //S_PAYEEACCTBANKNO
            ps.setString(pos, dto.getSpayeeacctbankno());
            pos++;

            //S_PAYACCTNO
            ps.setString(pos, dto.getSpayacctno());
            pos++;

            //S_PAYACCTNAME
            ps.setString(pos, dto.getSpayacctname());
            pos++;

            //S_PAYACCTBANKNAME
            ps.setString(pos, dto.getSpayacctbankname());
            pos++;

            //S_AGENCYCODE
            ps.setString(pos, dto.getSagencycode());
            pos++;

            //S_AGENCYNAME
            ps.setString(pos, dto.getSagencyname());
            pos++;

            //S_EXPFUNCCODE
            ps.setString(pos, dto.getSexpfunccode());
            pos++;

            //S_EXPFUNCNAME
            ps.setString(pos, dto.getSexpfuncname());
            pos++;

            //S_EXPECOCODE
            ps.setString(pos, dto.getSexpecocode());
            pos++;

            //S_EXPECONAME
            ps.setString(pos, dto.getSexpeconame());
            pos++;

            //S_PAYSUMMARYCODE
            ps.setString(pos, dto.getSpaysummarycode());
            pos++;

            //S_PAYSUMMARYNAME
            ps.setString(pos, dto.getSpaysummaryname());
            pos++;

            //N_PAYAMT
            ps.setBigDecimal(pos, dto.getNpayamt());
            pos++;

            //D_PAYDATE
            ps.setString(pos, dto.getDpaydate());
            pos++;

            //S_HOLD1
            ps.setString(pos, dto.getShold1());
            pos++;

            //S_HOLD2
            ps.setString(pos, dto.getShold2());
            pos++;

            //S_HOLD3
            ps.setString(pos, dto.getShold3());
            pos++;

            //S_HOLD4
            ps.setString(pos, dto.getShold4());
            pos++;


           //S_ID
           ps.setString(pos, dto.getSid());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 HtvPayoutDetailListDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (HtvPayoutDetailListDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (HtvPayoutDetailListDto)_dtos[i] ; 
                int pos = 1;
                //S_VOUCHERBILLID
                 ps.setString(pos, dto.getSvoucherbillid());
                pos++;

                //S_PAYVOUCHERNO
                 ps.setString(pos, dto.getSpayvoucherno());
                pos++;

                //S_FUNDTYPECODE
                 ps.setString(pos, dto.getSfundtypecode());
                pos++;

                //S_FUNDTYPENAME
                 ps.setString(pos, dto.getSfundtypename());
                pos++;

                //S_PAYTYPECODE
                 ps.setString(pos, dto.getSpaytypecode());
                pos++;

                //S_PAYTYPENAME
                 ps.setString(pos, dto.getSpaytypename());
                pos++;

                //S_PAYEEACCTNO
                 ps.setString(pos, dto.getSpayeeacctno());
                pos++;

                //S_PAYEEACCTNAME
                 ps.setString(pos, dto.getSpayeeacctname());
                pos++;

                //S_PAYEEACCTBANKNAME
                 ps.setString(pos, dto.getSpayeeacctbankname());
                pos++;

                //S_PAYEEACCTBANKNO
                 ps.setString(pos, dto.getSpayeeacctbankno());
                pos++;

                //S_PAYACCTNO
                 ps.setString(pos, dto.getSpayacctno());
                pos++;

                //S_PAYACCTNAME
                 ps.setString(pos, dto.getSpayacctname());
                pos++;

                //S_PAYACCTBANKNAME
                 ps.setString(pos, dto.getSpayacctbankname());
                pos++;

                //S_AGENCYCODE
                 ps.setString(pos, dto.getSagencycode());
                pos++;

                //S_AGENCYNAME
                 ps.setString(pos, dto.getSagencyname());
                pos++;

                //S_EXPFUNCCODE
                 ps.setString(pos, dto.getSexpfunccode());
                pos++;

                //S_EXPFUNCNAME
                 ps.setString(pos, dto.getSexpfuncname());
                pos++;

                //S_EXPECOCODE
                 ps.setString(pos, dto.getSexpecocode());
                pos++;

                //S_EXPECONAME
                 ps.setString(pos, dto.getSexpeconame());
                pos++;

                //S_PAYSUMMARYCODE
                 ps.setString(pos, dto.getSpaysummarycode());
                pos++;

                //S_PAYSUMMARYNAME
                 ps.setString(pos, dto.getSpaysummaryname());
                pos++;

                //N_PAYAMT
                 ps.setBigDecimal(pos, dto.getNpayamt());
                pos++;

                //D_PAYDATE
                 ps.setString(pos, dto.getDpaydate());
                pos++;

                //S_HOLD1
                 ps.setString(pos, dto.getShold1());
                pos++;

                //S_HOLD2
                 ps.setString(pos, dto.getShold2());
                pos++;

                //S_HOLD3
                 ps.setString(pos, dto.getShold3());
                pos++;

                //S_HOLD4
                 ps.setString(pos, dto.getShold4());
                pos++;


               //S_ID
               ps.setString(pos, dto.getSid());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       HtvPayoutDetailListPK pk = (HtvPayoutDetailListPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setString(1, pk.getSid());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        HtvPayoutDetailListPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (HtvPayoutDetailListPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (HtvPayoutDetailListPK)(pks.get(i)) ; 
                ps.setString(1, pk.getSid());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                 		throw new SQLException("数据库表：HTV_PAYOUT_DETAIL_LIST没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
