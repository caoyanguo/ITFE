    



package com.cfcc.itfe.persistence.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;

import com.cfcc.itfe.persistence.dto.TbsTvDwbkDto ;
import com.cfcc.itfe.persistence.pk.TbsTvDwbkPK ;


/**
 * <p>Title: DAO of table: TBS_TV_DWBK</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:57 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2007-04-06 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author win7
 */

public class TbsTvDwbkDao  implements IDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO TBS_TV_DWBK ("
          + "I_VOUSRLNO,S_ELECVOUNO,S_DWBKVOUCODE,S_TAXORGCODE,S_AGENTTAXORGCODE"
          + ",S_PAYERTRECODE,S_AIMTRECODE,C_BDGKIND,C_BDGLEVEL,S_BDGSBTCODE"
          + ",S_DWBKREASONCODE,S_ASTFLAG,S_DWBKBY,F_DWBKRATIO,F_DWBKAMT"
          + ",S_EXAMORG,F_AMT,C_BCKFLAG,S_PAYEECODE,S_PAYEEACCT"
          + ",S_PAYEENAME,S_PAYEEOPNBNKNO,D_ACCEPT,D_ACCT,D_VOUCHER"
          + ",D_BILL,S_ETPCODE,S_ECOCODE,C_TRIMFLAG,S_BIZTYPE"
          + ",S_PACKAGENO,S_STATUS,S_FILENAME,S_BOOKORGCODE,TS_SYSUPDATE"
          + ",S_ADDWORD"
        + ") VALUES ("
        + "DEFAULT ,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,CURRENT TIMESTAMP ,?)";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "TBS_TV_DWBK.I_VOUSRLNO, TBS_TV_DWBK.S_ELECVOUNO, TBS_TV_DWBK.S_DWBKVOUCODE, TBS_TV_DWBK.S_TAXORGCODE, TBS_TV_DWBK.S_AGENTTAXORGCODE, "
        + "TBS_TV_DWBK.S_PAYERTRECODE, TBS_TV_DWBK.S_AIMTRECODE, TBS_TV_DWBK.C_BDGKIND, TBS_TV_DWBK.C_BDGLEVEL, TBS_TV_DWBK.S_BDGSBTCODE, "
        + "TBS_TV_DWBK.S_DWBKREASONCODE, TBS_TV_DWBK.S_ASTFLAG, TBS_TV_DWBK.S_DWBKBY, TBS_TV_DWBK.F_DWBKRATIO, TBS_TV_DWBK.F_DWBKAMT, "
        + "TBS_TV_DWBK.S_EXAMORG, TBS_TV_DWBK.F_AMT, TBS_TV_DWBK.C_BCKFLAG, TBS_TV_DWBK.S_PAYEECODE, TBS_TV_DWBK.S_PAYEEACCT, "
        + "TBS_TV_DWBK.S_PAYEENAME, TBS_TV_DWBK.S_PAYEEOPNBNKNO, TBS_TV_DWBK.D_ACCEPT, TBS_TV_DWBK.D_ACCT, TBS_TV_DWBK.D_VOUCHER, "
        + "TBS_TV_DWBK.D_BILL, TBS_TV_DWBK.S_ETPCODE, TBS_TV_DWBK.S_ECOCODE, TBS_TV_DWBK.C_TRIMFLAG, TBS_TV_DWBK.S_BIZTYPE, "
        + "TBS_TV_DWBK.S_PACKAGENO, TBS_TV_DWBK.S_STATUS, TBS_TV_DWBK.S_FILENAME, TBS_TV_DWBK.S_BOOKORGCODE, TBS_TV_DWBK.TS_SYSUPDATE, "
        + "TBS_TV_DWBK.S_ADDWORD "
        + "FROM TBS_TV_DWBK "
        +" WHERE " 
        + "I_VOUSRLNO = ? AND S_BOOKORGCODE = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "TBS_TV_DWBK.I_VOUSRLNO, TBS_TV_DWBK.S_ELECVOUNO, TBS_TV_DWBK.S_DWBKVOUCODE, TBS_TV_DWBK.S_TAXORGCODE, TBS_TV_DWBK.S_AGENTTAXORGCODE, "
        + "TBS_TV_DWBK.S_PAYERTRECODE, TBS_TV_DWBK.S_AIMTRECODE, TBS_TV_DWBK.C_BDGKIND, TBS_TV_DWBK.C_BDGLEVEL, TBS_TV_DWBK.S_BDGSBTCODE, "
        + "TBS_TV_DWBK.S_DWBKREASONCODE, TBS_TV_DWBK.S_ASTFLAG, TBS_TV_DWBK.S_DWBKBY, TBS_TV_DWBK.F_DWBKRATIO, TBS_TV_DWBK.F_DWBKAMT, "
        + "TBS_TV_DWBK.S_EXAMORG, TBS_TV_DWBK.F_AMT, TBS_TV_DWBK.C_BCKFLAG, TBS_TV_DWBK.S_PAYEECODE, TBS_TV_DWBK.S_PAYEEACCT, "
        + "TBS_TV_DWBK.S_PAYEENAME, TBS_TV_DWBK.S_PAYEEOPNBNKNO, TBS_TV_DWBK.D_ACCEPT, TBS_TV_DWBK.D_ACCT, TBS_TV_DWBK.D_VOUCHER, "
        + "TBS_TV_DWBK.D_BILL, TBS_TV_DWBK.S_ETPCODE, TBS_TV_DWBK.S_ECOCODE, TBS_TV_DWBK.C_TRIMFLAG, TBS_TV_DWBK.S_BIZTYPE, "
        + "TBS_TV_DWBK.S_PACKAGENO, TBS_TV_DWBK.S_STATUS, TBS_TV_DWBK.S_FILENAME, TBS_TV_DWBK.S_BOOKORGCODE, TBS_TV_DWBK.TS_SYSUPDATE, "
        + "TBS_TV_DWBK.S_ADDWORD "
        + "FROM TBS_TV_DWBK "
        +" WHERE " 
        + "I_VOUSRLNO = ? AND S_BOOKORGCODE = ? FOR UPDATE"
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  TBS_TV_DWBK.I_VOUSRLNO  , TBS_TV_DWBK.S_ELECVOUNO  , TBS_TV_DWBK.S_DWBKVOUCODE  , TBS_TV_DWBK.S_TAXORGCODE  , TBS_TV_DWBK.S_AGENTTAXORGCODE "
        + " , TBS_TV_DWBK.S_PAYERTRECODE  , TBS_TV_DWBK.S_AIMTRECODE  , TBS_TV_DWBK.C_BDGKIND  , TBS_TV_DWBK.C_BDGLEVEL  , TBS_TV_DWBK.S_BDGSBTCODE "
        + " , TBS_TV_DWBK.S_DWBKREASONCODE  , TBS_TV_DWBK.S_ASTFLAG  , TBS_TV_DWBK.S_DWBKBY  , TBS_TV_DWBK.F_DWBKRATIO  , TBS_TV_DWBK.F_DWBKAMT "
        + " , TBS_TV_DWBK.S_EXAMORG  , TBS_TV_DWBK.F_AMT  , TBS_TV_DWBK.C_BCKFLAG  , TBS_TV_DWBK.S_PAYEECODE  , TBS_TV_DWBK.S_PAYEEACCT "
        + " , TBS_TV_DWBK.S_PAYEENAME  , TBS_TV_DWBK.S_PAYEEOPNBNKNO  , TBS_TV_DWBK.D_ACCEPT  , TBS_TV_DWBK.D_ACCT  , TBS_TV_DWBK.D_VOUCHER "
        + " , TBS_TV_DWBK.D_BILL  , TBS_TV_DWBK.S_ETPCODE  , TBS_TV_DWBK.S_ECOCODE  , TBS_TV_DWBK.C_TRIMFLAG  , TBS_TV_DWBK.S_BIZTYPE "
        + " , TBS_TV_DWBK.S_PACKAGENO  , TBS_TV_DWBK.S_STATUS  , TBS_TV_DWBK.S_FILENAME  , TBS_TV_DWBK.S_BOOKORGCODE  , TBS_TV_DWBK.TS_SYSUPDATE "
        + " , TBS_TV_DWBK.S_ADDWORD "
        + "FROM TBS_TV_DWBK ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "TBS_TV_DWBK.I_VOUSRLNO, TBS_TV_DWBK.S_ELECVOUNO, TBS_TV_DWBK.S_DWBKVOUCODE, TBS_TV_DWBK.S_TAXORGCODE, TBS_TV_DWBK.S_AGENTTAXORGCODE, "
        + "TBS_TV_DWBK.S_PAYERTRECODE, TBS_TV_DWBK.S_AIMTRECODE, TBS_TV_DWBK.C_BDGKIND, TBS_TV_DWBK.C_BDGLEVEL, TBS_TV_DWBK.S_BDGSBTCODE, "
        + "TBS_TV_DWBK.S_DWBKREASONCODE, TBS_TV_DWBK.S_ASTFLAG, TBS_TV_DWBK.S_DWBKBY, TBS_TV_DWBK.F_DWBKRATIO, TBS_TV_DWBK.F_DWBKAMT, "
        + "TBS_TV_DWBK.S_EXAMORG, TBS_TV_DWBK.F_AMT, TBS_TV_DWBK.C_BCKFLAG, TBS_TV_DWBK.S_PAYEECODE, TBS_TV_DWBK.S_PAYEEACCT, "
        + "TBS_TV_DWBK.S_PAYEENAME, TBS_TV_DWBK.S_PAYEEOPNBNKNO, TBS_TV_DWBK.D_ACCEPT, TBS_TV_DWBK.D_ACCT, TBS_TV_DWBK.D_VOUCHER, "
        + "TBS_TV_DWBK.D_BILL, TBS_TV_DWBK.S_ETPCODE, TBS_TV_DWBK.S_ECOCODE, TBS_TV_DWBK.C_TRIMFLAG, TBS_TV_DWBK.S_BIZTYPE, "
        + "TBS_TV_DWBK.S_PACKAGENO, TBS_TV_DWBK.S_STATUS, TBS_TV_DWBK.S_FILENAME, TBS_TV_DWBK.S_BOOKORGCODE, TBS_TV_DWBK.TS_SYSUPDATE, "
        + "TBS_TV_DWBK.S_ADDWORD "
        + "FROM TBS_TV_DWBK " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "I_VOUSRLNO = ? AND S_BOOKORGCODE = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE TBS_TV_DWBK SET "
        + "S_ELECVOUNO =?,S_DWBKVOUCODE =?,S_TAXORGCODE =?,S_AGENTTAXORGCODE =?,S_PAYERTRECODE =?, "
        + "S_AIMTRECODE =?,C_BDGKIND =?,C_BDGLEVEL =?,S_BDGSBTCODE =?,S_DWBKREASONCODE =?, "
        + "S_ASTFLAG =?,S_DWBKBY =?,F_DWBKRATIO =?,F_DWBKAMT =?,S_EXAMORG =?, "
        + "F_AMT =?,C_BCKFLAG =?,S_PAYEECODE =?,S_PAYEEACCT =?,S_PAYEENAME =?, "
        + "S_PAYEEOPNBNKNO =?,D_ACCEPT =?,D_ACCT =?,D_VOUCHER =?,D_BILL =?, "
        + "S_ETPCODE =?,S_ECOCODE =?,C_TRIMFLAG =?,S_BIZTYPE =?,S_PACKAGENO =?, "
        + "S_STATUS =?,S_FILENAME =?,TS_SYSUPDATE =CURRENT TIMESTAMP,S_ADDWORD =? "
        + "WHERE "
        + "I_VOUSRLNO = ? AND S_BOOKORGCODE = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE TBS_TV_DWBK SET "
        + "S_ELECVOUNO =?, S_DWBKVOUCODE =?, S_TAXORGCODE =?, S_AGENTTAXORGCODE =?, S_PAYERTRECODE =?,  "
        + "S_AIMTRECODE =?, C_BDGKIND =?, C_BDGLEVEL =?, S_BDGSBTCODE =?, S_DWBKREASONCODE =?,  "
        + "S_ASTFLAG =?, S_DWBKBY =?, F_DWBKRATIO =?, F_DWBKAMT =?, S_EXAMORG =?,  "
        + "F_AMT =?, C_BCKFLAG =?, S_PAYEECODE =?, S_PAYEEACCT =?, S_PAYEENAME =?,  "
        + "S_PAYEEOPNBNKNO =?, D_ACCEPT =?, D_ACCT =?, D_VOUCHER =?, D_BILL =?,  "
        + "S_ETPCODE =?, S_ECOCODE =?, C_TRIMFLAG =?, S_BIZTYPE =?, S_PACKAGENO =?,  "
        + "S_STATUS =?, S_FILENAME =?, TS_SYSUPDATE =CURRENT TIMESTAMP, S_ADDWORD =? "
        + "WHERE "
        + "I_VOUSRLNO = ? AND S_BOOKORGCODE = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM TBS_TV_DWBK " 
        + " WHERE "
        + "I_VOUSRLNO = ? AND S_BOOKORGCODE = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 2;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     TbsTvDwbkDto dto = (TbsTvDwbkDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
           ps.setString(1, dto.getSelecvouno());

          ps.setString(2, dto.getSdwbkvoucode());

          ps.setString(3, dto.getStaxorgcode());

          ps.setString(4, dto.getSagenttaxorgcode());

          ps.setString(5, dto.getSpayertrecode());

          ps.setString(6, dto.getSaimtrecode());

          ps.setString(7, dto.getCbdgkind());

          ps.setString(8, dto.getCbdglevel());

          ps.setString(9, dto.getSbdgsbtcode());

          ps.setString(10, dto.getSdwbkreasoncode());

          ps.setString(11, dto.getSastflag());

          ps.setString(12, dto.getSdwbkby());

          ps.setBigDecimal(13, dto.getFdwbkratio());

          ps.setBigDecimal(14, dto.getFdwbkamt());

          ps.setString(15, dto.getSexamorg());

          ps.setBigDecimal(16, dto.getFamt());

          ps.setString(17, dto.getCbckflag());

          ps.setString(18, dto.getSpayeecode());

          ps.setString(19, dto.getSpayeeacct());

          ps.setString(20, dto.getSpayeename());

          ps.setString(21, dto.getSpayeeopnbnkno());

          ps.setDate(22, dto.getDaccept());

          ps.setDate(23, dto.getDacct());

          ps.setDate(24, dto.getDvoucher());

          ps.setDate(25, dto.getDbill());

          ps.setString(26, dto.getSetpcode());

          ps.setString(27, dto.getSecocode());

          ps.setString(28, dto.getCtrimflag());

          ps.setString(29, dto.getSbiztype());

          ps.setString(30, dto.getSpackageno());

          ps.setString(31, dto.getSstatus());

          ps.setString(32, dto.getSfilename());

          ps.setString(33, dto.getSbookorgcode());

           ps.setString(34, dto.getSaddword());

         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       TbsTvDwbkDto dto = (TbsTvDwbkDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
             ps.setString(1, dto.getSelecvouno());
            ps.setString(2, dto.getSdwbkvoucode());
            ps.setString(3, dto.getStaxorgcode());
            ps.setString(4, dto.getSagenttaxorgcode());
            ps.setString(5, dto.getSpayertrecode());
            ps.setString(6, dto.getSaimtrecode());
            ps.setString(7, dto.getCbdgkind());
            ps.setString(8, dto.getCbdglevel());
            ps.setString(9, dto.getSbdgsbtcode());
            ps.setString(10, dto.getSdwbkreasoncode());
            ps.setString(11, dto.getSastflag());
            ps.setString(12, dto.getSdwbkby());
            ps.setBigDecimal(13, dto.getFdwbkratio());
            ps.setBigDecimal(14, dto.getFdwbkamt());
            ps.setString(15, dto.getSexamorg());
            ps.setBigDecimal(16, dto.getFamt());
            ps.setString(17, dto.getCbckflag());
            ps.setString(18, dto.getSpayeecode());
            ps.setString(19, dto.getSpayeeacct());
            ps.setString(20, dto.getSpayeename());
            ps.setString(21, dto.getSpayeeopnbnkno());
            ps.setDate(22, dto.getDaccept());
            ps.setDate(23, dto.getDacct());
            ps.setDate(24, dto.getDvoucher());
            ps.setDate(25, dto.getDbill());
            ps.setString(26, dto.getSetpcode());
            ps.setString(27, dto.getSecocode());
            ps.setString(28, dto.getCtrimflag());
            ps.setString(29, dto.getSbiztype());
            ps.setString(30, dto.getSpackageno());
            ps.setString(31, dto.getSstatus());
            ps.setString(32, dto.getSfilename());
            ps.setString(33, dto.getSbookorgcode());
             ps.setString(34, dto.getSaddword());
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        TbsTvDwbkDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (TbsTvDwbkDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (TbsTvDwbkDto)_dtos[i] ; 
   
               ps.setString(1, dto.getSelecvouno());
  
               ps.setString(2, dto.getSdwbkvoucode());
  
               ps.setString(3, dto.getStaxorgcode());
  
               ps.setString(4, dto.getSagenttaxorgcode());
  
               ps.setString(5, dto.getSpayertrecode());
  
               ps.setString(6, dto.getSaimtrecode());
  
               ps.setString(7, dto.getCbdgkind());
  
               ps.setString(8, dto.getCbdglevel());
  
               ps.setString(9, dto.getSbdgsbtcode());
  
               ps.setString(10, dto.getSdwbkreasoncode());
  
               ps.setString(11, dto.getSastflag());
  
               ps.setString(12, dto.getSdwbkby());
  
               ps.setBigDecimal(13, dto.getFdwbkratio());
  
               ps.setBigDecimal(14, dto.getFdwbkamt());
  
               ps.setString(15, dto.getSexamorg());
  
               ps.setBigDecimal(16, dto.getFamt());
  
               ps.setString(17, dto.getCbckflag());
  
               ps.setString(18, dto.getSpayeecode());
  
               ps.setString(19, dto.getSpayeeacct());
  
               ps.setString(20, dto.getSpayeename());
  
               ps.setString(21, dto.getSpayeeopnbnkno());
  
               ps.setDate(22, dto.getDaccept());
  
               ps.setDate(23, dto.getDacct());
  
               ps.setDate(24, dto.getDvoucher());
  
               ps.setDate(25, dto.getDbill());
  
               ps.setString(26, dto.getSetpcode());
  
               ps.setString(27, dto.getSecocode());
  
               ps.setString(28, dto.getCtrimflag());
  
               ps.setString(29, dto.getSbiztype());
  
               ps.setString(30, dto.getSpackageno());
  
               ps.setString(31, dto.getSstatus());
  
               ps.setString(32, dto.getSfilename());
  
               ps.setString(33, dto.getSbookorgcode());
   
               ps.setString(34, dto.getSaddword());
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TbsTvDwbkPK pk = (TbsTvDwbkPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           ps.setString(2, pk.getSbookorgcode());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       TbsTvDwbkPK pk = (TbsTvDwbkPK)_pk ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
           if (pk.getIvousrlno()==null)
               ps.setNull(1, java.sql.Types.BIGINT);
           else
               ps.setLong(1, pk.getIvousrlno().longValue());

           ps.setString(2, pk.getSbookorgcode());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0)
               return (IDto)results.get(0);
           else
               return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
        TbsTvDwbkPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TbsTvDwbkPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (TbsTvDwbkPK)(pks.get(i)) ; 
                   if (pk.getIvousrlno()==null)
                      ps.setNull((i-iBegin)*2+1, java.sql.Types.BIGINT);
                   else
                      ps.setLong((i-iBegin)*2+1, pk.getIvousrlno().longValue());

                   ps.setString((i-iBegin)*2+2, pk.getSbookorgcode());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,0,isLobSupport)); //
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results!=null && results.size() > 0)
        {
            TbsTvDwbkDto[] dtos = new TbsTvDwbkDto[0];
		    dtos = (TbsTvDwbkDto[]) results.toArray(dtos) ;
		    return dtos ;
        }
        else
        {
            return null;
        }
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             TbsTvDwbkDto  dto = new  TbsTvDwbkDto ();
             //I_VOUSRLNO
             str = rs.getString("I_VOUSRLNO");
             if(str!=null){
                dto.setIvousrlno(new Long(str));
             }

             //S_ELECVOUNO
             str = rs.getString("S_ELECVOUNO");
             if (str == null)
                dto.setSelecvouno(null);
             else
                dto.setSelecvouno(str.trim());

             //S_DWBKVOUCODE
             str = rs.getString("S_DWBKVOUCODE");
             if (str == null)
                dto.setSdwbkvoucode(null);
             else
                dto.setSdwbkvoucode(str.trim());

             //S_TAXORGCODE
             str = rs.getString("S_TAXORGCODE");
             if (str == null)
                dto.setStaxorgcode(null);
             else
                dto.setStaxorgcode(str.trim());

             //S_AGENTTAXORGCODE
             str = rs.getString("S_AGENTTAXORGCODE");
             if (str == null)
                dto.setSagenttaxorgcode(null);
             else
                dto.setSagenttaxorgcode(str.trim());

             //S_PAYERTRECODE
             str = rs.getString("S_PAYERTRECODE");
             if (str == null)
                dto.setSpayertrecode(null);
             else
                dto.setSpayertrecode(str.trim());

             //S_AIMTRECODE
             str = rs.getString("S_AIMTRECODE");
             if (str == null)
                dto.setSaimtrecode(null);
             else
                dto.setSaimtrecode(str.trim());

             //C_BDGKIND
             str = rs.getString("C_BDGKIND");
             if (str == null)
                dto.setCbdgkind(null);
             else
                dto.setCbdgkind(str.trim());

             //C_BDGLEVEL
             str = rs.getString("C_BDGLEVEL");
             if (str == null)
                dto.setCbdglevel(null);
             else
                dto.setCbdglevel(str.trim());

             //S_BDGSBTCODE
             str = rs.getString("S_BDGSBTCODE");
             if (str == null)
                dto.setSbdgsbtcode(null);
             else
                dto.setSbdgsbtcode(str.trim());

             //S_DWBKREASONCODE
             str = rs.getString("S_DWBKREASONCODE");
             if (str == null)
                dto.setSdwbkreasoncode(null);
             else
                dto.setSdwbkreasoncode(str.trim());

             //S_ASTFLAG
             str = rs.getString("S_ASTFLAG");
             if (str == null)
                dto.setSastflag(null);
             else
                dto.setSastflag(str.trim());

             //S_DWBKBY
             str = rs.getString("S_DWBKBY");
             if (str == null)
                dto.setSdwbkby(null);
             else
                dto.setSdwbkby(str.trim());

             //F_DWBKRATIO
           dto.setFdwbkratio(rs.getBigDecimal("F_DWBKRATIO"));

             //F_DWBKAMT
           dto.setFdwbkamt(rs.getBigDecimal("F_DWBKAMT"));

             //S_EXAMORG
             str = rs.getString("S_EXAMORG");
             if (str == null)
                dto.setSexamorg(null);
             else
                dto.setSexamorg(str.trim());

             //F_AMT
           dto.setFamt(rs.getBigDecimal("F_AMT"));

             //C_BCKFLAG
             str = rs.getString("C_BCKFLAG");
             if (str == null)
                dto.setCbckflag(null);
             else
                dto.setCbckflag(str.trim());

             //S_PAYEECODE
             str = rs.getString("S_PAYEECODE");
             if (str == null)
                dto.setSpayeecode(null);
             else
                dto.setSpayeecode(str.trim());

             //S_PAYEEACCT
             str = rs.getString("S_PAYEEACCT");
             if (str == null)
                dto.setSpayeeacct(null);
             else
                dto.setSpayeeacct(str.trim());

             //S_PAYEENAME
             str = rs.getString("S_PAYEENAME");
             if (str == null)
                dto.setSpayeename(null);
             else
                dto.setSpayeename(str.trim());

             //S_PAYEEOPNBNKNO
             str = rs.getString("S_PAYEEOPNBNKNO");
             if (str == null)
                dto.setSpayeeopnbnkno(null);
             else
                dto.setSpayeeopnbnkno(str.trim());

             //D_ACCEPT
           dto.setDaccept(rs.getDate("D_ACCEPT"));

             //D_ACCT
           dto.setDacct(rs.getDate("D_ACCT"));

             //D_VOUCHER
           dto.setDvoucher(rs.getDate("D_VOUCHER"));

             //D_BILL
           dto.setDbill(rs.getDate("D_BILL"));

             //S_ETPCODE
             str = rs.getString("S_ETPCODE");
             if (str == null)
                dto.setSetpcode(null);
             else
                dto.setSetpcode(str.trim());

             //S_ECOCODE
             str = rs.getString("S_ECOCODE");
             if (str == null)
                dto.setSecocode(null);
             else
                dto.setSecocode(str.trim());

             //C_TRIMFLAG
             str = rs.getString("C_TRIMFLAG");
             if (str == null)
                dto.setCtrimflag(null);
             else
                dto.setCtrimflag(str.trim());

             //S_BIZTYPE
             str = rs.getString("S_BIZTYPE");
             if (str == null)
                dto.setSbiztype(null);
             else
                dto.setSbiztype(str.trim());

             //S_PACKAGENO
             str = rs.getString("S_PACKAGENO");
             if (str == null)
                dto.setSpackageno(null);
             else
                dto.setSpackageno(str.trim());

             //S_STATUS
             str = rs.getString("S_STATUS");
             if (str == null)
                dto.setSstatus(null);
             else
                dto.setSstatus(str.trim());

             //S_FILENAME
             str = rs.getString("S_FILENAME");
             if (str == null)
                dto.setSfilename(null);
             else
                dto.setSfilename(str.trim());

             //S_BOOKORGCODE
             str = rs.getString("S_BOOKORGCODE");
             if (str == null)
                dto.setSbookorgcode(null);
             else
                dto.setSbookorgcode(str.trim());

             //TS_SYSUPDATE
           dto.setTssysupdate(rs.getTimestamp("TS_SYSUPDATE"));

             //S_ADDWORD
             str = rs.getString("S_ADDWORD");
             if (str == null)
                dto.setSaddword(null);
             else
                dto.setSaddword(str.trim());



            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        TbsTvDwbkDto dto = (TbsTvDwbkDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //S_ELECVOUNO
            ps.setString(pos, dto.getSelecvouno());
            pos++;

            //S_DWBKVOUCODE
            ps.setString(pos, dto.getSdwbkvoucode());
            pos++;

            //S_TAXORGCODE
            ps.setString(pos, dto.getStaxorgcode());
            pos++;

            //S_AGENTTAXORGCODE
            ps.setString(pos, dto.getSagenttaxorgcode());
            pos++;

            //S_PAYERTRECODE
            ps.setString(pos, dto.getSpayertrecode());
            pos++;

            //S_AIMTRECODE
            ps.setString(pos, dto.getSaimtrecode());
            pos++;

            //C_BDGKIND
            ps.setString(pos, dto.getCbdgkind());
            pos++;

            //C_BDGLEVEL
            ps.setString(pos, dto.getCbdglevel());
            pos++;

            //S_BDGSBTCODE
            ps.setString(pos, dto.getSbdgsbtcode());
            pos++;

            //S_DWBKREASONCODE
            ps.setString(pos, dto.getSdwbkreasoncode());
            pos++;

            //S_ASTFLAG
            ps.setString(pos, dto.getSastflag());
            pos++;

            //S_DWBKBY
            ps.setString(pos, dto.getSdwbkby());
            pos++;

            //F_DWBKRATIO
            ps.setBigDecimal(pos, dto.getFdwbkratio());
            pos++;

            //F_DWBKAMT
            ps.setBigDecimal(pos, dto.getFdwbkamt());
            pos++;

            //S_EXAMORG
            ps.setString(pos, dto.getSexamorg());
            pos++;

            //F_AMT
            ps.setBigDecimal(pos, dto.getFamt());
            pos++;

            //C_BCKFLAG
            ps.setString(pos, dto.getCbckflag());
            pos++;

            //S_PAYEECODE
            ps.setString(pos, dto.getSpayeecode());
            pos++;

            //S_PAYEEACCT
            ps.setString(pos, dto.getSpayeeacct());
            pos++;

            //S_PAYEENAME
            ps.setString(pos, dto.getSpayeename());
            pos++;

            //S_PAYEEOPNBNKNO
            ps.setString(pos, dto.getSpayeeopnbnkno());
            pos++;

            //D_ACCEPT
            ps.setDate(pos, dto.getDaccept());
            pos++;

            //D_ACCT
            ps.setDate(pos, dto.getDacct());
            pos++;

            //D_VOUCHER
            ps.setDate(pos, dto.getDvoucher());
            pos++;

            //D_BILL
            ps.setDate(pos, dto.getDbill());
            pos++;

            //S_ETPCODE
            ps.setString(pos, dto.getSetpcode());
            pos++;

            //S_ECOCODE
            ps.setString(pos, dto.getSecocode());
            pos++;

            //C_TRIMFLAG
            ps.setString(pos, dto.getCtrimflag());
            pos++;

            //S_BIZTYPE
            ps.setString(pos, dto.getSbiztype());
            pos++;

            //S_PACKAGENO
            ps.setString(pos, dto.getSpackageno());
            pos++;

            //S_STATUS
            ps.setString(pos, dto.getSstatus());
            pos++;

            //S_FILENAME
            ps.setString(pos, dto.getSfilename());
            pos++;

            //TS_SYSUPDATE
            //S_ADDWORD
            ps.setString(pos, dto.getSaddword());
            pos++;


           //I_VOUSRLNO
           ps.setLong(pos, dto.getIvousrlno().longValue());
           pos++;
           //S_BOOKORGCODE
           ps.setString(pos, dto.getSbookorgcode());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 TbsTvDwbkDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (TbsTvDwbkDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (TbsTvDwbkDto)_dtos[i] ; 
                int pos = 1;
                //S_ELECVOUNO
                 ps.setString(pos, dto.getSelecvouno());
                pos++;

                //S_DWBKVOUCODE
                 ps.setString(pos, dto.getSdwbkvoucode());
                pos++;

                //S_TAXORGCODE
                 ps.setString(pos, dto.getStaxorgcode());
                pos++;

                //S_AGENTTAXORGCODE
                 ps.setString(pos, dto.getSagenttaxorgcode());
                pos++;

                //S_PAYERTRECODE
                 ps.setString(pos, dto.getSpayertrecode());
                pos++;

                //S_AIMTRECODE
                 ps.setString(pos, dto.getSaimtrecode());
                pos++;

                //C_BDGKIND
                 ps.setString(pos, dto.getCbdgkind());
                pos++;

                //C_BDGLEVEL
                 ps.setString(pos, dto.getCbdglevel());
                pos++;

                //S_BDGSBTCODE
                 ps.setString(pos, dto.getSbdgsbtcode());
                pos++;

                //S_DWBKREASONCODE
                 ps.setString(pos, dto.getSdwbkreasoncode());
                pos++;

                //S_ASTFLAG
                 ps.setString(pos, dto.getSastflag());
                pos++;

                //S_DWBKBY
                 ps.setString(pos, dto.getSdwbkby());
                pos++;

                //F_DWBKRATIO
                 ps.setBigDecimal(pos, dto.getFdwbkratio());
                pos++;

                //F_DWBKAMT
                 ps.setBigDecimal(pos, dto.getFdwbkamt());
                pos++;

                //S_EXAMORG
                 ps.setString(pos, dto.getSexamorg());
                pos++;

                //F_AMT
                 ps.setBigDecimal(pos, dto.getFamt());
                pos++;

                //C_BCKFLAG
                 ps.setString(pos, dto.getCbckflag());
                pos++;

                //S_PAYEECODE
                 ps.setString(pos, dto.getSpayeecode());
                pos++;

                //S_PAYEEACCT
                 ps.setString(pos, dto.getSpayeeacct());
                pos++;

                //S_PAYEENAME
                 ps.setString(pos, dto.getSpayeename());
                pos++;

                //S_PAYEEOPNBNKNO
                 ps.setString(pos, dto.getSpayeeopnbnkno());
                pos++;

                //D_ACCEPT
                 ps.setDate(pos, dto.getDaccept());
                pos++;

                //D_ACCT
                 ps.setDate(pos, dto.getDacct());
                pos++;

                //D_VOUCHER
                 ps.setDate(pos, dto.getDvoucher());
                pos++;

                //D_BILL
                 ps.setDate(pos, dto.getDbill());
                pos++;

                //S_ETPCODE
                 ps.setString(pos, dto.getSetpcode());
                pos++;

                //S_ECOCODE
                 ps.setString(pos, dto.getSecocode());
                pos++;

                //C_TRIMFLAG
                 ps.setString(pos, dto.getCtrimflag());
                pos++;

                //S_BIZTYPE
                 ps.setString(pos, dto.getSbiztype());
                pos++;

                //S_PACKAGENO
                 ps.setString(pos, dto.getSpackageno());
                pos++;

                //S_STATUS
                 ps.setString(pos, dto.getSstatus());
                pos++;

                //S_FILENAME
                 ps.setString(pos, dto.getSfilename());
                pos++;

                //TS_SYSUPDATE
                 //S_ADDWORD
                 ps.setString(pos, dto.getSaddword());
                pos++;


               //I_VOUSRLNO
               ps.setLong(pos, dto.getIvousrlno().longValue());
               pos++;
               //S_BOOKORGCODE
               ps.setString(pos, dto.getSbookorgcode());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }
       TbsTvDwbkPK pk = (TbsTvDwbkPK)_pk ;


       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
           ps.setLong(1, pk.getIvousrlno().longValue());
           ps.setString(2, pk.getSbookorgcode());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        TbsTvDwbkPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (TbsTvDwbkPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (TbsTvDwbkPK)(pks.get(i)) ; 
                ps.setLong(1, pk.getIvousrlno().longValue());
                ps.setString(2, pk.getSbookorgcode());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                                                                      		throw new SQLException("数据库表：TBS_TV_DWBK没有检查修改的字段");
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("本dto没有与其它dto相关联，无法得到子dto");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e){}
        }
    }
}
