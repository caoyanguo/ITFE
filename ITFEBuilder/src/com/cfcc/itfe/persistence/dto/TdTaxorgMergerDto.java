    
package com.cfcc.itfe.persistence.dto;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.itfe.persistence.pk.TdTaxorgMergerPK;
/**
 * <p>Title: DTO of table: TD_TAXORG_MERGER</p>
 * <p>Description:  Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:57 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author win7
 */

public class TdTaxorgMergerDto   
                              implements IDto  {
/********************************************************
 *   fields
 ********************************************************/

    /**
    *  S_BOOKORGCODE CHARACTER , PK   , NOT NULL       */
    protected String sbookorgcode;
    /**
    *  S_PRETAXORGCODE VARCHAR , PK   , NOT NULL       */
    protected String spretaxorgcode;
    /**
    *  S_AFTERTAXORGCODE VARCHAR , PK   , NOT NULL       */
    protected String saftertaxorgcode;
    /**
    *  S_TAXORGNAME VARCHAR         */
    protected String staxorgname;
    /**
    *  TS_SYSUPDATE TIMESTAMP   , NOT NULL       */
    protected Timestamp tssysupdate;
    /**
    *  S_BIZTYPE CHARACTER         */
    protected String sbiztype;


/******************************************************
*
*  getter and setter
*
*******************************************************/


    public String getSbookorgcode()
    {
        return sbookorgcode;
    }
     /**
     *   Setter S_BOOKORGCODE, PK , NOT NULL        * */
    public void setSbookorgcode(String _sbookorgcode) {
        this.sbookorgcode = _sbookorgcode;
    }


    public String getSpretaxorgcode()
    {
        return spretaxorgcode;
    }
     /**
     *   Setter S_PRETAXORGCODE, PK , NOT NULL        * */
    public void setSpretaxorgcode(String _spretaxorgcode) {
        this.spretaxorgcode = _spretaxorgcode;
    }


    public String getSaftertaxorgcode()
    {
        return saftertaxorgcode;
    }
     /**
     *   Setter S_AFTERTAXORGCODE, PK , NOT NULL        * */
    public void setSaftertaxorgcode(String _saftertaxorgcode) {
        this.saftertaxorgcode = _saftertaxorgcode;
    }


    public String getStaxorgname()
    {
        return staxorgname;
    }
     /**
     *   Setter S_TAXORGNAME        * */
    public void setStaxorgname(String _staxorgname) {
        this.staxorgname = _staxorgname;
    }


    public Timestamp getTssysupdate()
    {
        return tssysupdate;
    }
     /**
     *   Setter TS_SYSUPDATE , NOT NULL        * */
    public void setTssysupdate(Timestamp _tssysupdate) {
        this.tssysupdate = _tssysupdate;
    }


    public String getSbiztype()
    {
        return sbiztype;
    }
     /**
     *   Setter S_BIZTYPE        * */
    public void setSbiztype(String _sbiztype) {
        this.sbiztype = _sbiztype;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *   Getter S_BOOKORGCODE, PK , NOT NULL       * */
    public static String  columnSbookorgcode()
    {
        return "S_BOOKORGCODE";
    }
   
    /**
    *   Getter S_PRETAXORGCODE, PK , NOT NULL       * */
    public static String  columnSpretaxorgcode()
    {
        return "S_PRETAXORGCODE";
    }
   
    /**
    *   Getter S_AFTERTAXORGCODE, PK , NOT NULL       * */
    public static String  columnSaftertaxorgcode()
    {
        return "S_AFTERTAXORGCODE";
    }
   
    /**
    *   Getter S_TAXORGNAME       * */
    public static String  columnStaxorgname()
    {
        return "S_TAXORGNAME";
    }
   
    /**
    *   Getter TS_SYSUPDATE , NOT NULL       * */
    public static String  columnTssysupdate()
    {
        return "TS_SYSUPDATE";
    }
   
    /**
    *   Getter S_BIZTYPE       * */
    public static String  columnSbiztype()
    {
        return "S_BIZTYPE";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "TD_TAXORG_MERGER";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[6];        
        columnNames[0]="S_BOOKORGCODE";
        columnNames[1]="S_PRETAXORGCODE";
        columnNames[2]="S_AFTERTAXORGCODE";
        columnNames[3]="S_TAXORGNAME";
        columnNames[4]="TS_SYSUPDATE";
        columnNames[5]="S_BIZTYPE";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof TdTaxorgMergerDto))
            return false;

        TdTaxorgMergerDto bean = (TdTaxorgMergerDto) obj;


      //compare field sbookorgcode
      if((this.sbookorgcode==null && bean.sbookorgcode!=null) || (this.sbookorgcode!=null && bean.sbookorgcode==null))
          return false;
        else if(this.sbookorgcode==null && bean.sbookorgcode==null){
        }
        else{
          if(!bean.sbookorgcode.equals(this.sbookorgcode))
               return false;
     }
      //compare field spretaxorgcode
      if((this.spretaxorgcode==null && bean.spretaxorgcode!=null) || (this.spretaxorgcode!=null && bean.spretaxorgcode==null))
          return false;
        else if(this.spretaxorgcode==null && bean.spretaxorgcode==null){
        }
        else{
          if(!bean.spretaxorgcode.equals(this.spretaxorgcode))
               return false;
     }
      //compare field saftertaxorgcode
      if((this.saftertaxorgcode==null && bean.saftertaxorgcode!=null) || (this.saftertaxorgcode!=null && bean.saftertaxorgcode==null))
          return false;
        else if(this.saftertaxorgcode==null && bean.saftertaxorgcode==null){
        }
        else{
          if(!bean.saftertaxorgcode.equals(this.saftertaxorgcode))
               return false;
     }
      //compare field staxorgname
      if((this.staxorgname==null && bean.staxorgname!=null) || (this.staxorgname!=null && bean.staxorgname==null))
          return false;
        else if(this.staxorgname==null && bean.staxorgname==null){
        }
        else{
          if(!bean.staxorgname.equals(this.staxorgname))
               return false;
     }
      //compare field tssysupdate
      if((this.tssysupdate==null && bean.tssysupdate!=null) || (this.tssysupdate!=null && bean.tssysupdate==null))
          return false;
        else if(this.tssysupdate==null && bean.tssysupdate==null){
        }
        else{
          if(!bean.tssysupdate.equals(this.tssysupdate))
               return false;
     }
      //compare field sbiztype
      if((this.sbiztype==null && bean.sbiztype!=null) || (this.sbiztype!=null && bean.sbiztype==null))
          return false;
        else if(this.sbiztype==null && bean.sbiztype==null){
        }
        else{
          if(!bean.sbiztype.equals(this.sbiztype))
               return false;
     }



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.sbookorgcode!=null)
          _hash_ = _hash_ * 31+ this.sbookorgcode.hashCode() ;
        if(this.spretaxorgcode!=null)
          _hash_ = _hash_ * 31+ this.spretaxorgcode.hashCode() ;
        if(this.saftertaxorgcode!=null)
          _hash_ = _hash_ * 31+ this.saftertaxorgcode.hashCode() ;
        if(this.staxorgname!=null)
          _hash_ = _hash_ * 31+ this.staxorgname.hashCode() ;
        if(this.tssysupdate!=null)
          _hash_ = _hash_ * 31+ this.tssysupdate.hashCode() ;
        if(this.sbiztype!=null)
          _hash_ = _hash_ * 31+ this.sbiztype.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        TdTaxorgMergerDto bean = new TdTaxorgMergerDto();

          bean.sbookorgcode = this.sbookorgcode;

          bean.spretaxorgcode = this.spretaxorgcode;

          bean.saftertaxorgcode = this.saftertaxorgcode;

          if (this.staxorgname != null)
            bean.staxorgname = new String(this.staxorgname);
          if (this.tssysupdate != null)
            bean.tssysupdate = (Timestamp) this.tssysupdate.clone();
          if (this.sbiztype != null)
            bean.sbiztype = new String(this.sbiztype);
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("TdTaxorgMergerDto").append(sep);
        sb.append("[sbookorgcode]").append(" = ").append(sbookorgcode).append(sep);
        sb.append("[spretaxorgcode]").append(" = ").append(spretaxorgcode).append(sep);
        sb.append("[saftertaxorgcode]").append(" = ").append(saftertaxorgcode).append(sep);
        sb.append("[staxorgname]").append(" = ").append(staxorgname).append(sep);
        sb.append("[tssysupdate]").append(" = ").append(tssysupdate).append(sep);
        sb.append("[sbiztype]").append(" = ").append(sbiztype).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field S_BOOKORGCODE
      if (this.getSbookorgcode()==null)
             sb.append("S_BOOKORGCODE不能为空; ");
      if (this.getSbookorgcode()!=null)
             if (this.getSbookorgcode().getBytes().length > 12)
                sb.append("S_BOOKORGCODE宽度不能超过 "+12+"个字符; ");
    
    //check field S_PRETAXORGCODE
      if (this.getSpretaxorgcode()==null)
             sb.append("S_PRETAXORGCODE不能为空; ");
      if (this.getSpretaxorgcode()!=null)
             if (this.getSpretaxorgcode().getBytes().length > 20)
                sb.append("S_PRETAXORGCODE宽度不能超过 "+20+"个字符; ");
    
    //check field S_AFTERTAXORGCODE
      if (this.getSaftertaxorgcode()==null)
             sb.append("S_AFTERTAXORGCODE不能为空; ");
      if (this.getSaftertaxorgcode()!=null)
             if (this.getSaftertaxorgcode().getBytes().length > 20)
                sb.append("S_AFTERTAXORGCODE宽度不能超过 "+20+"个字符; ");
    
    //check field S_TAXORGNAME
      if (this.getStaxorgname()!=null)
             if (this.getStaxorgname().getBytes().length > 60)
                sb.append("S_TAXORGNAME宽度不能超过 "+60+"个字符; ");
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  
    //check field S_BIZTYPE
      if (this.getSbiztype()!=null)
             if (this.getSbiztype().getBytes().length > 1)
                sb.append("S_BIZTYPE宽度不能超过 "+1+"个字符; ");
    

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field S_BOOKORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_BOOKORGCODE")) {
               if (this.getSbookorgcode()==null)
                    sb.append("S_BOOKORGCODE 不能为空; ");
               if (this.getSbookorgcode()!=null)
                    if (this.getSbookorgcode().getBytes().length > 12)
                        sb.append("S_BOOKORGCODE 宽度不能超过 "+12+"个字符");
             break;
         }
  }
    
    //check field S_PRETAXORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_PRETAXORGCODE")) {
               if (this.getSpretaxorgcode()==null)
                    sb.append("S_PRETAXORGCODE 不能为空; ");
               if (this.getSpretaxorgcode()!=null)
                    if (this.getSpretaxorgcode().getBytes().length > 20)
                        sb.append("S_PRETAXORGCODE 宽度不能超过 "+20+"个字符");
             break;
         }
  }
    
    //check field S_AFTERTAXORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_AFTERTAXORGCODE")) {
               if (this.getSaftertaxorgcode()==null)
                    sb.append("S_AFTERTAXORGCODE 不能为空; ");
               if (this.getSaftertaxorgcode()!=null)
                    if (this.getSaftertaxorgcode().getBytes().length > 20)
                        sb.append("S_AFTERTAXORGCODE 宽度不能超过 "+20+"个字符");
             break;
         }
  }
    
    //check field S_TAXORGNAME
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_TAXORGNAME")) {
                 if (this.getStaxorgname()!=null)
                    if (this.getStaxorgname().getBytes().length > 60)
                        sb.append("S_TAXORGNAME 宽度不能超过 "+60+"个字符");
             break;
         }
  }
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  
    //check field S_BIZTYPE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_BIZTYPE")) {
                 if (this.getSbiztype()!=null)
                    if (this.getSbiztype().getBytes().length > 1)
                        sb.append("S_BIZTYPE 宽度不能超过 "+1+"个字符");
             break;
         }
  }
    
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数; ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段 " + _columnNames[i] + " 不在该表字段中; ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      TdTaxorgMergerPK pk = new TdTaxorgMergerPK();
      pk.setSbookorgcode(getSbookorgcode());
      pk.setSpretaxorgcode(getSpretaxorgcode());
      pk.setSaftertaxorgcode(getSaftertaxorgcode());
      return pk;
    };
}
