    
package com.cfcc.itfe.persistence.dto;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.itfe.persistence.pk.TfInterestrateMsgPK;
/**
 * <p>Title: DTO of table: TF_INTERESTRATE_MSG</p>
 * <p>Description: 计息统计信息表 Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:58 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author win7
 */

public class TfInterestrateMsgDto   
                              implements IDto  {
/********************************************************
 *   fields
 ********************************************************/

    /**
    * 主键 I_VOUSRLNO BIGINT , PK   , NOT NULL       */
    protected Long ivousrlno;
    /**
    * 机构代码 S_ORGCODE VARCHAR   , NOT NULL       */
    protected String sorgcode;
    /**
    * 年度 S_YEAR VARCHAR         */
    protected String syear;
    /**
    * 季度 S_QUARTER VARCHAR         */
    protected String squarter;
    /**
    * 季度开始日期 S_STARTDATE VARCHAR         */
    protected String sstartdate;
    /**
    * 季度截止日期 S_ENDDATE VARCHAR         */
    protected String senddate;
    /**
    * 行别 S_BANKTYPE VARCHAR         */
    protected String sbanktype;
    /**
    * 利息积数 N_INTERESTRATE_COUNT DECIMAL         */
    protected BigDecimal ninterestratecount;
    /**
    * 利率 N_INTEREST_RATES DECIMAL         */
    protected BigDecimal ninterestrates;
    /**
    * 利息 N_INTEREST_VALUE DECIMAL         */
    protected BigDecimal ninterestvalue;
    /**
    * 用户 S_UESRCODE VARCHAR         */
    protected String suesrcode;
    /**
    * 状态 S_STATUS VARCHAR         */
    protected String sstatus;
    /**
    * 描述 S_DEMO VARCHAR         */
    protected String sdemo;
    /**
    * 系统时间 TS_SYSUPDATE TIMESTAMP         */
    protected Timestamp tssysupdate;
    /**
    * 扩展 S_EXT1 VARCHAR         */
    protected String sext1;
    /**
    * 扩展 S_EXT2 VARCHAR         */
    protected String sext2;
    /**
    * 扩展 S_EXT3 VARCHAR         */
    protected String sext3;


/******************************************************
*
*  getter and setter
*
*******************************************************/


    public Long getIvousrlno()
    {
        return ivousrlno;
    }
     /**
     *  主键 Setter I_VOUSRLNO, PK , NOT NULL        * */
    public void setIvousrlno(Long _ivousrlno) {
        this.ivousrlno = _ivousrlno;
    }


    public String getSorgcode()
    {
        return sorgcode;
    }
     /**
     *  机构代码 Setter S_ORGCODE , NOT NULL        * */
    public void setSorgcode(String _sorgcode) {
        this.sorgcode = _sorgcode;
    }


    public String getSyear()
    {
        return syear;
    }
     /**
     *  年度 Setter S_YEAR        * */
    public void setSyear(String _syear) {
        this.syear = _syear;
    }


    public String getSquarter()
    {
        return squarter;
    }
     /**
     *  季度 Setter S_QUARTER        * */
    public void setSquarter(String _squarter) {
        this.squarter = _squarter;
    }


    public String getSstartdate()
    {
        return sstartdate;
    }
     /**
     *  季度开始日期 Setter S_STARTDATE        * */
    public void setSstartdate(String _sstartdate) {
        this.sstartdate = _sstartdate;
    }


    public String getSenddate()
    {
        return senddate;
    }
     /**
     *  季度截止日期 Setter S_ENDDATE        * */
    public void setSenddate(String _senddate) {
        this.senddate = _senddate;
    }


    public String getSbanktype()
    {
        return sbanktype;
    }
     /**
     *  行别 Setter S_BANKTYPE        * */
    public void setSbanktype(String _sbanktype) {
        this.sbanktype = _sbanktype;
    }


    public BigDecimal getNinterestratecount()
    {
        return ninterestratecount;
    }
     /**
     *  利息积数 Setter N_INTERESTRATE_COUNT        * */
    public void setNinterestratecount(BigDecimal _ninterestratecount) {
        this.ninterestratecount = _ninterestratecount;
    }


    public BigDecimal getNinterestrates()
    {
        return ninterestrates;
    }
     /**
     *  利率 Setter N_INTEREST_RATES        * */
    public void setNinterestrates(BigDecimal _ninterestrates) {
        this.ninterestrates = _ninterestrates;
    }


    public BigDecimal getNinterestvalue()
    {
        return ninterestvalue;
    }
     /**
     *  利息 Setter N_INTEREST_VALUE        * */
    public void setNinterestvalue(BigDecimal _ninterestvalue) {
        this.ninterestvalue = _ninterestvalue;
    }


    public String getSuesrcode()
    {
        return suesrcode;
    }
     /**
     *  用户 Setter S_UESRCODE        * */
    public void setSuesrcode(String _suesrcode) {
        this.suesrcode = _suesrcode;
    }


    public String getSstatus()
    {
        return sstatus;
    }
     /**
     *  状态 Setter S_STATUS        * */
    public void setSstatus(String _sstatus) {
        this.sstatus = _sstatus;
    }


    public String getSdemo()
    {
        return sdemo;
    }
     /**
     *  描述 Setter S_DEMO        * */
    public void setSdemo(String _sdemo) {
        this.sdemo = _sdemo;
    }


    public Timestamp getTssysupdate()
    {
        return tssysupdate;
    }
     /**
     *  系统时间 Setter TS_SYSUPDATE        * */
    public void setTssysupdate(Timestamp _tssysupdate) {
        this.tssysupdate = _tssysupdate;
    }


    public String getSext1()
    {
        return sext1;
    }
     /**
     *  扩展 Setter S_EXT1        * */
    public void setSext1(String _sext1) {
        this.sext1 = _sext1;
    }


    public String getSext2()
    {
        return sext2;
    }
     /**
     *  扩展 Setter S_EXT2        * */
    public void setSext2(String _sext2) {
        this.sext2 = _sext2;
    }


    public String getSext3()
    {
        return sext3;
    }
     /**
     *  扩展 Setter S_EXT3        * */
    public void setSext3(String _sext3) {
        this.sext3 = _sext3;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *  主键 Getter I_VOUSRLNO, PK , NOT NULL       * */
    public static String  columnIvousrlno()
    {
        return "I_VOUSRLNO";
    }
   
    /**
    *  机构代码 Getter S_ORGCODE , NOT NULL       * */
    public static String  columnSorgcode()
    {
        return "S_ORGCODE";
    }
   
    /**
    *  年度 Getter S_YEAR       * */
    public static String  columnSyear()
    {
        return "S_YEAR";
    }
   
    /**
    *  季度 Getter S_QUARTER       * */
    public static String  columnSquarter()
    {
        return "S_QUARTER";
    }
   
    /**
    *  季度开始日期 Getter S_STARTDATE       * */
    public static String  columnSstartdate()
    {
        return "S_STARTDATE";
    }
   
    /**
    *  季度截止日期 Getter S_ENDDATE       * */
    public static String  columnSenddate()
    {
        return "S_ENDDATE";
    }
   
    /**
    *  行别 Getter S_BANKTYPE       * */
    public static String  columnSbanktype()
    {
        return "S_BANKTYPE";
    }
   
    /**
    *  利息积数 Getter N_INTERESTRATE_COUNT       * */
    public static String  columnNinterestratecount()
    {
        return "N_INTERESTRATE_COUNT";
    }
   
    /**
    *  利率 Getter N_INTEREST_RATES       * */
    public static String  columnNinterestrates()
    {
        return "N_INTEREST_RATES";
    }
   
    /**
    *  利息 Getter N_INTEREST_VALUE       * */
    public static String  columnNinterestvalue()
    {
        return "N_INTEREST_VALUE";
    }
   
    /**
    *  用户 Getter S_UESRCODE       * */
    public static String  columnSuesrcode()
    {
        return "S_UESRCODE";
    }
   
    /**
    *  状态 Getter S_STATUS       * */
    public static String  columnSstatus()
    {
        return "S_STATUS";
    }
   
    /**
    *  描述 Getter S_DEMO       * */
    public static String  columnSdemo()
    {
        return "S_DEMO";
    }
   
    /**
    *  系统时间 Getter TS_SYSUPDATE       * */
    public static String  columnTssysupdate()
    {
        return "TS_SYSUPDATE";
    }
   
    /**
    *  扩展 Getter S_EXT1       * */
    public static String  columnSext1()
    {
        return "S_EXT1";
    }
   
    /**
    *  扩展 Getter S_EXT2       * */
    public static String  columnSext2()
    {
        return "S_EXT2";
    }
   
    /**
    *  扩展 Getter S_EXT3       * */
    public static String  columnSext3()
    {
        return "S_EXT3";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "TF_INTERESTRATE_MSG";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[17];        
        columnNames[0]="I_VOUSRLNO";
        columnNames[1]="S_ORGCODE";
        columnNames[2]="S_YEAR";
        columnNames[3]="S_QUARTER";
        columnNames[4]="S_STARTDATE";
        columnNames[5]="S_ENDDATE";
        columnNames[6]="S_BANKTYPE";
        columnNames[7]="N_INTERESTRATE_COUNT";
        columnNames[8]="N_INTEREST_RATES";
        columnNames[9]="N_INTEREST_VALUE";
        columnNames[10]="S_UESRCODE";
        columnNames[11]="S_STATUS";
        columnNames[12]="S_DEMO";
        columnNames[13]="TS_SYSUPDATE";
        columnNames[14]="S_EXT1";
        columnNames[15]="S_EXT2";
        columnNames[16]="S_EXT3";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof TfInterestrateMsgDto))
            return false;

        TfInterestrateMsgDto bean = (TfInterestrateMsgDto) obj;


      //compare field ivousrlno
      if((this.ivousrlno==null && bean.ivousrlno!=null) || (this.ivousrlno!=null && bean.ivousrlno==null))
          return false;
        else if(this.ivousrlno==null && bean.ivousrlno==null){
        }
        else{
          if(!bean.ivousrlno.equals(this.ivousrlno))
               return false;
     }
      //compare field sorgcode
      if((this.sorgcode==null && bean.sorgcode!=null) || (this.sorgcode!=null && bean.sorgcode==null))
          return false;
        else if(this.sorgcode==null && bean.sorgcode==null){
        }
        else{
          if(!bean.sorgcode.equals(this.sorgcode))
               return false;
     }
      //compare field syear
      if((this.syear==null && bean.syear!=null) || (this.syear!=null && bean.syear==null))
          return false;
        else if(this.syear==null && bean.syear==null){
        }
        else{
          if(!bean.syear.equals(this.syear))
               return false;
     }
      //compare field squarter
      if((this.squarter==null && bean.squarter!=null) || (this.squarter!=null && bean.squarter==null))
          return false;
        else if(this.squarter==null && bean.squarter==null){
        }
        else{
          if(!bean.squarter.equals(this.squarter))
               return false;
     }
      //compare field sstartdate
      if((this.sstartdate==null && bean.sstartdate!=null) || (this.sstartdate!=null && bean.sstartdate==null))
          return false;
        else if(this.sstartdate==null && bean.sstartdate==null){
        }
        else{
          if(!bean.sstartdate.equals(this.sstartdate))
               return false;
     }
      //compare field senddate
      if((this.senddate==null && bean.senddate!=null) || (this.senddate!=null && bean.senddate==null))
          return false;
        else if(this.senddate==null && bean.senddate==null){
        }
        else{
          if(!bean.senddate.equals(this.senddate))
               return false;
     }
      //compare field sbanktype
      if((this.sbanktype==null && bean.sbanktype!=null) || (this.sbanktype!=null && bean.sbanktype==null))
          return false;
        else if(this.sbanktype==null && bean.sbanktype==null){
        }
        else{
          if(!bean.sbanktype.equals(this.sbanktype))
               return false;
     }
      //compare field ninterestratecount
      if((this.ninterestratecount==null && bean.ninterestratecount!=null) || (this.ninterestratecount!=null && bean.ninterestratecount==null))
          return false;
        else if(this.ninterestratecount==null && bean.ninterestratecount==null){
        }
        else{
          if(!bean.ninterestratecount.equals(this.ninterestratecount))
               return false;
     }
      //compare field ninterestrates
      if((this.ninterestrates==null && bean.ninterestrates!=null) || (this.ninterestrates!=null && bean.ninterestrates==null))
          return false;
        else if(this.ninterestrates==null && bean.ninterestrates==null){
        }
        else{
          if(!bean.ninterestrates.equals(this.ninterestrates))
               return false;
     }
      //compare field ninterestvalue
      if((this.ninterestvalue==null && bean.ninterestvalue!=null) || (this.ninterestvalue!=null && bean.ninterestvalue==null))
          return false;
        else if(this.ninterestvalue==null && bean.ninterestvalue==null){
        }
        else{
          if(!bean.ninterestvalue.equals(this.ninterestvalue))
               return false;
     }
      //compare field suesrcode
      if((this.suesrcode==null && bean.suesrcode!=null) || (this.suesrcode!=null && bean.suesrcode==null))
          return false;
        else if(this.suesrcode==null && bean.suesrcode==null){
        }
        else{
          if(!bean.suesrcode.equals(this.suesrcode))
               return false;
     }
      //compare field sstatus
      if((this.sstatus==null && bean.sstatus!=null) || (this.sstatus!=null && bean.sstatus==null))
          return false;
        else if(this.sstatus==null && bean.sstatus==null){
        }
        else{
          if(!bean.sstatus.equals(this.sstatus))
               return false;
     }
      //compare field sdemo
      if((this.sdemo==null && bean.sdemo!=null) || (this.sdemo!=null && bean.sdemo==null))
          return false;
        else if(this.sdemo==null && bean.sdemo==null){
        }
        else{
          if(!bean.sdemo.equals(this.sdemo))
               return false;
     }
      //compare field tssysupdate
      if((this.tssysupdate==null && bean.tssysupdate!=null) || (this.tssysupdate!=null && bean.tssysupdate==null))
          return false;
        else if(this.tssysupdate==null && bean.tssysupdate==null){
        }
        else{
          if(!bean.tssysupdate.equals(this.tssysupdate))
               return false;
     }
      //compare field sext1
      if((this.sext1==null && bean.sext1!=null) || (this.sext1!=null && bean.sext1==null))
          return false;
        else if(this.sext1==null && bean.sext1==null){
        }
        else{
          if(!bean.sext1.equals(this.sext1))
               return false;
     }
      //compare field sext2
      if((this.sext2==null && bean.sext2!=null) || (this.sext2!=null && bean.sext2==null))
          return false;
        else if(this.sext2==null && bean.sext2==null){
        }
        else{
          if(!bean.sext2.equals(this.sext2))
               return false;
     }
      //compare field sext3
      if((this.sext3==null && bean.sext3!=null) || (this.sext3!=null && bean.sext3==null))
          return false;
        else if(this.sext3==null && bean.sext3==null){
        }
        else{
          if(!bean.sext3.equals(this.sext3))
               return false;
     }



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.ivousrlno!=null)
          _hash_ = _hash_ * 31+ this.ivousrlno.hashCode() ;
        if(this.sorgcode!=null)
          _hash_ = _hash_ * 31+ this.sorgcode.hashCode() ;
        if(this.syear!=null)
          _hash_ = _hash_ * 31+ this.syear.hashCode() ;
        if(this.squarter!=null)
          _hash_ = _hash_ * 31+ this.squarter.hashCode() ;
        if(this.sstartdate!=null)
          _hash_ = _hash_ * 31+ this.sstartdate.hashCode() ;
        if(this.senddate!=null)
          _hash_ = _hash_ * 31+ this.senddate.hashCode() ;
        if(this.sbanktype!=null)
          _hash_ = _hash_ * 31+ this.sbanktype.hashCode() ;
        if(this.ninterestratecount!=null)
          _hash_ = _hash_ * 31+ this.ninterestratecount.hashCode() ;
        if(this.ninterestrates!=null)
          _hash_ = _hash_ * 31+ this.ninterestrates.hashCode() ;
        if(this.ninterestvalue!=null)
          _hash_ = _hash_ * 31+ this.ninterestvalue.hashCode() ;
        if(this.suesrcode!=null)
          _hash_ = _hash_ * 31+ this.suesrcode.hashCode() ;
        if(this.sstatus!=null)
          _hash_ = _hash_ * 31+ this.sstatus.hashCode() ;
        if(this.sdemo!=null)
          _hash_ = _hash_ * 31+ this.sdemo.hashCode() ;
        if(this.tssysupdate!=null)
          _hash_ = _hash_ * 31+ this.tssysupdate.hashCode() ;
        if(this.sext1!=null)
          _hash_ = _hash_ * 31+ this.sext1.hashCode() ;
        if(this.sext2!=null)
          _hash_ = _hash_ * 31+ this.sext2.hashCode() ;
        if(this.sext3!=null)
          _hash_ = _hash_ * 31+ this.sext3.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        TfInterestrateMsgDto bean = new TfInterestrateMsgDto();

          bean.ivousrlno = this.ivousrlno;

          if (this.sorgcode != null)
            bean.sorgcode = new String(this.sorgcode);
          if (this.syear != null)
            bean.syear = new String(this.syear);
          if (this.squarter != null)
            bean.squarter = new String(this.squarter);
          if (this.sstartdate != null)
            bean.sstartdate = new String(this.sstartdate);
          if (this.senddate != null)
            bean.senddate = new String(this.senddate);
          if (this.sbanktype != null)
            bean.sbanktype = new String(this.sbanktype);
          if (this.ninterestratecount != null)
            bean.ninterestratecount = new BigDecimal(this.ninterestratecount.toString());
          if (this.ninterestrates != null)
            bean.ninterestrates = new BigDecimal(this.ninterestrates.toString());
          if (this.ninterestvalue != null)
            bean.ninterestvalue = new BigDecimal(this.ninterestvalue.toString());
          if (this.suesrcode != null)
            bean.suesrcode = new String(this.suesrcode);
          if (this.sstatus != null)
            bean.sstatus = new String(this.sstatus);
          if (this.sdemo != null)
            bean.sdemo = new String(this.sdemo);
          if (this.tssysupdate != null)
            bean.tssysupdate = (Timestamp) this.tssysupdate.clone();
          if (this.sext1 != null)
            bean.sext1 = new String(this.sext1);
          if (this.sext2 != null)
            bean.sext2 = new String(this.sext2);
          if (this.sext3 != null)
            bean.sext3 = new String(this.sext3);
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("TfInterestrateMsgDto").append(sep);
        sb.append("[ivousrlno]").append(" = ").append(ivousrlno).append(sep);
        sb.append("[sorgcode]").append(" = ").append(sorgcode).append(sep);
        sb.append("[syear]").append(" = ").append(syear).append(sep);
        sb.append("[squarter]").append(" = ").append(squarter).append(sep);
        sb.append("[sstartdate]").append(" = ").append(sstartdate).append(sep);
        sb.append("[senddate]").append(" = ").append(senddate).append(sep);
        sb.append("[sbanktype]").append(" = ").append(sbanktype).append(sep);
        sb.append("[ninterestratecount]").append(" = ").append(ninterestratecount).append(sep);
        sb.append("[ninterestrates]").append(" = ").append(ninterestrates).append(sep);
        sb.append("[ninterestvalue]").append(" = ").append(ninterestvalue).append(sep);
        sb.append("[suesrcode]").append(" = ").append(suesrcode).append(sep);
        sb.append("[sstatus]").append(" = ").append(sstatus).append(sep);
        sb.append("[sdemo]").append(" = ").append(sdemo).append(sep);
        sb.append("[tssysupdate]").append(" = ").append(tssysupdate).append(sep);
        sb.append("[sext1]").append(" = ").append(sext1).append(sep);
        sb.append("[sext2]").append(" = ").append(sext2).append(sep);
        sb.append("[sext3]").append(" = ").append(sext3).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field I_VOUSRLNO
      if (this.getIvousrlno()==null)
             sb.append("I_VOUSRLNO主键不能为空; ");
      
    //check field S_ORGCODE
      if (this.getSorgcode()==null)
             sb.append("S_ORGCODE机构代码不能为空; ");
      if (this.getSorgcode()!=null)
             if (this.getSorgcode().getBytes().length > 12)
                sb.append("S_ORGCODE机构代码宽度不能超过 "+12+"个字符; ");
    
    //check field S_YEAR
      if (this.getSyear()!=null)
             if (this.getSyear().getBytes().length > 4)
                sb.append("S_YEAR年度宽度不能超过 "+4+"个字符; ");
    
    //check field S_QUARTER
      if (this.getSquarter()!=null)
             if (this.getSquarter().getBytes().length > 4)
                sb.append("S_QUARTER季度宽度不能超过 "+4+"个字符; ");
    
    //check field S_STARTDATE
      if (this.getSstartdate()!=null)
             if (this.getSstartdate().getBytes().length > 8)
                sb.append("S_STARTDATE季度开始日期宽度不能超过 "+8+"个字符; ");
    
    //check field S_ENDDATE
      if (this.getSenddate()!=null)
             if (this.getSenddate().getBytes().length > 8)
                sb.append("S_ENDDATE季度截止日期宽度不能超过 "+8+"个字符; ");
    
    //check field S_BANKTYPE
      if (this.getSbanktype()!=null)
             if (this.getSbanktype().getBytes().length > 10)
                sb.append("S_BANKTYPE行别宽度不能超过 "+10+"个字符; ");
    
    //check field N_INTERESTRATE_COUNT
      
    //check field N_INTEREST_RATES
      
    //check field N_INTEREST_VALUE
      
    //check field S_UESRCODE
      if (this.getSuesrcode()!=null)
             if (this.getSuesrcode().getBytes().length > 60)
                sb.append("S_UESRCODE用户宽度不能超过 "+60+"个字符; ");
    
    //check field S_STATUS
      if (this.getSstatus()!=null)
             if (this.getSstatus().getBytes().length > 5)
                sb.append("S_STATUS状态宽度不能超过 "+5+"个字符; ");
    
    //check field S_DEMO
      if (this.getSdemo()!=null)
             if (this.getSdemo().getBytes().length > 100)
                sb.append("S_DEMO描述宽度不能超过 "+100+"个字符; ");
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  
    //check field S_EXT1
      if (this.getSext1()!=null)
             if (this.getSext1().getBytes().length > 50)
                sb.append("S_EXT1扩展宽度不能超过 "+50+"个字符; ");
    
    //check field S_EXT2
      if (this.getSext2()!=null)
             if (this.getSext2().getBytes().length > 50)
                sb.append("S_EXT2扩展宽度不能超过 "+50+"个字符; ");
    
    //check field S_EXT3
      if (this.getSext3()!=null)
             if (this.getSext3().getBytes().length > 50)
                sb.append("S_EXT3扩展宽度不能超过 "+50+"个字符; ");
    

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field I_VOUSRLNO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("I_VOUSRLNO")) {
               if (this.getIvousrlno()==null)
                    sb.append("I_VOUSRLNO 主键不能为空; ");
               break;
         }
  }
    
    //check field S_ORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ORGCODE")) {
               if (this.getSorgcode()==null)
                    sb.append("S_ORGCODE 机构代码不能为空; ");
               if (this.getSorgcode()!=null)
                    if (this.getSorgcode().getBytes().length > 12)
                        sb.append("S_ORGCODE 机构代码宽度不能超过 "+12+"个字符");
             break;
         }
  }
    
    //check field S_YEAR
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_YEAR")) {
                 if (this.getSyear()!=null)
                    if (this.getSyear().getBytes().length > 4)
                        sb.append("S_YEAR 年度宽度不能超过 "+4+"个字符");
             break;
         }
  }
    
    //check field S_QUARTER
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_QUARTER")) {
                 if (this.getSquarter()!=null)
                    if (this.getSquarter().getBytes().length > 4)
                        sb.append("S_QUARTER 季度宽度不能超过 "+4+"个字符");
             break;
         }
  }
    
    //check field S_STARTDATE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_STARTDATE")) {
                 if (this.getSstartdate()!=null)
                    if (this.getSstartdate().getBytes().length > 8)
                        sb.append("S_STARTDATE 季度开始日期宽度不能超过 "+8+"个字符");
             break;
         }
  }
    
    //check field S_ENDDATE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ENDDATE")) {
                 if (this.getSenddate()!=null)
                    if (this.getSenddate().getBytes().length > 8)
                        sb.append("S_ENDDATE 季度截止日期宽度不能超过 "+8+"个字符");
             break;
         }
  }
    
    //check field S_BANKTYPE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_BANKTYPE")) {
                 if (this.getSbanktype()!=null)
                    if (this.getSbanktype().getBytes().length > 10)
                        sb.append("S_BANKTYPE 行别宽度不能超过 "+10+"个字符");
             break;
         }
  }
    
    //check field N_INTERESTRATE_COUNT
          
    //check field N_INTEREST_RATES
          
    //check field N_INTEREST_VALUE
          
    //check field S_UESRCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_UESRCODE")) {
                 if (this.getSuesrcode()!=null)
                    if (this.getSuesrcode().getBytes().length > 60)
                        sb.append("S_UESRCODE 用户宽度不能超过 "+60+"个字符");
             break;
         }
  }
    
    //check field S_STATUS
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_STATUS")) {
                 if (this.getSstatus()!=null)
                    if (this.getSstatus().getBytes().length > 5)
                        sb.append("S_STATUS 状态宽度不能超过 "+5+"个字符");
             break;
         }
  }
    
    //check field S_DEMO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_DEMO")) {
                 if (this.getSdemo()!=null)
                    if (this.getSdemo().getBytes().length > 100)
                        sb.append("S_DEMO 描述宽度不能超过 "+100+"个字符");
             break;
         }
  }
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  
    //check field S_EXT1
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT1")) {
                 if (this.getSext1()!=null)
                    if (this.getSext1().getBytes().length > 50)
                        sb.append("S_EXT1 扩展宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_EXT2
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT2")) {
                 if (this.getSext2()!=null)
                    if (this.getSext2().getBytes().length > 50)
                        sb.append("S_EXT2 扩展宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_EXT3
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT3")) {
                 if (this.getSext3()!=null)
                    if (this.getSext3().getBytes().length > 50)
                        sb.append("S_EXT3 扩展宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数; ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段 " + _columnNames[i] + " 不在该表字段中; ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      TfInterestrateMsgPK pk = new TfInterestrateMsgPK();
      pk.setIvousrlno(getIvousrlno());
      return pk;
    };
}
