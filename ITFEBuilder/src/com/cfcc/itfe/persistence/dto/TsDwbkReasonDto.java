    
package com.cfcc.itfe.persistence.dto;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.itfe.persistence.pk.TsDwbkReasonPK;
/**
 * <p>Title: DTO of table: TS_DWBK_REASON</p>
 * <p>Description:  Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:00 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author win7
 */

public class TsDwbkReasonDto   
                              implements IDto  {
/********************************************************
 *   fields
 ********************************************************/

    /**
    *  S_ORGCODE CHARACTER , PK   , NOT NULL       */
    protected String sorgcode;
    /**
    *  S_DRAWBACKREACODE CHARACTER , PK   , NOT NULL       */
    protected String sdrawbackreacode;
    /**
    *  S_DRAWBACKREACMT VARCHAR   , NOT NULL       */
    protected String sdrawbackreacmt;
    /**
    *  TS_UPDATEDATE TIMESTAMP         */
    protected Timestamp tsupdatedate;


/******************************************************
*
*  getter and setter
*
*******************************************************/


    public String getSorgcode()
    {
        return sorgcode;
    }
     /**
     *   Setter S_ORGCODE, PK , NOT NULL        * */
    public void setSorgcode(String _sorgcode) {
        this.sorgcode = _sorgcode;
    }


    public String getSdrawbackreacode()
    {
        return sdrawbackreacode;
    }
     /**
     *   Setter S_DRAWBACKREACODE, PK , NOT NULL        * */
    public void setSdrawbackreacode(String _sdrawbackreacode) {
        this.sdrawbackreacode = _sdrawbackreacode;
    }


    public String getSdrawbackreacmt()
    {
        return sdrawbackreacmt;
    }
     /**
     *   Setter S_DRAWBACKREACMT , NOT NULL        * */
    public void setSdrawbackreacmt(String _sdrawbackreacmt) {
        this.sdrawbackreacmt = _sdrawbackreacmt;
    }


    public Timestamp getTsupdatedate()
    {
        return tsupdatedate;
    }
     /**
     *   Setter TS_UPDATEDATE        * */
    public void setTsupdatedate(Timestamp _tsupdatedate) {
        this.tsupdatedate = _tsupdatedate;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *   Getter S_ORGCODE, PK , NOT NULL       * */
    public static String  columnSorgcode()
    {
        return "S_ORGCODE";
    }
   
    /**
    *   Getter S_DRAWBACKREACODE, PK , NOT NULL       * */
    public static String  columnSdrawbackreacode()
    {
        return "S_DRAWBACKREACODE";
    }
   
    /**
    *   Getter S_DRAWBACKREACMT , NOT NULL       * */
    public static String  columnSdrawbackreacmt()
    {
        return "S_DRAWBACKREACMT";
    }
   
    /**
    *   Getter TS_UPDATEDATE       * */
    public static String  columnTsupdatedate()
    {
        return "TS_UPDATEDATE";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "TS_DWBK_REASON";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[4];        
        columnNames[0]="S_ORGCODE";
        columnNames[1]="S_DRAWBACKREACODE";
        columnNames[2]="S_DRAWBACKREACMT";
        columnNames[3]="TS_UPDATEDATE";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof TsDwbkReasonDto))
            return false;

        TsDwbkReasonDto bean = (TsDwbkReasonDto) obj;


      //compare field sorgcode
      if((this.sorgcode==null && bean.sorgcode!=null) || (this.sorgcode!=null && bean.sorgcode==null))
          return false;
        else if(this.sorgcode==null && bean.sorgcode==null){
        }
        else{
          if(!bean.sorgcode.equals(this.sorgcode))
               return false;
     }
      //compare field sdrawbackreacode
      if((this.sdrawbackreacode==null && bean.sdrawbackreacode!=null) || (this.sdrawbackreacode!=null && bean.sdrawbackreacode==null))
          return false;
        else if(this.sdrawbackreacode==null && bean.sdrawbackreacode==null){
        }
        else{
          if(!bean.sdrawbackreacode.equals(this.sdrawbackreacode))
               return false;
     }
      //compare field sdrawbackreacmt
      if((this.sdrawbackreacmt==null && bean.sdrawbackreacmt!=null) || (this.sdrawbackreacmt!=null && bean.sdrawbackreacmt==null))
          return false;
        else if(this.sdrawbackreacmt==null && bean.sdrawbackreacmt==null){
        }
        else{
          if(!bean.sdrawbackreacmt.equals(this.sdrawbackreacmt))
               return false;
     }
      //compare field tsupdatedate
      if((this.tsupdatedate==null && bean.tsupdatedate!=null) || (this.tsupdatedate!=null && bean.tsupdatedate==null))
          return false;
        else if(this.tsupdatedate==null && bean.tsupdatedate==null){
        }
        else{
          if(!bean.tsupdatedate.equals(this.tsupdatedate))
               return false;
     }



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.sorgcode!=null)
          _hash_ = _hash_ * 31+ this.sorgcode.hashCode() ;
        if(this.sdrawbackreacode!=null)
          _hash_ = _hash_ * 31+ this.sdrawbackreacode.hashCode() ;
        if(this.sdrawbackreacmt!=null)
          _hash_ = _hash_ * 31+ this.sdrawbackreacmt.hashCode() ;
        if(this.tsupdatedate!=null)
          _hash_ = _hash_ * 31+ this.tsupdatedate.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        TsDwbkReasonDto bean = new TsDwbkReasonDto();

          bean.sorgcode = this.sorgcode;

          bean.sdrawbackreacode = this.sdrawbackreacode;

          if (this.sdrawbackreacmt != null)
            bean.sdrawbackreacmt = new String(this.sdrawbackreacmt);
          if (this.tsupdatedate != null)
            bean.tsupdatedate = (Timestamp) this.tsupdatedate.clone();
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("TsDwbkReasonDto").append(sep);
        sb.append("[sorgcode]").append(" = ").append(sorgcode).append(sep);
        sb.append("[sdrawbackreacode]").append(" = ").append(sdrawbackreacode).append(sep);
        sb.append("[sdrawbackreacmt]").append(" = ").append(sdrawbackreacmt).append(sep);
        sb.append("[tsupdatedate]").append(" = ").append(tsupdatedate).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field S_ORGCODE
      if (this.getSorgcode()==null)
             sb.append("S_ORGCODE不能为空; ");
      if (this.getSorgcode()!=null)
             if (this.getSorgcode().getBytes().length > 12)
                sb.append("S_ORGCODE宽度不能超过 "+12+"个字符; ");
    
    //check field S_DRAWBACKREACODE
      if (this.getSdrawbackreacode()==null)
             sb.append("S_DRAWBACKREACODE不能为空; ");
      if (this.getSdrawbackreacode()!=null)
             if (this.getSdrawbackreacode().getBytes().length > 12)
                sb.append("S_DRAWBACKREACODE宽度不能超过 "+12+"个字符; ");
    
    //check field S_DRAWBACKREACMT
      if (this.getSdrawbackreacmt()==null)
             sb.append("S_DRAWBACKREACMT不能为空; ");
      if (this.getSdrawbackreacmt()!=null)
             if (this.getSdrawbackreacmt().getBytes().length > 80)
                sb.append("S_DRAWBACKREACMT宽度不能超过 "+80+"个字符; ");
    
    //check field TS_UPDATEDATE
      

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field S_ORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ORGCODE")) {
               if (this.getSorgcode()==null)
                    sb.append("S_ORGCODE 不能为空; ");
               if (this.getSorgcode()!=null)
                    if (this.getSorgcode().getBytes().length > 12)
                        sb.append("S_ORGCODE 宽度不能超过 "+12+"个字符");
             break;
         }
  }
    
    //check field S_DRAWBACKREACODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_DRAWBACKREACODE")) {
               if (this.getSdrawbackreacode()==null)
                    sb.append("S_DRAWBACKREACODE 不能为空; ");
               if (this.getSdrawbackreacode()!=null)
                    if (this.getSdrawbackreacode().getBytes().length > 12)
                        sb.append("S_DRAWBACKREACODE 宽度不能超过 "+12+"个字符");
             break;
         }
  }
    
    //check field S_DRAWBACKREACMT
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_DRAWBACKREACMT")) {
               if (this.getSdrawbackreacmt()==null)
                    sb.append("S_DRAWBACKREACMT 不能为空; ");
               if (this.getSdrawbackreacmt()!=null)
                    if (this.getSdrawbackreacmt().getBytes().length > 80)
                        sb.append("S_DRAWBACKREACMT 宽度不能超过 "+80+"个字符");
             break;
         }
  }
    
    //check field TS_UPDATEDATE
          
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数; ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段 " + _columnNames[i] + " 不在该表字段中; ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      TsDwbkReasonPK pk = new TsDwbkReasonPK();
      pk.setSorgcode(getSorgcode());
      pk.setSdrawbackreacode(getSdrawbackreacode());
      return pk;
    };
}
