    
package com.cfcc.itfe.persistence.dto;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.itfe.persistence.pk.TvPayoutDetailMainPK;
/**
 * <p>Title: DTO of table: TV_PAYOUT_DETAIL_MAIN</p>
 * <p>Description: 实拨拨款凭证明细清单5257 Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:29:03 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author win7
 */

public class TvPayoutDetailMainDto   
                              implements IDto  {
/********************************************************
 *   fields
 ********************************************************/

    /**
    * 拨款清单明细编号 S_ID VARCHAR , PK   , NOT NULL       */
    protected String sid;
    /**
    * 行政区划代码 S_ADMDIVCODE VARCHAR   , NOT NULL       */
    protected String sadmdivcode;
    /**
    * 业务年度 S_STYEAR CHARACTER   , NOT NULL       */
    protected String sstyear;
    /**
    * 凭证类型编号5257 S_VTCODE CHARACTER   , NOT NULL       */
    protected String svtcode;
    /**
    * 凭证日期 S_VOUDATE CHARACTER   , NOT NULL       */
    protected String svoudate;
    /**
    * 凭证号 S_VOUCHERNO VARCHAR   , NOT NULL       */
    protected String svoucherno;
    /**
    * 国库主体代码 S_TRECODE CHARACTER   , NOT NULL       */
    protected String strecode;
    /**
    * 财政机关代码 S_FINORGCODE VARCHAR   , NOT NULL       */
    protected String sfinorgcode;
    /**
    * 汇总拨款金额 N_PAYAMT DECIMAL   , NOT NULL       */
    protected BigDecimal npayamt;
    /**
    * 打印人 S_PRINTUSER VARCHAR         */
    protected String sprintuser;
    /**
    * 备注 S_REMARK VARCHAR         */
    protected String sremark;
    /**
    * 预留字段1 S_HOLD1 VARCHAR         */
    protected String shold1;
    /**
    * 预留字段2 S_HOLD2 VARCHAR         */
    protected String shold2;


/******************************************************
*
*  getter and setter
*
*******************************************************/


    public String getSid()
    {
        return sid;
    }
     /**
     *  拨款清单明细编号 Setter S_ID, PK , NOT NULL        * */
    public void setSid(String _sid) {
        this.sid = _sid;
    }


    public String getSadmdivcode()
    {
        return sadmdivcode;
    }
     /**
     *  行政区划代码 Setter S_ADMDIVCODE , NOT NULL        * */
    public void setSadmdivcode(String _sadmdivcode) {
        this.sadmdivcode = _sadmdivcode;
    }


    public String getSstyear()
    {
        return sstyear;
    }
     /**
     *  业务年度 Setter S_STYEAR , NOT NULL        * */
    public void setSstyear(String _sstyear) {
        this.sstyear = _sstyear;
    }


    public String getSvtcode()
    {
        return svtcode;
    }
     /**
     *  凭证类型编号5257 Setter S_VTCODE , NOT NULL        * */
    public void setSvtcode(String _svtcode) {
        this.svtcode = _svtcode;
    }


    public String getSvoudate()
    {
        return svoudate;
    }
     /**
     *  凭证日期 Setter S_VOUDATE , NOT NULL        * */
    public void setSvoudate(String _svoudate) {
        this.svoudate = _svoudate;
    }


    public String getSvoucherno()
    {
        return svoucherno;
    }
     /**
     *  凭证号 Setter S_VOUCHERNO , NOT NULL        * */
    public void setSvoucherno(String _svoucherno) {
        this.svoucherno = _svoucherno;
    }


    public String getStrecode()
    {
        return strecode;
    }
     /**
     *  国库主体代码 Setter S_TRECODE , NOT NULL        * */
    public void setStrecode(String _strecode) {
        this.strecode = _strecode;
    }


    public String getSfinorgcode()
    {
        return sfinorgcode;
    }
     /**
     *  财政机关代码 Setter S_FINORGCODE , NOT NULL        * */
    public void setSfinorgcode(String _sfinorgcode) {
        this.sfinorgcode = _sfinorgcode;
    }


    public BigDecimal getNpayamt()
    {
        return npayamt;
    }
     /**
     *  汇总拨款金额 Setter N_PAYAMT , NOT NULL        * */
    public void setNpayamt(BigDecimal _npayamt) {
        this.npayamt = _npayamt;
    }


    public String getSprintuser()
    {
        return sprintuser;
    }
     /**
     *  打印人 Setter S_PRINTUSER        * */
    public void setSprintuser(String _sprintuser) {
        this.sprintuser = _sprintuser;
    }


    public String getSremark()
    {
        return sremark;
    }
     /**
     *  备注 Setter S_REMARK        * */
    public void setSremark(String _sremark) {
        this.sremark = _sremark;
    }


    public String getShold1()
    {
        return shold1;
    }
     /**
     *  预留字段1 Setter S_HOLD1        * */
    public void setShold1(String _shold1) {
        this.shold1 = _shold1;
    }


    public String getShold2()
    {
        return shold2;
    }
     /**
     *  预留字段2 Setter S_HOLD2        * */
    public void setShold2(String _shold2) {
        this.shold2 = _shold2;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *  拨款清单明细编号 Getter S_ID, PK , NOT NULL       * */
    public static String  columnSid()
    {
        return "S_ID";
    }
   
    /**
    *  行政区划代码 Getter S_ADMDIVCODE , NOT NULL       * */
    public static String  columnSadmdivcode()
    {
        return "S_ADMDIVCODE";
    }
   
    /**
    *  业务年度 Getter S_STYEAR , NOT NULL       * */
    public static String  columnSstyear()
    {
        return "S_STYEAR";
    }
   
    /**
    *  凭证类型编号5257 Getter S_VTCODE , NOT NULL       * */
    public static String  columnSvtcode()
    {
        return "S_VTCODE";
    }
   
    /**
    *  凭证日期 Getter S_VOUDATE , NOT NULL       * */
    public static String  columnSvoudate()
    {
        return "S_VOUDATE";
    }
   
    /**
    *  凭证号 Getter S_VOUCHERNO , NOT NULL       * */
    public static String  columnSvoucherno()
    {
        return "S_VOUCHERNO";
    }
   
    /**
    *  国库主体代码 Getter S_TRECODE , NOT NULL       * */
    public static String  columnStrecode()
    {
        return "S_TRECODE";
    }
   
    /**
    *  财政机关代码 Getter S_FINORGCODE , NOT NULL       * */
    public static String  columnSfinorgcode()
    {
        return "S_FINORGCODE";
    }
   
    /**
    *  汇总拨款金额 Getter N_PAYAMT , NOT NULL       * */
    public static String  columnNpayamt()
    {
        return "N_PAYAMT";
    }
   
    /**
    *  打印人 Getter S_PRINTUSER       * */
    public static String  columnSprintuser()
    {
        return "S_PRINTUSER";
    }
   
    /**
    *  备注 Getter S_REMARK       * */
    public static String  columnSremark()
    {
        return "S_REMARK";
    }
   
    /**
    *  预留字段1 Getter S_HOLD1       * */
    public static String  columnShold1()
    {
        return "S_HOLD1";
    }
   
    /**
    *  预留字段2 Getter S_HOLD2       * */
    public static String  columnShold2()
    {
        return "S_HOLD2";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "TV_PAYOUT_DETAIL_MAIN";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[13];        
        columnNames[0]="S_ID";
        columnNames[1]="S_ADMDIVCODE";
        columnNames[2]="S_STYEAR";
        columnNames[3]="S_VTCODE";
        columnNames[4]="S_VOUDATE";
        columnNames[5]="S_VOUCHERNO";
        columnNames[6]="S_TRECODE";
        columnNames[7]="S_FINORGCODE";
        columnNames[8]="N_PAYAMT";
        columnNames[9]="S_PRINTUSER";
        columnNames[10]="S_REMARK";
        columnNames[11]="S_HOLD1";
        columnNames[12]="S_HOLD2";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof TvPayoutDetailMainDto))
            return false;

        TvPayoutDetailMainDto bean = (TvPayoutDetailMainDto) obj;


      //compare field sid
      if((this.sid==null && bean.sid!=null) || (this.sid!=null && bean.sid==null))
          return false;
        else if(this.sid==null && bean.sid==null){
        }
        else{
          if(!bean.sid.equals(this.sid))
               return false;
     }
      //compare field sadmdivcode
      if((this.sadmdivcode==null && bean.sadmdivcode!=null) || (this.sadmdivcode!=null && bean.sadmdivcode==null))
          return false;
        else if(this.sadmdivcode==null && bean.sadmdivcode==null){
        }
        else{
          if(!bean.sadmdivcode.equals(this.sadmdivcode))
               return false;
     }
      //compare field sstyear
      if((this.sstyear==null && bean.sstyear!=null) || (this.sstyear!=null && bean.sstyear==null))
          return false;
        else if(this.sstyear==null && bean.sstyear==null){
        }
        else{
          if(!bean.sstyear.equals(this.sstyear))
               return false;
     }
      //compare field svtcode
      if((this.svtcode==null && bean.svtcode!=null) || (this.svtcode!=null && bean.svtcode==null))
          return false;
        else if(this.svtcode==null && bean.svtcode==null){
        }
        else{
          if(!bean.svtcode.equals(this.svtcode))
               return false;
     }
      //compare field svoudate
      if((this.svoudate==null && bean.svoudate!=null) || (this.svoudate!=null && bean.svoudate==null))
          return false;
        else if(this.svoudate==null && bean.svoudate==null){
        }
        else{
          if(!bean.svoudate.equals(this.svoudate))
               return false;
     }
      //compare field svoucherno
      if((this.svoucherno==null && bean.svoucherno!=null) || (this.svoucherno!=null && bean.svoucherno==null))
          return false;
        else if(this.svoucherno==null && bean.svoucherno==null){
        }
        else{
          if(!bean.svoucherno.equals(this.svoucherno))
               return false;
     }
      //compare field strecode
      if((this.strecode==null && bean.strecode!=null) || (this.strecode!=null && bean.strecode==null))
          return false;
        else if(this.strecode==null && bean.strecode==null){
        }
        else{
          if(!bean.strecode.equals(this.strecode))
               return false;
     }
      //compare field sfinorgcode
      if((this.sfinorgcode==null && bean.sfinorgcode!=null) || (this.sfinorgcode!=null && bean.sfinorgcode==null))
          return false;
        else if(this.sfinorgcode==null && bean.sfinorgcode==null){
        }
        else{
          if(!bean.sfinorgcode.equals(this.sfinorgcode))
               return false;
     }
      //compare field npayamt
      if((this.npayamt==null && bean.npayamt!=null) || (this.npayamt!=null && bean.npayamt==null))
          return false;
        else if(this.npayamt==null && bean.npayamt==null){
        }
        else{
          if(!bean.npayamt.equals(this.npayamt))
               return false;
     }
      //compare field sprintuser
      if((this.sprintuser==null && bean.sprintuser!=null) || (this.sprintuser!=null && bean.sprintuser==null))
          return false;
        else if(this.sprintuser==null && bean.sprintuser==null){
        }
        else{
          if(!bean.sprintuser.equals(this.sprintuser))
               return false;
     }
      //compare field sremark
      if((this.sremark==null && bean.sremark!=null) || (this.sremark!=null && bean.sremark==null))
          return false;
        else if(this.sremark==null && bean.sremark==null){
        }
        else{
          if(!bean.sremark.equals(this.sremark))
               return false;
     }
      //compare field shold1
      if((this.shold1==null && bean.shold1!=null) || (this.shold1!=null && bean.shold1==null))
          return false;
        else if(this.shold1==null && bean.shold1==null){
        }
        else{
          if(!bean.shold1.equals(this.shold1))
               return false;
     }
      //compare field shold2
      if((this.shold2==null && bean.shold2!=null) || (this.shold2!=null && bean.shold2==null))
          return false;
        else if(this.shold2==null && bean.shold2==null){
        }
        else{
          if(!bean.shold2.equals(this.shold2))
               return false;
     }



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.sid!=null)
          _hash_ = _hash_ * 31+ this.sid.hashCode() ;
        if(this.sadmdivcode!=null)
          _hash_ = _hash_ * 31+ this.sadmdivcode.hashCode() ;
        if(this.sstyear!=null)
          _hash_ = _hash_ * 31+ this.sstyear.hashCode() ;
        if(this.svtcode!=null)
          _hash_ = _hash_ * 31+ this.svtcode.hashCode() ;
        if(this.svoudate!=null)
          _hash_ = _hash_ * 31+ this.svoudate.hashCode() ;
        if(this.svoucherno!=null)
          _hash_ = _hash_ * 31+ this.svoucherno.hashCode() ;
        if(this.strecode!=null)
          _hash_ = _hash_ * 31+ this.strecode.hashCode() ;
        if(this.sfinorgcode!=null)
          _hash_ = _hash_ * 31+ this.sfinorgcode.hashCode() ;
        if(this.npayamt!=null)
          _hash_ = _hash_ * 31+ this.npayamt.hashCode() ;
        if(this.sprintuser!=null)
          _hash_ = _hash_ * 31+ this.sprintuser.hashCode() ;
        if(this.sremark!=null)
          _hash_ = _hash_ * 31+ this.sremark.hashCode() ;
        if(this.shold1!=null)
          _hash_ = _hash_ * 31+ this.shold1.hashCode() ;
        if(this.shold2!=null)
          _hash_ = _hash_ * 31+ this.shold2.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        TvPayoutDetailMainDto bean = new TvPayoutDetailMainDto();

          bean.sid = this.sid;

          if (this.sadmdivcode != null)
            bean.sadmdivcode = new String(this.sadmdivcode);
          if (this.sstyear != null)
            bean.sstyear = new String(this.sstyear);
          if (this.svtcode != null)
            bean.svtcode = new String(this.svtcode);
          if (this.svoudate != null)
            bean.svoudate = new String(this.svoudate);
          if (this.svoucherno != null)
            bean.svoucherno = new String(this.svoucherno);
          if (this.strecode != null)
            bean.strecode = new String(this.strecode);
          if (this.sfinorgcode != null)
            bean.sfinorgcode = new String(this.sfinorgcode);
          if (this.npayamt != null)
            bean.npayamt = new BigDecimal(this.npayamt.toString());
          if (this.sprintuser != null)
            bean.sprintuser = new String(this.sprintuser);
          if (this.sremark != null)
            bean.sremark = new String(this.sremark);
          if (this.shold1 != null)
            bean.shold1 = new String(this.shold1);
          if (this.shold2 != null)
            bean.shold2 = new String(this.shold2);
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("TvPayoutDetailMainDto").append(sep);
        sb.append("[sid]").append(" = ").append(sid).append(sep);
        sb.append("[sadmdivcode]").append(" = ").append(sadmdivcode).append(sep);
        sb.append("[sstyear]").append(" = ").append(sstyear).append(sep);
        sb.append("[svtcode]").append(" = ").append(svtcode).append(sep);
        sb.append("[svoudate]").append(" = ").append(svoudate).append(sep);
        sb.append("[svoucherno]").append(" = ").append(svoucherno).append(sep);
        sb.append("[strecode]").append(" = ").append(strecode).append(sep);
        sb.append("[sfinorgcode]").append(" = ").append(sfinorgcode).append(sep);
        sb.append("[npayamt]").append(" = ").append(npayamt).append(sep);
        sb.append("[sprintuser]").append(" = ").append(sprintuser).append(sep);
        sb.append("[sremark]").append(" = ").append(sremark).append(sep);
        sb.append("[shold1]").append(" = ").append(shold1).append(sep);
        sb.append("[shold2]").append(" = ").append(shold2).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field S_ID
      if (this.getSid()==null)
             sb.append("S_ID拨款清单明细编号不能为空; ");
      if (this.getSid()!=null)
             if (this.getSid().getBytes().length > 38)
                sb.append("S_ID拨款清单明细编号宽度不能超过 "+38+"个字符; ");
    
    //check field S_ADMDIVCODE
      if (this.getSadmdivcode()==null)
             sb.append("S_ADMDIVCODE行政区划代码不能为空; ");
      if (this.getSadmdivcode()!=null)
             if (this.getSadmdivcode().getBytes().length > 9)
                sb.append("S_ADMDIVCODE行政区划代码宽度不能超过 "+9+"个字符; ");
    
    //check field S_STYEAR
      if (this.getSstyear()==null)
             sb.append("S_STYEAR业务年度不能为空; ");
      if (this.getSstyear()!=null)
             if (this.getSstyear().getBytes().length > 4)
                sb.append("S_STYEAR业务年度宽度不能超过 "+4+"个字符; ");
    
    //check field S_VTCODE
      if (this.getSvtcode()==null)
             sb.append("S_VTCODE凭证类型编号5257不能为空; ");
      if (this.getSvtcode()!=null)
             if (this.getSvtcode().getBytes().length > 4)
                sb.append("S_VTCODE凭证类型编号5257宽度不能超过 "+4+"个字符; ");
    
    //check field S_VOUDATE
      if (this.getSvoudate()==null)
             sb.append("S_VOUDATE凭证日期不能为空; ");
      if (this.getSvoudate()!=null)
             if (this.getSvoudate().getBytes().length > 8)
                sb.append("S_VOUDATE凭证日期宽度不能超过 "+8+"个字符; ");
    
    //check field S_VOUCHERNO
      if (this.getSvoucherno()==null)
             sb.append("S_VOUCHERNO凭证号不能为空; ");
      if (this.getSvoucherno()!=null)
             if (this.getSvoucherno().getBytes().length > 42)
                sb.append("S_VOUCHERNO凭证号宽度不能超过 "+42+"个字符; ");
    
    //check field S_TRECODE
      if (this.getStrecode()==null)
             sb.append("S_TRECODE国库主体代码不能为空; ");
      if (this.getStrecode()!=null)
             if (this.getStrecode().getBytes().length > 10)
                sb.append("S_TRECODE国库主体代码宽度不能超过 "+10+"个字符; ");
    
    //check field S_FINORGCODE
      if (this.getSfinorgcode()==null)
             sb.append("S_FINORGCODE财政机关代码不能为空; ");
      if (this.getSfinorgcode()!=null)
             if (this.getSfinorgcode().getBytes().length > 12)
                sb.append("S_FINORGCODE财政机关代码宽度不能超过 "+12+"个字符; ");
    
    //check field N_PAYAMT
      if (this.getNpayamt()==null)
             sb.append("N_PAYAMT汇总拨款金额不能为空; ");
      
    //check field S_PRINTUSER
      if (this.getSprintuser()!=null)
             if (this.getSprintuser().getBytes().length > 42)
                sb.append("S_PRINTUSER打印人宽度不能超过 "+42+"个字符; ");
    
    //check field S_REMARK
      if (this.getSremark()!=null)
             if (this.getSremark().getBytes().length > 200)
                sb.append("S_REMARK备注宽度不能超过 "+200+"个字符; ");
    
    //check field S_HOLD1
      if (this.getShold1()!=null)
             if (this.getShold1().getBytes().length > 42)
                sb.append("S_HOLD1预留字段1宽度不能超过 "+42+"个字符; ");
    
    //check field S_HOLD2
      if (this.getShold2()!=null)
             if (this.getShold2().getBytes().length > 42)
                sb.append("S_HOLD2预留字段2宽度不能超过 "+42+"个字符; ");
    

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field S_ID
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ID")) {
               if (this.getSid()==null)
                    sb.append("S_ID 拨款清单明细编号不能为空; ");
               if (this.getSid()!=null)
                    if (this.getSid().getBytes().length > 38)
                        sb.append("S_ID 拨款清单明细编号宽度不能超过 "+38+"个字符");
             break;
         }
  }
    
    //check field S_ADMDIVCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ADMDIVCODE")) {
               if (this.getSadmdivcode()==null)
                    sb.append("S_ADMDIVCODE 行政区划代码不能为空; ");
               if (this.getSadmdivcode()!=null)
                    if (this.getSadmdivcode().getBytes().length > 9)
                        sb.append("S_ADMDIVCODE 行政区划代码宽度不能超过 "+9+"个字符");
             break;
         }
  }
    
    //check field S_STYEAR
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_STYEAR")) {
               if (this.getSstyear()==null)
                    sb.append("S_STYEAR 业务年度不能为空; ");
               if (this.getSstyear()!=null)
                    if (this.getSstyear().getBytes().length > 4)
                        sb.append("S_STYEAR 业务年度宽度不能超过 "+4+"个字符");
             break;
         }
  }
    
    //check field S_VTCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_VTCODE")) {
               if (this.getSvtcode()==null)
                    sb.append("S_VTCODE 凭证类型编号5257不能为空; ");
               if (this.getSvtcode()!=null)
                    if (this.getSvtcode().getBytes().length > 4)
                        sb.append("S_VTCODE 凭证类型编号5257宽度不能超过 "+4+"个字符");
             break;
         }
  }
    
    //check field S_VOUDATE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_VOUDATE")) {
               if (this.getSvoudate()==null)
                    sb.append("S_VOUDATE 凭证日期不能为空; ");
               if (this.getSvoudate()!=null)
                    if (this.getSvoudate().getBytes().length > 8)
                        sb.append("S_VOUDATE 凭证日期宽度不能超过 "+8+"个字符");
             break;
         }
  }
    
    //check field S_VOUCHERNO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_VOUCHERNO")) {
               if (this.getSvoucherno()==null)
                    sb.append("S_VOUCHERNO 凭证号不能为空; ");
               if (this.getSvoucherno()!=null)
                    if (this.getSvoucherno().getBytes().length > 42)
                        sb.append("S_VOUCHERNO 凭证号宽度不能超过 "+42+"个字符");
             break;
         }
  }
    
    //check field S_TRECODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_TRECODE")) {
               if (this.getStrecode()==null)
                    sb.append("S_TRECODE 国库主体代码不能为空; ");
               if (this.getStrecode()!=null)
                    if (this.getStrecode().getBytes().length > 10)
                        sb.append("S_TRECODE 国库主体代码宽度不能超过 "+10+"个字符");
             break;
         }
  }
    
    //check field S_FINORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_FINORGCODE")) {
               if (this.getSfinorgcode()==null)
                    sb.append("S_FINORGCODE 财政机关代码不能为空; ");
               if (this.getSfinorgcode()!=null)
                    if (this.getSfinorgcode().getBytes().length > 12)
                        sb.append("S_FINORGCODE 财政机关代码宽度不能超过 "+12+"个字符");
             break;
         }
  }
    
    //check field N_PAYAMT
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("N_PAYAMT")) {
               if (this.getNpayamt()==null)
                    sb.append("N_PAYAMT 汇总拨款金额不能为空; ");
               break;
         }
  }
    
    //check field S_PRINTUSER
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_PRINTUSER")) {
                 if (this.getSprintuser()!=null)
                    if (this.getSprintuser().getBytes().length > 42)
                        sb.append("S_PRINTUSER 打印人宽度不能超过 "+42+"个字符");
             break;
         }
  }
    
    //check field S_REMARK
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_REMARK")) {
                 if (this.getSremark()!=null)
                    if (this.getSremark().getBytes().length > 200)
                        sb.append("S_REMARK 备注宽度不能超过 "+200+"个字符");
             break;
         }
  }
    
    //check field S_HOLD1
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_HOLD1")) {
                 if (this.getShold1()!=null)
                    if (this.getShold1().getBytes().length > 42)
                        sb.append("S_HOLD1 预留字段1宽度不能超过 "+42+"个字符");
             break;
         }
  }
    
    //check field S_HOLD2
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_HOLD2")) {
                 if (this.getShold2()!=null)
                    if (this.getShold2().getBytes().length > 42)
                        sb.append("S_HOLD2 预留字段2宽度不能超过 "+42+"个字符");
             break;
         }
  }
    
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数; ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段 " + _columnNames[i] + " 不在该表字段中; ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      TvPayoutDetailMainPK pk = new TvPayoutDetailMainPK();
      pk.setSid(getSid());
      return pk;
    };
}
