    
package com.cfcc.itfe.persistence.dto;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.itfe.persistence.pk.TsCheckfailreasonPK;
/**
 * <p>Title: DTO of table: TS_CHECKFAILREASON</p>
 * <p>Description:  Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:59 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author win7
 */

public class TsCheckfailreasonDto   
                              implements IDto  {
/********************************************************
 *   fields
 ********************************************************/

    /**
    *  S_ORGCODE VARCHAR , PK   , NOT NULL       */
    protected String sorgcode;
    /**
    *  S_CHECKFAILCODE VARCHAR , PK   , NOT NULL       */
    protected String scheckfailcode;
    /**
    *  S_CHECKFAILDSP VARCHAR   , NOT NULL       */
    protected String scheckfaildsp;
    /**
    *  TS_SYSUPDATE TIMESTAMP         */
    protected Timestamp tssysupdate;


/******************************************************
*
*  getter and setter
*
*******************************************************/


    public String getSorgcode()
    {
        return sorgcode;
    }
     /**
     *   Setter S_ORGCODE, PK , NOT NULL        * */
    public void setSorgcode(String _sorgcode) {
        this.sorgcode = _sorgcode;
    }


    public String getScheckfailcode()
    {
        return scheckfailcode;
    }
     /**
     *   Setter S_CHECKFAILCODE, PK , NOT NULL        * */
    public void setScheckfailcode(String _scheckfailcode) {
        this.scheckfailcode = _scheckfailcode;
    }


    public String getScheckfaildsp()
    {
        return scheckfaildsp;
    }
     /**
     *   Setter S_CHECKFAILDSP , NOT NULL        * */
    public void setScheckfaildsp(String _scheckfaildsp) {
        this.scheckfaildsp = _scheckfaildsp;
    }


    public Timestamp getTssysupdate()
    {
        return tssysupdate;
    }
     /**
     *   Setter TS_SYSUPDATE        * */
    public void setTssysupdate(Timestamp _tssysupdate) {
        this.tssysupdate = _tssysupdate;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *   Getter S_ORGCODE, PK , NOT NULL       * */
    public static String  columnSorgcode()
    {
        return "S_ORGCODE";
    }
   
    /**
    *   Getter S_CHECKFAILCODE, PK , NOT NULL       * */
    public static String  columnScheckfailcode()
    {
        return "S_CHECKFAILCODE";
    }
   
    /**
    *   Getter S_CHECKFAILDSP , NOT NULL       * */
    public static String  columnScheckfaildsp()
    {
        return "S_CHECKFAILDSP";
    }
   
    /**
    *   Getter TS_SYSUPDATE       * */
    public static String  columnTssysupdate()
    {
        return "TS_SYSUPDATE";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "TS_CHECKFAILREASON";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[4];        
        columnNames[0]="S_ORGCODE";
        columnNames[1]="S_CHECKFAILCODE";
        columnNames[2]="S_CHECKFAILDSP";
        columnNames[3]="TS_SYSUPDATE";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof TsCheckfailreasonDto))
            return false;

        TsCheckfailreasonDto bean = (TsCheckfailreasonDto) obj;


      //compare field sorgcode
      if((this.sorgcode==null && bean.sorgcode!=null) || (this.sorgcode!=null && bean.sorgcode==null))
          return false;
        else if(this.sorgcode==null && bean.sorgcode==null){
        }
        else{
          if(!bean.sorgcode.equals(this.sorgcode))
               return false;
     }
      //compare field scheckfailcode
      if((this.scheckfailcode==null && bean.scheckfailcode!=null) || (this.scheckfailcode!=null && bean.scheckfailcode==null))
          return false;
        else if(this.scheckfailcode==null && bean.scheckfailcode==null){
        }
        else{
          if(!bean.scheckfailcode.equals(this.scheckfailcode))
               return false;
     }
      //compare field scheckfaildsp
      if((this.scheckfaildsp==null && bean.scheckfaildsp!=null) || (this.scheckfaildsp!=null && bean.scheckfaildsp==null))
          return false;
        else if(this.scheckfaildsp==null && bean.scheckfaildsp==null){
        }
        else{
          if(!bean.scheckfaildsp.equals(this.scheckfaildsp))
               return false;
     }
      //compare field tssysupdate
      if((this.tssysupdate==null && bean.tssysupdate!=null) || (this.tssysupdate!=null && bean.tssysupdate==null))
          return false;
        else if(this.tssysupdate==null && bean.tssysupdate==null){
        }
        else{
          if(!bean.tssysupdate.equals(this.tssysupdate))
               return false;
     }



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.sorgcode!=null)
          _hash_ = _hash_ * 31+ this.sorgcode.hashCode() ;
        if(this.scheckfailcode!=null)
          _hash_ = _hash_ * 31+ this.scheckfailcode.hashCode() ;
        if(this.scheckfaildsp!=null)
          _hash_ = _hash_ * 31+ this.scheckfaildsp.hashCode() ;
        if(this.tssysupdate!=null)
          _hash_ = _hash_ * 31+ this.tssysupdate.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        TsCheckfailreasonDto bean = new TsCheckfailreasonDto();

          bean.sorgcode = this.sorgcode;

          bean.scheckfailcode = this.scheckfailcode;

          if (this.scheckfaildsp != null)
            bean.scheckfaildsp = new String(this.scheckfaildsp);
          if (this.tssysupdate != null)
            bean.tssysupdate = (Timestamp) this.tssysupdate.clone();
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("TsCheckfailreasonDto").append(sep);
        sb.append("[sorgcode]").append(" = ").append(sorgcode).append(sep);
        sb.append("[scheckfailcode]").append(" = ").append(scheckfailcode).append(sep);
        sb.append("[scheckfaildsp]").append(" = ").append(scheckfaildsp).append(sep);
        sb.append("[tssysupdate]").append(" = ").append(tssysupdate).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field S_ORGCODE
      if (this.getSorgcode()==null)
             sb.append("S_ORGCODE不能为空; ");
      if (this.getSorgcode()!=null)
             if (this.getSorgcode().getBytes().length > 12)
                sb.append("S_ORGCODE宽度不能超过 "+12+"个字符; ");
    
    //check field S_CHECKFAILCODE
      if (this.getScheckfailcode()==null)
             sb.append("S_CHECKFAILCODE不能为空; ");
      if (this.getScheckfailcode()!=null)
             if (this.getScheckfailcode().getBytes().length > 10)
                sb.append("S_CHECKFAILCODE宽度不能超过 "+10+"个字符; ");
    
    //check field S_CHECKFAILDSP
      if (this.getScheckfaildsp()==null)
             sb.append("S_CHECKFAILDSP不能为空; ");
      if (this.getScheckfaildsp()!=null)
             if (this.getScheckfaildsp().getBytes().length > 100)
                sb.append("S_CHECKFAILDSP宽度不能超过 "+100+"个字符; ");
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field S_ORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ORGCODE")) {
               if (this.getSorgcode()==null)
                    sb.append("S_ORGCODE 不能为空; ");
               if (this.getSorgcode()!=null)
                    if (this.getSorgcode().getBytes().length > 12)
                        sb.append("S_ORGCODE 宽度不能超过 "+12+"个字符");
             break;
         }
  }
    
    //check field S_CHECKFAILCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_CHECKFAILCODE")) {
               if (this.getScheckfailcode()==null)
                    sb.append("S_CHECKFAILCODE 不能为空; ");
               if (this.getScheckfailcode()!=null)
                    if (this.getScheckfailcode().getBytes().length > 10)
                        sb.append("S_CHECKFAILCODE 宽度不能超过 "+10+"个字符");
             break;
         }
  }
    
    //check field S_CHECKFAILDSP
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_CHECKFAILDSP")) {
               if (this.getScheckfaildsp()==null)
                    sb.append("S_CHECKFAILDSP 不能为空; ");
               if (this.getScheckfaildsp()!=null)
                    if (this.getScheckfaildsp().getBytes().length > 100)
                        sb.append("S_CHECKFAILDSP 宽度不能超过 "+100+"个字符");
             break;
         }
  }
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数; ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段 " + _columnNames[i] + " 不在该表字段中; ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      TsCheckfailreasonPK pk = new TsCheckfailreasonPK();
      pk.setSorgcode(getSorgcode());
      pk.setScheckfailcode(getScheckfailcode());
      return pk;
    };
}
