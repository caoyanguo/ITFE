    
package com.cfcc.itfe.persistence.dto;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.itfe.persistence.pk.TfVoucherSplitPK;
/**
 * <p>Title: DTO of table: TF_VOUCHER_SPLIT</p>
 * <p>Description: 凭证拆分表 Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:59 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author win7
 */

public class TfVoucherSplitDto   
                              implements IDto  {
/********************************************************
 *   fields
 ********************************************************/

    /**
    * 原凭证流水号 I_VOUSRLNO BIGINT , PK   , NOT NULL       */
    protected Long ivousrlno;
    /**
    * 原凭证号 S_MAIN_NO VARCHAR   , NOT NULL       */
    protected String smainno;
    /**
    * 拆分凭证号 S_SPLIT_NO VARCHAR , PK   , NOT NULL       */
    protected String ssplitno;
    /**
    * 业务类型 S_VTCODE VARCHAR , PK   , NOT NULL       */
    protected String svtcode;
    /**
    * 拆分流水号 S_SPLIT_VOUSRLNO VARCHAR   , NOT NULL       */
    protected String ssplitvousrlno;
    /**
    * 委托日期 S_COMMITDATE VARCHAR , PK   , NOT NULL       */
    protected String scommitdate;
    /**
    * 机构代码 S_ORGCODE VARCHAR         */
    protected String sorgcode;
    /**
    * 国库代码 S_TRECODE VARCHAR         */
    protected String strecode;
    /**
    * 状态 S_STATUS VARCHAR         */
    protected String sstatus;
    /**
    * 描述 S_DEMO VARCHAR         */
    protected String sdemo;
    /**
    * 系统时间 TS_SYSUPDATE TIMESTAMP         */
    protected Timestamp tssysupdate;
    /**
    * 包流水号 S_PACKAGENO VARCHAR         */
    protected String spackageno;
    /**
    * 总笔数 S_ALLNUM VARCHAR         */
    protected String sallnum;
    /**
    * 总金额 N_ALLAMT DECIMAL         */
    protected BigDecimal nallamt;
    /**
    * 支付日期 S_XACCDATE VARCHAR         */
    protected String sxaccdate;
    /**
    * 支付金额 N_XALLAMT DECIMAL         */
    protected BigDecimal nxallamt;
    /**
    * 备用 S_EXT1 VARCHAR         */
    protected String sext1;
    /**
    * 备用 S_EXT2 VARCHAR         */
    protected String sext2;
    /**
    * 备用 S_EXT3 VARCHAR         */
    protected String sext3;
    /**
    * 备用 S_EXT4 VARCHAR         */
    protected String sext4;
    /**
    * 备用 S_EXT5 VARCHAR         */
    protected String sext5;


/******************************************************
*
*  getter and setter
*
*******************************************************/


    public Long getIvousrlno()
    {
        return ivousrlno;
    }
     /**
     *  原凭证流水号 Setter I_VOUSRLNO, PK , NOT NULL        * */
    public void setIvousrlno(Long _ivousrlno) {
        this.ivousrlno = _ivousrlno;
    }


    public String getSmainno()
    {
        return smainno;
    }
     /**
     *  原凭证号 Setter S_MAIN_NO , NOT NULL        * */
    public void setSmainno(String _smainno) {
        this.smainno = _smainno;
    }


    public String getSsplitno()
    {
        return ssplitno;
    }
     /**
     *  拆分凭证号 Setter S_SPLIT_NO, PK , NOT NULL        * */
    public void setSsplitno(String _ssplitno) {
        this.ssplitno = _ssplitno;
    }


    public String getSvtcode()
    {
        return svtcode;
    }
     /**
     *  业务类型 Setter S_VTCODE, PK , NOT NULL        * */
    public void setSvtcode(String _svtcode) {
        this.svtcode = _svtcode;
    }


    public String getSsplitvousrlno()
    {
        return ssplitvousrlno;
    }
     /**
     *  拆分流水号 Setter S_SPLIT_VOUSRLNO , NOT NULL        * */
    public void setSsplitvousrlno(String _ssplitvousrlno) {
        this.ssplitvousrlno = _ssplitvousrlno;
    }


    public String getScommitdate()
    {
        return scommitdate;
    }
     /**
     *  委托日期 Setter S_COMMITDATE, PK , NOT NULL        * */
    public void setScommitdate(String _scommitdate) {
        this.scommitdate = _scommitdate;
    }


    public String getSorgcode()
    {
        return sorgcode;
    }
     /**
     *  机构代码 Setter S_ORGCODE        * */
    public void setSorgcode(String _sorgcode) {
        this.sorgcode = _sorgcode;
    }


    public String getStrecode()
    {
        return strecode;
    }
     /**
     *  国库代码 Setter S_TRECODE        * */
    public void setStrecode(String _strecode) {
        this.strecode = _strecode;
    }


    public String getSstatus()
    {
        return sstatus;
    }
     /**
     *  状态 Setter S_STATUS        * */
    public void setSstatus(String _sstatus) {
        this.sstatus = _sstatus;
    }


    public String getSdemo()
    {
        return sdemo;
    }
     /**
     *  描述 Setter S_DEMO        * */
    public void setSdemo(String _sdemo) {
        this.sdemo = _sdemo;
    }


    public Timestamp getTssysupdate()
    {
        return tssysupdate;
    }
     /**
     *  系统时间 Setter TS_SYSUPDATE        * */
    public void setTssysupdate(Timestamp _tssysupdate) {
        this.tssysupdate = _tssysupdate;
    }


    public String getSpackageno()
    {
        return spackageno;
    }
     /**
     *  包流水号 Setter S_PACKAGENO        * */
    public void setSpackageno(String _spackageno) {
        this.spackageno = _spackageno;
    }


    public String getSallnum()
    {
        return sallnum;
    }
     /**
     *  总笔数 Setter S_ALLNUM        * */
    public void setSallnum(String _sallnum) {
        this.sallnum = _sallnum;
    }


    public BigDecimal getNallamt()
    {
        return nallamt;
    }
     /**
     *  总金额 Setter N_ALLAMT        * */
    public void setNallamt(BigDecimal _nallamt) {
        this.nallamt = _nallamt;
    }


    public String getSxaccdate()
    {
        return sxaccdate;
    }
     /**
     *  支付日期 Setter S_XACCDATE        * */
    public void setSxaccdate(String _sxaccdate) {
        this.sxaccdate = _sxaccdate;
    }


    public BigDecimal getNxallamt()
    {
        return nxallamt;
    }
     /**
     *  支付金额 Setter N_XALLAMT        * */
    public void setNxallamt(BigDecimal _nxallamt) {
        this.nxallamt = _nxallamt;
    }


    public String getSext1()
    {
        return sext1;
    }
     /**
     *  备用 Setter S_EXT1        * */
    public void setSext1(String _sext1) {
        this.sext1 = _sext1;
    }


    public String getSext2()
    {
        return sext2;
    }
     /**
     *  备用 Setter S_EXT2        * */
    public void setSext2(String _sext2) {
        this.sext2 = _sext2;
    }


    public String getSext3()
    {
        return sext3;
    }
     /**
     *  备用 Setter S_EXT3        * */
    public void setSext3(String _sext3) {
        this.sext3 = _sext3;
    }


    public String getSext4()
    {
        return sext4;
    }
     /**
     *  备用 Setter S_EXT4        * */
    public void setSext4(String _sext4) {
        this.sext4 = _sext4;
    }


    public String getSext5()
    {
        return sext5;
    }
     /**
     *  备用 Setter S_EXT5        * */
    public void setSext5(String _sext5) {
        this.sext5 = _sext5;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *  原凭证流水号 Getter I_VOUSRLNO, PK , NOT NULL       * */
    public static String  columnIvousrlno()
    {
        return "I_VOUSRLNO";
    }
   
    /**
    *  原凭证号 Getter S_MAIN_NO , NOT NULL       * */
    public static String  columnSmainno()
    {
        return "S_MAIN_NO";
    }
   
    /**
    *  拆分凭证号 Getter S_SPLIT_NO, PK , NOT NULL       * */
    public static String  columnSsplitno()
    {
        return "S_SPLIT_NO";
    }
   
    /**
    *  业务类型 Getter S_VTCODE, PK , NOT NULL       * */
    public static String  columnSvtcode()
    {
        return "S_VTCODE";
    }
   
    /**
    *  拆分流水号 Getter S_SPLIT_VOUSRLNO , NOT NULL       * */
    public static String  columnSsplitvousrlno()
    {
        return "S_SPLIT_VOUSRLNO";
    }
   
    /**
    *  委托日期 Getter S_COMMITDATE, PK , NOT NULL       * */
    public static String  columnScommitdate()
    {
        return "S_COMMITDATE";
    }
   
    /**
    *  机构代码 Getter S_ORGCODE       * */
    public static String  columnSorgcode()
    {
        return "S_ORGCODE";
    }
   
    /**
    *  国库代码 Getter S_TRECODE       * */
    public static String  columnStrecode()
    {
        return "S_TRECODE";
    }
   
    /**
    *  状态 Getter S_STATUS       * */
    public static String  columnSstatus()
    {
        return "S_STATUS";
    }
   
    /**
    *  描述 Getter S_DEMO       * */
    public static String  columnSdemo()
    {
        return "S_DEMO";
    }
   
    /**
    *  系统时间 Getter TS_SYSUPDATE       * */
    public static String  columnTssysupdate()
    {
        return "TS_SYSUPDATE";
    }
   
    /**
    *  包流水号 Getter S_PACKAGENO       * */
    public static String  columnSpackageno()
    {
        return "S_PACKAGENO";
    }
   
    /**
    *  总笔数 Getter S_ALLNUM       * */
    public static String  columnSallnum()
    {
        return "S_ALLNUM";
    }
   
    /**
    *  总金额 Getter N_ALLAMT       * */
    public static String  columnNallamt()
    {
        return "N_ALLAMT";
    }
   
    /**
    *  支付日期 Getter S_XACCDATE       * */
    public static String  columnSxaccdate()
    {
        return "S_XACCDATE";
    }
   
    /**
    *  支付金额 Getter N_XALLAMT       * */
    public static String  columnNxallamt()
    {
        return "N_XALLAMT";
    }
   
    /**
    *  备用 Getter S_EXT1       * */
    public static String  columnSext1()
    {
        return "S_EXT1";
    }
   
    /**
    *  备用 Getter S_EXT2       * */
    public static String  columnSext2()
    {
        return "S_EXT2";
    }
   
    /**
    *  备用 Getter S_EXT3       * */
    public static String  columnSext3()
    {
        return "S_EXT3";
    }
   
    /**
    *  备用 Getter S_EXT4       * */
    public static String  columnSext4()
    {
        return "S_EXT4";
    }
   
    /**
    *  备用 Getter S_EXT5       * */
    public static String  columnSext5()
    {
        return "S_EXT5";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "TF_VOUCHER_SPLIT";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[21];        
        columnNames[0]="I_VOUSRLNO";
        columnNames[1]="S_MAIN_NO";
        columnNames[2]="S_SPLIT_NO";
        columnNames[3]="S_VTCODE";
        columnNames[4]="S_SPLIT_VOUSRLNO";
        columnNames[5]="S_COMMITDATE";
        columnNames[6]="S_ORGCODE";
        columnNames[7]="S_TRECODE";
        columnNames[8]="S_STATUS";
        columnNames[9]="S_DEMO";
        columnNames[10]="TS_SYSUPDATE";
        columnNames[11]="S_PACKAGENO";
        columnNames[12]="S_ALLNUM";
        columnNames[13]="N_ALLAMT";
        columnNames[14]="S_XACCDATE";
        columnNames[15]="N_XALLAMT";
        columnNames[16]="S_EXT1";
        columnNames[17]="S_EXT2";
        columnNames[18]="S_EXT3";
        columnNames[19]="S_EXT4";
        columnNames[20]="S_EXT5";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof TfVoucherSplitDto))
            return false;

        TfVoucherSplitDto bean = (TfVoucherSplitDto) obj;


      //compare field ivousrlno
      if((this.ivousrlno==null && bean.ivousrlno!=null) || (this.ivousrlno!=null && bean.ivousrlno==null))
          return false;
        else if(this.ivousrlno==null && bean.ivousrlno==null){
        }
        else{
          if(!bean.ivousrlno.equals(this.ivousrlno))
               return false;
     }
      //compare field smainno
      if((this.smainno==null && bean.smainno!=null) || (this.smainno!=null && bean.smainno==null))
          return false;
        else if(this.smainno==null && bean.smainno==null){
        }
        else{
          if(!bean.smainno.equals(this.smainno))
               return false;
     }
      //compare field ssplitno
      if((this.ssplitno==null && bean.ssplitno!=null) || (this.ssplitno!=null && bean.ssplitno==null))
          return false;
        else if(this.ssplitno==null && bean.ssplitno==null){
        }
        else{
          if(!bean.ssplitno.equals(this.ssplitno))
               return false;
     }
      //compare field svtcode
      if((this.svtcode==null && bean.svtcode!=null) || (this.svtcode!=null && bean.svtcode==null))
          return false;
        else if(this.svtcode==null && bean.svtcode==null){
        }
        else{
          if(!bean.svtcode.equals(this.svtcode))
               return false;
     }
      //compare field ssplitvousrlno
      if((this.ssplitvousrlno==null && bean.ssplitvousrlno!=null) || (this.ssplitvousrlno!=null && bean.ssplitvousrlno==null))
          return false;
        else if(this.ssplitvousrlno==null && bean.ssplitvousrlno==null){
        }
        else{
          if(!bean.ssplitvousrlno.equals(this.ssplitvousrlno))
               return false;
     }
      //compare field scommitdate
      if((this.scommitdate==null && bean.scommitdate!=null) || (this.scommitdate!=null && bean.scommitdate==null))
          return false;
        else if(this.scommitdate==null && bean.scommitdate==null){
        }
        else{
          if(!bean.scommitdate.equals(this.scommitdate))
               return false;
     }
      //compare field sorgcode
      if((this.sorgcode==null && bean.sorgcode!=null) || (this.sorgcode!=null && bean.sorgcode==null))
          return false;
        else if(this.sorgcode==null && bean.sorgcode==null){
        }
        else{
          if(!bean.sorgcode.equals(this.sorgcode))
               return false;
     }
      //compare field strecode
      if((this.strecode==null && bean.strecode!=null) || (this.strecode!=null && bean.strecode==null))
          return false;
        else if(this.strecode==null && bean.strecode==null){
        }
        else{
          if(!bean.strecode.equals(this.strecode))
               return false;
     }
      //compare field sstatus
      if((this.sstatus==null && bean.sstatus!=null) || (this.sstatus!=null && bean.sstatus==null))
          return false;
        else if(this.sstatus==null && bean.sstatus==null){
        }
        else{
          if(!bean.sstatus.equals(this.sstatus))
               return false;
     }
      //compare field sdemo
      if((this.sdemo==null && bean.sdemo!=null) || (this.sdemo!=null && bean.sdemo==null))
          return false;
        else if(this.sdemo==null && bean.sdemo==null){
        }
        else{
          if(!bean.sdemo.equals(this.sdemo))
               return false;
     }
      //compare field tssysupdate
      if((this.tssysupdate==null && bean.tssysupdate!=null) || (this.tssysupdate!=null && bean.tssysupdate==null))
          return false;
        else if(this.tssysupdate==null && bean.tssysupdate==null){
        }
        else{
          if(!bean.tssysupdate.equals(this.tssysupdate))
               return false;
     }
      //compare field spackageno
      if((this.spackageno==null && bean.spackageno!=null) || (this.spackageno!=null && bean.spackageno==null))
          return false;
        else if(this.spackageno==null && bean.spackageno==null){
        }
        else{
          if(!bean.spackageno.equals(this.spackageno))
               return false;
     }
      //compare field sallnum
      if((this.sallnum==null && bean.sallnum!=null) || (this.sallnum!=null && bean.sallnum==null))
          return false;
        else if(this.sallnum==null && bean.sallnum==null){
        }
        else{
          if(!bean.sallnum.equals(this.sallnum))
               return false;
     }
      //compare field nallamt
      if((this.nallamt==null && bean.nallamt!=null) || (this.nallamt!=null && bean.nallamt==null))
          return false;
        else if(this.nallamt==null && bean.nallamt==null){
        }
        else{
          if(!bean.nallamt.equals(this.nallamt))
               return false;
     }
      //compare field sxaccdate
      if((this.sxaccdate==null && bean.sxaccdate!=null) || (this.sxaccdate!=null && bean.sxaccdate==null))
          return false;
        else if(this.sxaccdate==null && bean.sxaccdate==null){
        }
        else{
          if(!bean.sxaccdate.equals(this.sxaccdate))
               return false;
     }
      //compare field nxallamt
      if((this.nxallamt==null && bean.nxallamt!=null) || (this.nxallamt!=null && bean.nxallamt==null))
          return false;
        else if(this.nxallamt==null && bean.nxallamt==null){
        }
        else{
          if(!bean.nxallamt.equals(this.nxallamt))
               return false;
     }
      //compare field sext1
      if((this.sext1==null && bean.sext1!=null) || (this.sext1!=null && bean.sext1==null))
          return false;
        else if(this.sext1==null && bean.sext1==null){
        }
        else{
          if(!bean.sext1.equals(this.sext1))
               return false;
     }
      //compare field sext2
      if((this.sext2==null && bean.sext2!=null) || (this.sext2!=null && bean.sext2==null))
          return false;
        else if(this.sext2==null && bean.sext2==null){
        }
        else{
          if(!bean.sext2.equals(this.sext2))
               return false;
     }
      //compare field sext3
      if((this.sext3==null && bean.sext3!=null) || (this.sext3!=null && bean.sext3==null))
          return false;
        else if(this.sext3==null && bean.sext3==null){
        }
        else{
          if(!bean.sext3.equals(this.sext3))
               return false;
     }
      //compare field sext4
      if((this.sext4==null && bean.sext4!=null) || (this.sext4!=null && bean.sext4==null))
          return false;
        else if(this.sext4==null && bean.sext4==null){
        }
        else{
          if(!bean.sext4.equals(this.sext4))
               return false;
     }
      //compare field sext5
      if((this.sext5==null && bean.sext5!=null) || (this.sext5!=null && bean.sext5==null))
          return false;
        else if(this.sext5==null && bean.sext5==null){
        }
        else{
          if(!bean.sext5.equals(this.sext5))
               return false;
     }



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.ivousrlno!=null)
          _hash_ = _hash_ * 31+ this.ivousrlno.hashCode() ;
        if(this.smainno!=null)
          _hash_ = _hash_ * 31+ this.smainno.hashCode() ;
        if(this.ssplitno!=null)
          _hash_ = _hash_ * 31+ this.ssplitno.hashCode() ;
        if(this.svtcode!=null)
          _hash_ = _hash_ * 31+ this.svtcode.hashCode() ;
        if(this.ssplitvousrlno!=null)
          _hash_ = _hash_ * 31+ this.ssplitvousrlno.hashCode() ;
        if(this.scommitdate!=null)
          _hash_ = _hash_ * 31+ this.scommitdate.hashCode() ;
        if(this.sorgcode!=null)
          _hash_ = _hash_ * 31+ this.sorgcode.hashCode() ;
        if(this.strecode!=null)
          _hash_ = _hash_ * 31+ this.strecode.hashCode() ;
        if(this.sstatus!=null)
          _hash_ = _hash_ * 31+ this.sstatus.hashCode() ;
        if(this.sdemo!=null)
          _hash_ = _hash_ * 31+ this.sdemo.hashCode() ;
        if(this.tssysupdate!=null)
          _hash_ = _hash_ * 31+ this.tssysupdate.hashCode() ;
        if(this.spackageno!=null)
          _hash_ = _hash_ * 31+ this.spackageno.hashCode() ;
        if(this.sallnum!=null)
          _hash_ = _hash_ * 31+ this.sallnum.hashCode() ;
        if(this.nallamt!=null)
          _hash_ = _hash_ * 31+ this.nallamt.hashCode() ;
        if(this.sxaccdate!=null)
          _hash_ = _hash_ * 31+ this.sxaccdate.hashCode() ;
        if(this.nxallamt!=null)
          _hash_ = _hash_ * 31+ this.nxallamt.hashCode() ;
        if(this.sext1!=null)
          _hash_ = _hash_ * 31+ this.sext1.hashCode() ;
        if(this.sext2!=null)
          _hash_ = _hash_ * 31+ this.sext2.hashCode() ;
        if(this.sext3!=null)
          _hash_ = _hash_ * 31+ this.sext3.hashCode() ;
        if(this.sext4!=null)
          _hash_ = _hash_ * 31+ this.sext4.hashCode() ;
        if(this.sext5!=null)
          _hash_ = _hash_ * 31+ this.sext5.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        TfVoucherSplitDto bean = new TfVoucherSplitDto();

          bean.ivousrlno = this.ivousrlno;

          if (this.smainno != null)
            bean.smainno = new String(this.smainno);
          bean.ssplitno = this.ssplitno;

          bean.svtcode = this.svtcode;

          if (this.ssplitvousrlno != null)
            bean.ssplitvousrlno = new String(this.ssplitvousrlno);
          bean.scommitdate = this.scommitdate;

          if (this.sorgcode != null)
            bean.sorgcode = new String(this.sorgcode);
          if (this.strecode != null)
            bean.strecode = new String(this.strecode);
          if (this.sstatus != null)
            bean.sstatus = new String(this.sstatus);
          if (this.sdemo != null)
            bean.sdemo = new String(this.sdemo);
          if (this.tssysupdate != null)
            bean.tssysupdate = (Timestamp) this.tssysupdate.clone();
          if (this.spackageno != null)
            bean.spackageno = new String(this.spackageno);
          if (this.sallnum != null)
            bean.sallnum = new String(this.sallnum);
          if (this.nallamt != null)
            bean.nallamt = new BigDecimal(this.nallamt.toString());
          if (this.sxaccdate != null)
            bean.sxaccdate = new String(this.sxaccdate);
          if (this.nxallamt != null)
            bean.nxallamt = new BigDecimal(this.nxallamt.toString());
          if (this.sext1 != null)
            bean.sext1 = new String(this.sext1);
          if (this.sext2 != null)
            bean.sext2 = new String(this.sext2);
          if (this.sext3 != null)
            bean.sext3 = new String(this.sext3);
          if (this.sext4 != null)
            bean.sext4 = new String(this.sext4);
          if (this.sext5 != null)
            bean.sext5 = new String(this.sext5);
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("TfVoucherSplitDto").append(sep);
        sb.append("[ivousrlno]").append(" = ").append(ivousrlno).append(sep);
        sb.append("[smainno]").append(" = ").append(smainno).append(sep);
        sb.append("[ssplitno]").append(" = ").append(ssplitno).append(sep);
        sb.append("[svtcode]").append(" = ").append(svtcode).append(sep);
        sb.append("[ssplitvousrlno]").append(" = ").append(ssplitvousrlno).append(sep);
        sb.append("[scommitdate]").append(" = ").append(scommitdate).append(sep);
        sb.append("[sorgcode]").append(" = ").append(sorgcode).append(sep);
        sb.append("[strecode]").append(" = ").append(strecode).append(sep);
        sb.append("[sstatus]").append(" = ").append(sstatus).append(sep);
        sb.append("[sdemo]").append(" = ").append(sdemo).append(sep);
        sb.append("[tssysupdate]").append(" = ").append(tssysupdate).append(sep);
        sb.append("[spackageno]").append(" = ").append(spackageno).append(sep);
        sb.append("[sallnum]").append(" = ").append(sallnum).append(sep);
        sb.append("[nallamt]").append(" = ").append(nallamt).append(sep);
        sb.append("[sxaccdate]").append(" = ").append(sxaccdate).append(sep);
        sb.append("[nxallamt]").append(" = ").append(nxallamt).append(sep);
        sb.append("[sext1]").append(" = ").append(sext1).append(sep);
        sb.append("[sext2]").append(" = ").append(sext2).append(sep);
        sb.append("[sext3]").append(" = ").append(sext3).append(sep);
        sb.append("[sext4]").append(" = ").append(sext4).append(sep);
        sb.append("[sext5]").append(" = ").append(sext5).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field I_VOUSRLNO
      if (this.getIvousrlno()==null)
             sb.append("I_VOUSRLNO原凭证流水号不能为空; ");
      
    //check field S_MAIN_NO
      if (this.getSmainno()==null)
             sb.append("S_MAIN_NO原凭证号不能为空; ");
      if (this.getSmainno()!=null)
             if (this.getSmainno().getBytes().length > 50)
                sb.append("S_MAIN_NO原凭证号宽度不能超过 "+50+"个字符; ");
    
    //check field S_SPLIT_NO
      if (this.getSsplitno()==null)
             sb.append("S_SPLIT_NO拆分凭证号不能为空; ");
      if (this.getSsplitno()!=null)
             if (this.getSsplitno().getBytes().length > 50)
                sb.append("S_SPLIT_NO拆分凭证号宽度不能超过 "+50+"个字符; ");
    
    //check field S_VTCODE
      if (this.getSvtcode()==null)
             sb.append("S_VTCODE业务类型不能为空; ");
      if (this.getSvtcode()!=null)
             if (this.getSvtcode().getBytes().length > 4)
                sb.append("S_VTCODE业务类型宽度不能超过 "+4+"个字符; ");
    
    //check field S_SPLIT_VOUSRLNO
      if (this.getSsplitvousrlno()==null)
             sb.append("S_SPLIT_VOUSRLNO拆分流水号不能为空; ");
      if (this.getSsplitvousrlno()!=null)
             if (this.getSsplitvousrlno().getBytes().length > 50)
                sb.append("S_SPLIT_VOUSRLNO拆分流水号宽度不能超过 "+50+"个字符; ");
    
    //check field S_COMMITDATE
      if (this.getScommitdate()==null)
             sb.append("S_COMMITDATE委托日期不能为空; ");
      if (this.getScommitdate()!=null)
             if (this.getScommitdate().getBytes().length > 8)
                sb.append("S_COMMITDATE委托日期宽度不能超过 "+8+"个字符; ");
    
    //check field S_ORGCODE
      if (this.getSorgcode()!=null)
             if (this.getSorgcode().getBytes().length > 12)
                sb.append("S_ORGCODE机构代码宽度不能超过 "+12+"个字符; ");
    
    //check field S_TRECODE
      if (this.getStrecode()!=null)
             if (this.getStrecode().getBytes().length > 10)
                sb.append("S_TRECODE国库代码宽度不能超过 "+10+"个字符; ");
    
    //check field S_STATUS
      if (this.getSstatus()!=null)
             if (this.getSstatus().getBytes().length > 5)
                sb.append("S_STATUS状态宽度不能超过 "+5+"个字符; ");
    
    //check field S_DEMO
      if (this.getSdemo()!=null)
             if (this.getSdemo().getBytes().length > 100)
                sb.append("S_DEMO描述宽度不能超过 "+100+"个字符; ");
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  
    //check field S_PACKAGENO
      if (this.getSpackageno()!=null)
             if (this.getSpackageno().getBytes().length > 8)
                sb.append("S_PACKAGENO包流水号宽度不能超过 "+8+"个字符; ");
    
    //check field S_ALLNUM
      if (this.getSallnum()!=null)
             if (this.getSallnum().getBytes().length > 42)
                sb.append("S_ALLNUM总笔数宽度不能超过 "+42+"个字符; ");
    
    //check field N_ALLAMT
      
    //check field S_XACCDATE
      if (this.getSxaccdate()!=null)
             if (this.getSxaccdate().getBytes().length > 8)
                sb.append("S_XACCDATE支付日期宽度不能超过 "+8+"个字符; ");
    
    //check field N_XALLAMT
      
    //check field S_EXT1
      if (this.getSext1()!=null)
             if (this.getSext1().getBytes().length > 50)
                sb.append("S_EXT1备用宽度不能超过 "+50+"个字符; ");
    
    //check field S_EXT2
      if (this.getSext2()!=null)
             if (this.getSext2().getBytes().length > 50)
                sb.append("S_EXT2备用宽度不能超过 "+50+"个字符; ");
    
    //check field S_EXT3
      if (this.getSext3()!=null)
             if (this.getSext3().getBytes().length > 50)
                sb.append("S_EXT3备用宽度不能超过 "+50+"个字符; ");
    
    //check field S_EXT4
      if (this.getSext4()!=null)
             if (this.getSext4().getBytes().length > 50)
                sb.append("S_EXT4备用宽度不能超过 "+50+"个字符; ");
    
    //check field S_EXT5
      if (this.getSext5()!=null)
             if (this.getSext5().getBytes().length > 50)
                sb.append("S_EXT5备用宽度不能超过 "+50+"个字符; ");
    

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field I_VOUSRLNO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("I_VOUSRLNO")) {
               if (this.getIvousrlno()==null)
                    sb.append("I_VOUSRLNO 原凭证流水号不能为空; ");
               break;
         }
  }
    
    //check field S_MAIN_NO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_MAIN_NO")) {
               if (this.getSmainno()==null)
                    sb.append("S_MAIN_NO 原凭证号不能为空; ");
               if (this.getSmainno()!=null)
                    if (this.getSmainno().getBytes().length > 50)
                        sb.append("S_MAIN_NO 原凭证号宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_SPLIT_NO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_SPLIT_NO")) {
               if (this.getSsplitno()==null)
                    sb.append("S_SPLIT_NO 拆分凭证号不能为空; ");
               if (this.getSsplitno()!=null)
                    if (this.getSsplitno().getBytes().length > 50)
                        sb.append("S_SPLIT_NO 拆分凭证号宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_VTCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_VTCODE")) {
               if (this.getSvtcode()==null)
                    sb.append("S_VTCODE 业务类型不能为空; ");
               if (this.getSvtcode()!=null)
                    if (this.getSvtcode().getBytes().length > 4)
                        sb.append("S_VTCODE 业务类型宽度不能超过 "+4+"个字符");
             break;
         }
  }
    
    //check field S_SPLIT_VOUSRLNO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_SPLIT_VOUSRLNO")) {
               if (this.getSsplitvousrlno()==null)
                    sb.append("S_SPLIT_VOUSRLNO 拆分流水号不能为空; ");
               if (this.getSsplitvousrlno()!=null)
                    if (this.getSsplitvousrlno().getBytes().length > 50)
                        sb.append("S_SPLIT_VOUSRLNO 拆分流水号宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_COMMITDATE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_COMMITDATE")) {
               if (this.getScommitdate()==null)
                    sb.append("S_COMMITDATE 委托日期不能为空; ");
               if (this.getScommitdate()!=null)
                    if (this.getScommitdate().getBytes().length > 8)
                        sb.append("S_COMMITDATE 委托日期宽度不能超过 "+8+"个字符");
             break;
         }
  }
    
    //check field S_ORGCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ORGCODE")) {
                 if (this.getSorgcode()!=null)
                    if (this.getSorgcode().getBytes().length > 12)
                        sb.append("S_ORGCODE 机构代码宽度不能超过 "+12+"个字符");
             break;
         }
  }
    
    //check field S_TRECODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_TRECODE")) {
                 if (this.getStrecode()!=null)
                    if (this.getStrecode().getBytes().length > 10)
                        sb.append("S_TRECODE 国库代码宽度不能超过 "+10+"个字符");
             break;
         }
  }
    
    //check field S_STATUS
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_STATUS")) {
                 if (this.getSstatus()!=null)
                    if (this.getSstatus().getBytes().length > 5)
                        sb.append("S_STATUS 状态宽度不能超过 "+5+"个字符");
             break;
         }
  }
    
    //check field S_DEMO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_DEMO")) {
                 if (this.getSdemo()!=null)
                    if (this.getSdemo().getBytes().length > 100)
                        sb.append("S_DEMO 描述宽度不能超过 "+100+"个字符");
             break;
         }
  }
    
    //don't need check field TS_SYSUPDATE,it is UpdateTimeStamp column
  
    //check field S_PACKAGENO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_PACKAGENO")) {
                 if (this.getSpackageno()!=null)
                    if (this.getSpackageno().getBytes().length > 8)
                        sb.append("S_PACKAGENO 包流水号宽度不能超过 "+8+"个字符");
             break;
         }
  }
    
    //check field S_ALLNUM
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_ALLNUM")) {
                 if (this.getSallnum()!=null)
                    if (this.getSallnum().getBytes().length > 42)
                        sb.append("S_ALLNUM 总笔数宽度不能超过 "+42+"个字符");
             break;
         }
  }
    
    //check field N_ALLAMT
          
    //check field S_XACCDATE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_XACCDATE")) {
                 if (this.getSxaccdate()!=null)
                    if (this.getSxaccdate().getBytes().length > 8)
                        sb.append("S_XACCDATE 支付日期宽度不能超过 "+8+"个字符");
             break;
         }
  }
    
    //check field N_XALLAMT
          
    //check field S_EXT1
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT1")) {
                 if (this.getSext1()!=null)
                    if (this.getSext1().getBytes().length > 50)
                        sb.append("S_EXT1 备用宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_EXT2
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT2")) {
                 if (this.getSext2()!=null)
                    if (this.getSext2().getBytes().length > 50)
                        sb.append("S_EXT2 备用宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_EXT3
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT3")) {
                 if (this.getSext3()!=null)
                    if (this.getSext3().getBytes().length > 50)
                        sb.append("S_EXT3 备用宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_EXT4
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT4")) {
                 if (this.getSext4()!=null)
                    if (this.getSext4().getBytes().length > 50)
                        sb.append("S_EXT4 备用宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
    //check field S_EXT5
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_EXT5")) {
                 if (this.getSext5()!=null)
                    if (this.getSext5().getBytes().length > 50)
                        sb.append("S_EXT5 备用宽度不能超过 "+50+"个字符");
             break;
         }
  }
    
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数; ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段 " + _columnNames[i] + " 不在该表字段中; ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      TfVoucherSplitPK pk = new TfVoucherSplitPK();
      pk.setIvousrlno(getIvousrlno());
      pk.setSsplitno(getSsplitno());
      pk.setSvtcode(getSvtcode());
      pk.setScommitdate(getScommitdate());
      return pk;
    };
}
