    
package com.cfcc.itfe.persistence.dto;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.itfe.persistence.pk.TdEnumtypePK;
/**
 * <p>Title: DTO of table: TD_ENUMTYPE</p>
 * <p>Description:  Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2014-12-25 15:28:57 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author win7
 */

public class TdEnumtypeDto   
                              implements IDto  {
/********************************************************
 *   fields
 ********************************************************/

    /**
    *  S_TYPECODE VARCHAR , PK   , NOT NULL       */
    protected String stypecode;
    /**
    *  S_TYPENAME VARCHAR   , NOT NULL       */
    protected String stypename;
    /**
    *  S_OFCOLUMN VARCHAR   , NOT NULL       */
    protected String sofcolumn;
    /**
    *  S_IFAVAILABLE CHARACTER   , NOT NULL       */
    protected String sifavailable;
    /**
    *  S_REMARK VARCHAR         */
    protected String sremark;


/******************************************************
*
*  getter and setter
*
*******************************************************/


    public String getStypecode()
    {
        return stypecode;
    }
     /**
     *   Setter S_TYPECODE, PK , NOT NULL        * */
    public void setStypecode(String _stypecode) {
        this.stypecode = _stypecode;
    }


    public String getStypename()
    {
        return stypename;
    }
     /**
     *   Setter S_TYPENAME , NOT NULL        * */
    public void setStypename(String _stypename) {
        this.stypename = _stypename;
    }


    public String getSofcolumn()
    {
        return sofcolumn;
    }
     /**
     *   Setter S_OFCOLUMN , NOT NULL        * */
    public void setSofcolumn(String _sofcolumn) {
        this.sofcolumn = _sofcolumn;
    }


    public String getSifavailable()
    {
        return sifavailable;
    }
     /**
     *   Setter S_IFAVAILABLE , NOT NULL        * */
    public void setSifavailable(String _sifavailable) {
        this.sifavailable = _sifavailable;
    }


    public String getSremark()
    {
        return sremark;
    }
     /**
     *   Setter S_REMARK        * */
    public void setSremark(String _sremark) {
        this.sremark = _sremark;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *   Getter S_TYPECODE, PK , NOT NULL       * */
    public static String  columnStypecode()
    {
        return "S_TYPECODE";
    }
   
    /**
    *   Getter S_TYPENAME , NOT NULL       * */
    public static String  columnStypename()
    {
        return "S_TYPENAME";
    }
   
    /**
    *   Getter S_OFCOLUMN , NOT NULL       * */
    public static String  columnSofcolumn()
    {
        return "S_OFCOLUMN";
    }
   
    /**
    *   Getter S_IFAVAILABLE , NOT NULL       * */
    public static String  columnSifavailable()
    {
        return "S_IFAVAILABLE";
    }
   
    /**
    *   Getter S_REMARK       * */
    public static String  columnSremark()
    {
        return "S_REMARK";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "TD_ENUMTYPE";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[5];        
        columnNames[0]="S_TYPECODE";
        columnNames[1]="S_TYPENAME";
        columnNames[2]="S_OFCOLUMN";
        columnNames[3]="S_IFAVAILABLE";
        columnNames[4]="S_REMARK";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof TdEnumtypeDto))
            return false;

        TdEnumtypeDto bean = (TdEnumtypeDto) obj;


      //compare field stypecode
      if((this.stypecode==null && bean.stypecode!=null) || (this.stypecode!=null && bean.stypecode==null))
          return false;
        else if(this.stypecode==null && bean.stypecode==null){
        }
        else{
          if(!bean.stypecode.equals(this.stypecode))
               return false;
     }
      //compare field stypename
      if((this.stypename==null && bean.stypename!=null) || (this.stypename!=null && bean.stypename==null))
          return false;
        else if(this.stypename==null && bean.stypename==null){
        }
        else{
          if(!bean.stypename.equals(this.stypename))
               return false;
     }
      //compare field sofcolumn
      if((this.sofcolumn==null && bean.sofcolumn!=null) || (this.sofcolumn!=null && bean.sofcolumn==null))
          return false;
        else if(this.sofcolumn==null && bean.sofcolumn==null){
        }
        else{
          if(!bean.sofcolumn.equals(this.sofcolumn))
               return false;
     }
      //compare field sifavailable
      if((this.sifavailable==null && bean.sifavailable!=null) || (this.sifavailable!=null && bean.sifavailable==null))
          return false;
        else if(this.sifavailable==null && bean.sifavailable==null){
        }
        else{
          if(!bean.sifavailable.equals(this.sifavailable))
               return false;
     }
      //compare field sremark
      if((this.sremark==null && bean.sremark!=null) || (this.sremark!=null && bean.sremark==null))
          return false;
        else if(this.sremark==null && bean.sremark==null){
        }
        else{
          if(!bean.sremark.equals(this.sremark))
               return false;
     }



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.stypecode!=null)
          _hash_ = _hash_ * 31+ this.stypecode.hashCode() ;
        if(this.stypename!=null)
          _hash_ = _hash_ * 31+ this.stypename.hashCode() ;
        if(this.sofcolumn!=null)
          _hash_ = _hash_ * 31+ this.sofcolumn.hashCode() ;
        if(this.sifavailable!=null)
          _hash_ = _hash_ * 31+ this.sifavailable.hashCode() ;
        if(this.sremark!=null)
          _hash_ = _hash_ * 31+ this.sremark.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        TdEnumtypeDto bean = new TdEnumtypeDto();

          bean.stypecode = this.stypecode;

          if (this.stypename != null)
            bean.stypename = new String(this.stypename);
          if (this.sofcolumn != null)
            bean.sofcolumn = new String(this.sofcolumn);
          if (this.sifavailable != null)
            bean.sifavailable = new String(this.sifavailable);
          if (this.sremark != null)
            bean.sremark = new String(this.sremark);
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("TdEnumtypeDto").append(sep);
        sb.append("[stypecode]").append(" = ").append(stypecode).append(sep);
        sb.append("[stypename]").append(" = ").append(stypename).append(sep);
        sb.append("[sofcolumn]").append(" = ").append(sofcolumn).append(sep);
        sb.append("[sifavailable]").append(" = ").append(sifavailable).append(sep);
        sb.append("[sremark]").append(" = ").append(sremark).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field S_TYPECODE
      if (this.getStypecode()==null)
             sb.append("S_TYPECODE不能为空; ");
      if (this.getStypecode()!=null)
             if (this.getStypecode().getBytes().length > 30)
                sb.append("S_TYPECODE宽度不能超过 "+30+"个字符; ");
    
    //check field S_TYPENAME
      if (this.getStypename()==null)
             sb.append("S_TYPENAME不能为空; ");
      if (this.getStypename()!=null)
             if (this.getStypename().getBytes().length > 100)
                sb.append("S_TYPENAME宽度不能超过 "+100+"个字符; ");
    
    //check field S_OFCOLUMN
      if (this.getSofcolumn()==null)
             sb.append("S_OFCOLUMN不能为空; ");
      if (this.getSofcolumn()!=null)
             if (this.getSofcolumn().getBytes().length > 30)
                sb.append("S_OFCOLUMN宽度不能超过 "+30+"个字符; ");
    
    //check field S_IFAVAILABLE
      if (this.getSifavailable()==null)
             sb.append("S_IFAVAILABLE不能为空; ");
      if (this.getSifavailable()!=null)
             if (this.getSifavailable().getBytes().length > 1)
                sb.append("S_IFAVAILABLE宽度不能超过 "+1+"个字符; ");
    
    //check field S_REMARK
      if (this.getSremark()!=null)
             if (this.getSremark().getBytes().length > 100)
                sb.append("S_REMARK宽度不能超过 "+100+"个字符; ");
    

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field S_TYPECODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_TYPECODE")) {
               if (this.getStypecode()==null)
                    sb.append("S_TYPECODE 不能为空; ");
               if (this.getStypecode()!=null)
                    if (this.getStypecode().getBytes().length > 30)
                        sb.append("S_TYPECODE 宽度不能超过 "+30+"个字符");
             break;
         }
  }
    
    //check field S_TYPENAME
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_TYPENAME")) {
               if (this.getStypename()==null)
                    sb.append("S_TYPENAME 不能为空; ");
               if (this.getStypename()!=null)
                    if (this.getStypename().getBytes().length > 100)
                        sb.append("S_TYPENAME 宽度不能超过 "+100+"个字符");
             break;
         }
  }
    
    //check field S_OFCOLUMN
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_OFCOLUMN")) {
               if (this.getSofcolumn()==null)
                    sb.append("S_OFCOLUMN 不能为空; ");
               if (this.getSofcolumn()!=null)
                    if (this.getSofcolumn().getBytes().length > 30)
                        sb.append("S_OFCOLUMN 宽度不能超过 "+30+"个字符");
             break;
         }
  }
    
    //check field S_IFAVAILABLE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_IFAVAILABLE")) {
               if (this.getSifavailable()==null)
                    sb.append("S_IFAVAILABLE 不能为空; ");
               if (this.getSifavailable()!=null)
                    if (this.getSifavailable().getBytes().length > 1)
                        sb.append("S_IFAVAILABLE 宽度不能超过 "+1+"个字符");
             break;
         }
  }
    
    //check field S_REMARK
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("S_REMARK")) {
                 if (this.getSremark()!=null)
                    if (this.getSremark().getBytes().length > 100)
                        sb.append("S_REMARK 宽度不能超过 "+100+"个字符");
             break;
         }
  }
    
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数; ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段 " + _columnNames[i] + " 不在该表字段中; ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      TdEnumtypePK pk = new TdEnumtypePK();
      pk.setStypecode(getStypecode());
      return pk;
    };
}
